# Canard bootstrap interpreter | Spencer Tipping
# Licensed under the terms of the MIT source code license

# Introduction.
# This file defines a binary ELF image that contains a bootstrap canard
# interpreter. The implementation is heavily influenced by jonesforth, though the
# compiler uses a different output format. Like jonesforth, however, %rsp is used
# for the data stack and %rbp is used for the return stack.

# Basic syntax used in this file is:

# | 1. Address assertion: @!address. Dies unless the next byte will be emitted at
#      the given address. I use these to verify/document the code.
#   2. Address displacement: @address. Inserts null bytes until the given address
#      is reached.
#   3. /n/byte - byte repeated n times.

# That's about it. The rest is just binary data written verbatim in hex (no
# prefix), octal (o prefix), or binary (- prefix).

# ELF header.
# See elf(5) for details about what this is made of.

# Elf64_Ehdr                    # e_ident
@!00 7f 'ELF                    #   ELF magic
@!04 02                         #   64-bit binary
@!05 01                         #   Two's complement little-endian
@!06 01                         #   Current ELF version
@!07 00                         #   System V UNIX ABI

@!08 00                         #   ABI version
@!09 /7/00                      # padding; end

@!10 02 00                      # e_type    = Executable file
@!12 3e 00                      # e_machine = x86-64
@!14 01 00 00 00                # e_version = current version
@!18 78 00 40 00 /4/00          # e_entry

@!20 40 00 00 00 /4/00          # e_phoff
@!28 00 00 00 00 /4/00          # e_shoff

@!30 /4/00                      # e_flags
@!34 40 00                      # e_ehsize
@!36 38 00                      # e_phentsize
@!38 01 00                      # e_phnum

@!3a 0000                       # e_shentsize
@!3c 0000                       # e_shnum
@!3e 0000                       # e_shstrndx
# end

@!40

# Elf64_Phdr (rwx image -- this contains code and definitions)
@!40 01 00 00 00                # p_type  = PT_LOAD
     07 00 00 00                # p_flags = PT_R | PT_W | PT_X

     00 00 00 00 /4/00          # p_offset (includes ELF header)
     00 00 40 00 /4/00          # p_vaddr
     00 00 00 00 /4/00          # p_paddr
     00 04 00 00 /4/00          # p_filesz
     00 04 00 00 /4/00          # p_memsz
     00 10 00 00 /4/00          # p_align
# end

@!78

# Symbol table.
# Canard consists primarily of a symbol table that contains global bindings. Any
# undefined symbol is mapped to a function that defines it with the stack top;
# that is, if 's' is undefined then 's [x ...]' is a definition, not an
# invocation; both are popped from the stack and from then on, 's' is equivalent
# to 'x ...'. Definitions do not patch the caller.

@!78 4831 o300 b03c             # syscall = 60 (exit)
     4831 o355                  # status  = 0
     0f05

# Generated by SDoc
