# Canard bootstrap debugging script.
# GDB definitions to make it easier to debug the main image.

break *0x4001f5
set $stack_end = 0x7fffffffddd8
run

define s
  ni
  print_status
end

define bp
  break *0x400$arg0
end

define xb
  printf "length:   "
  x/wx $arg0
  printf "position: "
  x/wx ($arg0  + 4)
  printf "upper:    "
  x/wx ($arg0  + 8)
  printf "contents: "
  x/20sb ($arg0 + 12)
end

define xs
  print "length:   "
  x/h $arg0
  print "contents: "
  x/10sb ($arg0 + 2)
end

define print_status
  print_data_stack
  print_return_stack
  print_heap

  printf "%c[1;32m%%rx = %lx, %lx, %lx, %lx\n", 27, $rax, $rbx, $rcx, $rdx
  printf "%c[1;32minstruction queue%c[1;30m\n", 27, 27
  x/8i $pc
  printf "%c[0;0m", 27
end

# Stack inspectors.
# Print the top few items on any given stack. Generally, all stack items will be
# pointers, so dereference those.

define print_data_stack
  printf "%c[1;32mdata stack%c[1;30m: %lx\n", 27, 27, $rdi
  set $x = $rdi
  set $lower = 0x400000 + *0x400060
  while $x > $lower
    set $x = $x - 8
    print_cell $x
  end
end

define print_return_stack
  printf "%c[1;32mreturn stack%c[1;30m: %lx\n", 27, 27, $rsp
  set $x = $rsp
  while $x < $stack_end
    print_cell $x
    set $x = $x + 8
  end
end

define print_heap
  printf "%c[1;32mheap%c[1;30m: %lx\n", 27, 27, $rsi
  set $count = 0
  x/i $rsi
  while $_ < 0x4fffff && $count < 10
    x/i
    set $count = $count + 1
  end
end

define print_cell
  x/xg $arg0
  if $__ >= 0x400000 && $__ < 0x500000
    x/i $__
  end
end


# Generated by SDoc
