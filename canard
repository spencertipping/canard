#!/usr/bin/perl
# 99aeabc9ec7fe80b1b39f5e53dc7e49e      <- self-modifying Perl magic

# This is a self-modifying Perl file. I'm sorry you're viewing the source (it's
# really gnarly). If you're curious what it's made of, I recommend reading
# http://github.com/spencertipping/writing-self-modifying-perl.
#
# If you got one of these from someone and don't know what to do with it, send
# it to spencer@spencertipping.com and I'll see if I can figure out what it
# does.

# For the benefit of HTML viewers (this is hack):
# <div id='cover' style='position: absolute; left: 0; top: 0; width: 10000px; height: 10000px; background: white'></div>

$|++;

my %data;
my %transient;
my %externalized_functions;
my %datatypes;

my %locations;          # Maps eval-numbers to attribute names

my $global_data = join '', <DATA>;

sub meta::define_form {
  my ($namespace, $delegate) = @_;
  $datatypes{$namespace} = $delegate;
  *{"meta::${namespace}::implementation"} = $delegate;
  *{"meta::$namespace"} = sub {
    my ($name, $value, %options) = @_;
    chomp $value;
    $data{"${namespace}::$name"} = $value unless $options{no_binding};
    &$delegate($name, $value) unless $options{no_delegate}}}

sub meta::eval_in {
  my ($what, $where) = @_;

  # Obtain next eval-number and alias it to the designated location
  @locations{eval('__FILE__') =~ /\(eval (\d+)\)/} = ($where);

  my $result = eval $what;
  $@ =~ s/\(eval \d+\)/$where/ if $@;
  warn $@ if $@;
  $result}

meta::define_form 'meta', sub {
  my ($name, $value) = @_;
  meta::eval_in($value, "meta::$name")};

meta::meta('configure', <<'__');
# A function to configure transients. Transients can be used to store any number of
# different things, but one of the more common usages is type descriptors.

sub meta::configure {
  my ($datatype, %options) = @_;
  $transient{$_}{$datatype} = $options{$_} for keys %options;
}
__
meta::meta('externalize', <<'__');
# Function externalization. Data types should call this method when defining a function
# that has an external interface.

sub meta::externalize {
  my ($name, $attribute, $implementation) = @_;
  my $escaped = $name;
  $escaped =~ s/[^A-Za-z0-9:]/_/go;
  $externalized_functions{$name} = $externalized_functions{$escaped} = $attribute;
  *{"::$name"} = *{"::$escaped"} = $implementation || $attribute;
}

__
meta::meta('functor::editable', <<'__');
# An editable type. This creates a type whose default action is to open an editor
# on whichever value is mentioned. This can be changed using different flags.

sub meta::functor::editable {
  my ($typename, %options) = @_;

  meta::configure $typename, %options;
  meta::define_form $typename, sub {
    my ($name, $value) = @_;

    $options{on_bind} && &{$options{on_bind}}($name, $value);

    meta::externalize $options{prefix} . $name, "${typename}::$name", sub {
      my $attribute             = "${typename}::$name";
      my ($command, @new_value) = @_;

      return &{$options{default}}(retrieve($attribute)) if ref $options{default} eq 'CODE' and not defined $command;
      return edit($attribute) if $command eq 'edit' or $options{default} eq 'edit' and not defined $command;
      return associate($attribute, @new_value ? join(' ', @new_value) : join('', <STDIN>)) if $command eq '=' or $command eq 'import' or $options{default} eq 'import' and not defined $command;
      return retrieve($attribute)}}}
__
meta::meta('type::alias', <<'__');
meta::configure 'alias', inherit => 0;
meta::define_form 'alias', sub {
  my ($name, $value) = @_;
  meta::externalize $name, "alias::$name", sub {
    # Can't pre-tokenize because shell::tokenize doesn't exist until the library::
    # namespace has been evaluated (which will be after alias::).
    shell::run(shell::tokenize($value), shell::tokenize(@_));
  };
};
__
meta::meta('type::bootstrap', <<'__');
# Bootstrap attributes don't get executed. The reason for this is that because
# they are serialized directly into the header of the file (and later duplicated
# as regular data attributes), they will have already been executed when the
# file is loaded.

meta::configure 'bootstrap', extension => '.pl', inherit => 1;
meta::define_form 'bootstrap', sub {};
__
meta::meta('type::cache', <<'__');
meta::configure 'cache', inherit => 0;
meta::define_form 'cache', \&meta::bootstrap::implementation;
__
meta::meta('type::canard', <<'__');
meta::functor::editable 'canard', extension => '.canard', inherit => 0, default => 'edit';

__
meta::meta('type::data', 'meta::functor::editable \'data\', extension => \'\', inherit => 0, default => \'cat\';');
meta::meta('type::function', <<'__');
meta::configure 'function', extension => '.pl', inherit => 1;
meta::define_form 'function', sub {
  my ($name, $value) = @_;
  meta::externalize $name, "function::$name", meta::eval_in("sub {\n$value\n}", "function::$name");
};
__
meta::meta('type::hook', <<'__');
meta::configure 'hook', extension => '.pl', inherit => 0;
meta::define_form 'hook', sub {
  my ($name, $value) = @_;
  *{"hook::$name"} = meta::eval_in("sub {\n$value\n}", "hook::$name");
};
__
meta::meta('type::inc', <<'__');
meta::configure 'inc', inherit => 1, extension => '.pl';
meta::define_form 'inc', sub {
  use File::Path 'mkpath';
  use File::Basename qw/basename dirname/;

  my ($name, $value) = @_;
  my $tmpdir   = basename($0) . '-' . $$;
  my $filename = "/tmp/$tmpdir/$name";

  push @INC, "/tmp/$tmpdir" unless grep /^\/tmp\/$tmpdir$/, @INC;

  mkpath(dirname($filename));
  unless (-e $filename) {
    open my $fh, '>', $filename;
    print $fh $value;
    close $fh;
  }
};
__
meta::meta('type::indicator', <<'__');
# Shell indicator function. The output of each of these is automatically
# appended to the shell prompt.

meta::configure 'indicator', inherit => 1, extension => '.pl';
meta::define_form 'indicator', sub {
  my ($name, $value) = @_;
  *{"indicator::$name"} = meta::eval_in("sub {\n$value\n}", "indicator::$name");
};
__
meta::meta('type::internal_function', <<'__');
meta::configure 'internal_function', extension => '.pl', inherit => 1;
meta::define_form 'internal_function', sub {
  my ($name, $value) = @_;
  *{$name} = meta::eval_in("sub {\n$value\n}", "internal_function::$name");
};
__
meta::meta('type::js', <<'__');
meta::functor::editable 'js', extension => '.js', inherit => 1;

__
meta::meta('type::library', <<'__');
meta::configure 'library', extension => '.pl', inherit => 1;
meta::define_form 'library', sub {
  my ($name, $value) = @_;
  meta::eval_in($value, "library::$name");
};
__
meta::meta('type::message_color', <<'__');
meta::configure 'message_color', extension => '', inherit => 1;
meta::define_form 'message_color', sub {
  my ($name, $value) = @_;
  terminal::color($name, $value);
};
__
meta::meta('type::meta', <<'__');
# This doesn't define a new type. It customizes the existing 'meta' type
# defined in bootstrap::initialization. Note that horrible things will
# happen if you redefine it using the editable functor.

meta::configure 'meta', extension => '.pl', inherit => 1;
__
meta::meta('type::note', 'meta::functor::editable \'note\', extension => \'.sdoc\', inherit => 0, default => \'edit\';');
meta::meta('type::parent', <<'__');
meta::define_form 'parent', \&meta::bootstrap::implementation;
meta::configure 'parent', extension => '', inherit => 1;
__
meta::meta('type::retriever', <<'__');
meta::configure 'retriever', extension => '.pl', inherit => 1;
meta::define_form 'retriever', sub {
  my ($name, $value) = @_;
  $transient{retrievers}{$name} = meta::eval_in("sub {\n$value\n}", "retriever::$name");
};
__
meta::meta('type::sdoc', <<'__');
# A meta-type for other types. So retrieve('js::main') will work if you have
# the attribute 'sdoc::js::main'. The filename will be main.js.sdoc.

meta::functor::editable 'sdoc', inherit => 1, extension => sub {
  extension_for(attribute($_[0])) . '.sdoc';
};
__
meta::meta('type::slibrary', <<'__');
meta::configure 'slibrary', extension => '.pl.sdoc', inherit => 1;
meta::define_form 'slibrary', sub {
  my ($name, $value) = @_;
  meta::eval_in(sdoc("slibrary::$name"), "slibrary::$name");
};

__
meta::meta('type::state', <<'__');
# Allows temporary or long-term storage of states. Nothing particularly insightful
# is done about compression, so storing alternative states will cause a large
# increase in size. Also, states don't contain other states -- otherwise the size
# increase would be exponential.

# States are created with the save-state function.

meta::configure 'state', inherit => 0, extension => '.pl';
meta::define_form 'state', \&meta::bootstrap::implementation;
__
meta::meta('type::template', <<'__');
meta::configure 'template', extension => '.pl', inherit => 1;
meta::define_form 'template', sub {
  my ($name, $value) = @_;
  meta::externalize "template::$name", "template::$name", meta::eval_in("sub {\n$value\n}", "template::$name");
};
__
meta::meta('type::vim_highlighter', <<'__');
meta::configure 'vim_highlighter', extension => '.vim', inherit => 1;
meta::define_form 'vim_highlighter', \&meta::bootstrap::implementation;

__
meta::meta('type::waul', <<'__');
meta::functor::editable 'waul', inherit => 1, extension => '.waul', default => 'edit';

__
meta::alias('cb', <<'__');
ad -c js::|waul::

__
meta::alias('cl', 'ad -c canard::lib');
meta::alias('cn', 'ad -c note::');
meta::alias('cr', <<'__');
ad -c canard::boot

__
meta::alias('eb', 'edit sdoc::waul::boot');
meta::alias('ebb', 'edit sdoc::canard::boot/binary');
meta::alias('ebi', 'edit sdoc::js::boot-image');
meta::alias('er', 'edit sdoc::readme');
meta::alias('erf', 'edit function::render');
meta::alias('erwf', 'edit function::render-waul');
meta::alias('esl', 'edit sdoc::canard::stdlib');
meta::alias('ev', 'edit vim_highlighter::canard');
meta::alias('l', 'edit --prefix=sdoc::canard::lib/');
meta::alias('r', <<'__');
sh waul -e deps/regexp.js -e deps/parser.js -e src/boot.js -c :all

__
meta::alias('repl', 'sh boot/interpreter');
meta::alias('sr', 'srepl');
meta::alias('srepl', <<'__');
sh boot/interpreter -i stdlib.canard

__
meta::bootstrap('html', <<'__');
<html>
  <head>
  <meta http-equiv='content-type' content='text/html; charset=UTF-8' />
  <link rel='stylesheet' href='http://spencertipping.com/perl-objects/web/style.css'/>

  <script src='http://ajax.googleapis.com/ajax/libs/jquery/1.5.2/jquery.min.js'></script>
  <script src='http://spencertipping.com/caterwaul/caterwaul.all.min.js'></script>
  <script src='http://spencertipping.com/montenegro/montenegro.client.js'></script>
  <script src='http://spencertipping.com/perl-objects/web/attribute-parser.js'></script>
  <script src='http://spencertipping.com/perl-objects/web/interface.js'></script>
  </head>
  <body></body>
</html>

__
meta::bootstrap('initialization', <<'__');
#!/usr/bin/perl
# 99aeabc9ec7fe80b1b39f5e53dc7e49e      <- self-modifying Perl magic

# This is a self-modifying Perl file. I'm sorry you're viewing the source (it's
# really gnarly). If you're curious what it's made of, I recommend reading
# http://github.com/spencertipping/writing-self-modifying-perl.
#
# If you got one of these from someone and don't know what to do with it, send
# it to spencer@spencertipping.com and I'll see if I can figure out what it
# does.

# For the benefit of HTML viewers (this is hack):
# <div id='cover' style='position: absolute; left: 0; top: 0; width: 10000px; height: 10000px; background: white'></div>

$|++;

my %data;
my %transient;
my %externalized_functions;
my %datatypes;

my %locations;          # Maps eval-numbers to attribute names

my $global_data = join '', <DATA>;

sub meta::define_form {
  my ($namespace, $delegate) = @_;
  $datatypes{$namespace} = $delegate;
  *{"meta::${namespace}::implementation"} = $delegate;
  *{"meta::$namespace"} = sub {
    my ($name, $value, %options) = @_;
    chomp $value;
    $data{"${namespace}::$name"} = $value unless $options{no_binding};
    &$delegate($name, $value) unless $options{no_delegate}}}

sub meta::eval_in {
  my ($what, $where) = @_;

  # Obtain next eval-number and alias it to the designated location
  @locations{eval('__FILE__') =~ /\(eval (\d+)\)/} = ($where);

  my $result = eval $what;
  $@ =~ s/\(eval \d+\)/$where/ if $@;
  warn $@ if $@;
  $result}

meta::define_form 'meta', sub {
  my ($name, $value) = @_;
  meta::eval_in($value, "meta::$name")};

__
meta::bootstrap('perldoc', <<'__');
=head1 Self-modifying Perl script

=head2 Original implementation by Spencer Tipping L<http://spencertipping.com>

The prototype for this script is licensed under the terms of the MIT source code license.
However, this script in particular may be under different licensing terms. To find out how
this script is licensed, please contact whoever sent it to you. Alternatively, you may
run it with the 'license' argument if they have specified a license that way.

You should not edit this file directly. For information about how it was constructed, go
to L<http://spencertipping.com/writing-self-modifying-perl>. For quick usage guidelines,
run this script with the 'usage' argument.

=cut

__
meta::cache('parent-identification', <<'__');
/home/spencertipping/bin/object 99aeabc9ec7fe80b1b39f5e53dc7e49e
/home/spencertipping/bin/waul-object 4e04fdb8e560f4dd2ca4880b91a8e2ea
/home/spencertipping/conjectures/perl-objects/js 246bc56c88e8e8daae3737dbb16a2a2c
/home/spencertipping/conjectures/perl-objects/sdoc a1e8480e579614c01dabeecf0f963bcc
binary 93194ecf50e38f2adb6e273909e007b5
canard-object 3d87f1a4b0694cfebcbfd589fa5ed5dd
notes a9e5975593ed5d90d943ad98405c71e5
object 99aeabc9ec7fe80b1b39f5e53dc7e49e
preprocessor 70dae4b46eb4e06798ec6f38d17d4c7b
sdoc a1e8480e579614c01dabeecf0f963bcc
text ffe5790f4c605b3bd73283f7c5e57dc5
vim-highlighters 902333a0bd6ed90ff919fe8477cb4e69
__
meta::data('author', 'Spencer Tipping');
meta::data('default-action', 'shell');
meta::data('license', <<'__');
MIT License
Copyright (c) 2010 Spencer Tipping

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
__
meta::function('ad', <<'__');
my ($options, @paths) = separate_options(@_);
@{$transient{path}} = () if $$options{-c};
return @{$transient{path}} = () unless @paths;
push @{$transient{path}}, @paths;

__
meta::function('alias', <<'__');
my ($name, @stuff) = @_;
@_ ? @stuff ? around_hook('alias', @_, sub {associate("alias::$name", join(' ', @stuff), execute => 1)})
            : retrieve("alias::$name") // "Undefined alias $name"
   : table_display([select_keys('--namespace' => 'alias')], [map retrieve($_), select_keys('--namespace' => 'alias')]);

__
meta::function('boot', <<'__');
create("sdoc::canard::boot/$_[0]");

__
meta::function('canard-pack', <<'__');
# Packs down a canard program as text.
my $program = cat(@_);
$program =~ s/\s*(\]|\[)\s*/\1/g;
$program =~ s/\s+/ /g;
$program =~ s/^\s|\s$//g;
$program;

__
meta::function('cat', 'join "\\n", retrieve(@_);');
meta::function('cc', <<'__');
# Stashes a quick one-line continuation. (Used to remind me what I was doing.)
@_ ? associate('data::current-continuation', hook('set-cc', join(' ', @_))) : retrieve('data::current-continuation');
__
meta::function('ccc', 'rm(\'data::current-continuation\');');
meta::function('child', <<'__');
around_hook('child', @_, sub {
  my ($child_name) = @_;
  clone($child_name);
  enable();
  qx($child_name update-from $0 -n);
  disable()});
__
meta::function('clone', <<'__');
for (grep length, @_) {
  around_hook('clone', $_, sub {
    hypothetically(sub {
      rm('data::permanent-identity');
      file::write($_, serialize(), noclobber => 1);
      chmod(0700, $_)})})}
__
meta::function('cp', <<'__');
my $from = shift @_;
my $value = retrieve($from);
associate($_, $value) for @_;
__
meta::function('create', <<'__');
my ($name, $value) = @_;
around_hook('create', $name, $value, sub {
  return edit($name) if exists $data{$name};
  associate($name, defined $value ? $value : '');
  edit($name) unless defined $value});
__
meta::function('current-state', 'serialize(\'-pS\');');
meta::function('cwd', <<'__');
use Cwd qw/getcwd/;
getcwd();

__
meta::function('disable', 'hook(\'disable\', chmod_self(sub {$_[0] & 0666}));');
meta::function('edit', <<'__');
my ($options, @names) = separate_options(@_);

@names = select_keys('--criteria' => "^$$options{'--prefix'}.*" . join('.*', @names), %$options) if $$options{'--prefix'};

my ($name, @others) = @names;
die "cannot edit multiple attributes simultaneously (others are @others)" if @others;

my $extension = extension_for($name);

die "$name is virtual or does not exist" unless exists $data{$name};
die "$name is inherited; use 'edit $name -f' to edit anyway" unless is($name, '-u') || is($name, '-d') || exists $$options{'-f'};

around_hook('edit', @_, sub {
  associate($name, invoke_editor_on($data{$name} // '', %options, attribute => $name, extension => $extension), execute => 1)});

save() unless $data{'data::edit::no-save'};
'';

__
meta::function('edit-self', <<'__');
$global_data = invoke_editor_on($global_data);
save();

__
meta::function('enable', 'hook(\'enable\', chmod_self(sub {$_[0] | $_[0] >> 2}));');
meta::function('export', <<'__');
# Exports data into a text file.
#   export attr1 attr2 attr3 ... file.txt
my $name = pop @_;
@_ or die 'Expected filename';
file::write($name, join "\n", retrieve(@_));
__
meta::function('extern', '&{$_[0]}(retrieve(@_[1 .. $#_]));');
meta::function('grep', <<'__');
# Looks through attributes for a pattern. Usage is grep pattern [options], where
# [options] is the format as provided to select_keys.

my ($pattern, @args)     = @_;
my ($options, @criteria) = separate_options(@args);
my @attributes           = select_keys(%$options, '--criteria' => join('|', @criteria));

$pattern = qr/$pattern/;

my @m_attributes;
my @m_line_numbers;
my @m_lines;

for my $k (@attributes) {
  next unless length $k;
  my @lines = split /\n/, retrieve($k);
  for (0 .. $#lines) {
    next unless $lines[$_] =~ $pattern;
    push @m_attributes,   $k;
    push @m_line_numbers, $_ + 1;
    push @m_lines,        '' . ($lines[$_] // '')}}

unless ($$options{'-C'}) {
  s/($pattern)/\033[1;31m\1\033[0;0m/g for @m_lines;
  s/^/\033[1;34m/o for @m_attributes;
  s/^/\033[1;32m/o && s/$/\033[0;0m/o for @m_line_numbers}

table_display([@m_attributes], [@m_line_numbers], [@m_lines]);
__
meta::function('hash', 'fast_hash(@_);');
meta::function('hook', <<'__');
my ($hook, @args) = @_;
$transient{active_hooks}{$hook} = 1;
dangerous('', sub {&$_(@args)}) for grep /^hook::${hook}::/, sort keys %data;
@args;
__
meta::function('hooks', 'join "\\n", sort keys %{$transient{active_hooks}};');
meta::function('identity', 'retrieve(\'data::permanent-identity\') || associate(\'data::permanent-identity\', fast_hash(rand() . name() . serialize()));');
meta::function('import', <<'__');
my $name = pop @_;
associate($name, @_ ? join('', map(file::read($_), @_)) : join('', <STDIN>)); 
__
meta::function('initial-state', '$transient{initial};');
meta::function('is', <<'__');
my ($attribute, @criteria) = @_;
my ($options, @stuff) = separate_options(@criteria);
exists $data{$attribute} and attribute_is($attribute, %$options);

__
meta::function('lib', <<'__');
create("sdoc::canard::lib/$_[0]");

__
meta::function('load-state', <<'__');
around_hook('load-state', @_, sub {
  my ($state_name) = @_;
  my $state = retrieve("state::$state_name");

  terminal::state('saving current state into _...');
  save_state('_');

  delete $data{$_} for grep ! /^state::/, keys %data;
  %externalized_functions = ();

  terminal::state("restoring state $state_name...");
  meta::eval_in($state, "state::$state_name");
  terminal::error(hook('load-state-failed', $@)) if $@;
  reload();
  verify()});

__
meta::function('lock', 'hook(\'lock\', chmod_self(sub {$_[0] & 0555}));');
meta::function('ls', <<'__');
my ($options, @criteria) = separate_options(@_);
my ($external, $shadows, $sizes, $flags, $long, $hashes, $parent_hashes) = @$options{qw(-e -s -z -f -l -h -p)};
$sizes = $flags = $hashes = $parent_hashes = 1 if $long;

return table_display([grep ! exists $data{$externalized_functions{$_}}, sort keys %externalized_functions]) if $shadows;

my $criteria    = join('|', @criteria);
my @definitions = select_keys('--criteria' => $criteria, '--path' => $transient{path}, %$options);

my %inverses  = map {$externalized_functions{$_} => $_} keys %externalized_functions;
my @externals = map $inverses{$_}, grep length, @definitions;
my @internals = grep length $inverses{$_}, @definitions;
my @sizes     = map sprintf('%6d %6d', length(serialize_single($_)), length(retrieve($_))), @{$external ? \@internals : \@definitions} if $sizes;

my @flags     = map {my $k = $_; join '', map(is($k, "-$_") ? $_ : '-', qw(d i m u))} @definitions if $flags;
my @hashes    = map fast_hash(retrieve($_)), @definitions if $hashes;

my %inherited     = parent_attributes(grep /^parent::/o, keys %data) if $parent_hashes;
my @parent_hashes = map $inherited{$_} || '-', @definitions if $parent_hashes;

join "\n", map strip($_), split /\n/, table_display($external ? [grep length, @externals] : [@definitions],
                                                    $sizes ? ([@sizes]) : (), $flags ? ([@flags]) : (), $hashes ? ([@hashes]) : (), $parent_hashes ? ([@parent_hashes]) : ());

__
meta::function('minify-yui', <<'__');
# Minify using YUI compressor
my ($options, @filenames) = separate_options(@_);
my $nomunge   = $$options{-m} ? '' : '--nomunge';
my $linebreak = $$options{-B} ? '' : '--line-break 160';

for my $filename (@filenames) {
  my $minified = $filename;
  $minified =~ s/\.js$/.min.js/;

  terminal::info("minifying $filename");
  file::write($minified, join '', qx(yuicompressor $nomunge $linebreak "$filename"));
}

__
meta::function('mv', <<'__');
my ($from, $to) = @_;
die "'$from' does not exist" unless exists $data{$from};
associate($to, retrieve($from), execute => 1);
rm($from);

__
meta::function('name', <<'__');
my $name = $0;
$name =~ s/^.*\///;
$name;
__
meta::function('note', <<'__');
# Creates a note with a given name, useful for jotting things down.
my $name = join('-', @_);
create("note::$name");

__
meta::function('notes', 'ls(\'-a\', \'^note::\');');
meta::function('parents', 'join "\\n", grep s/^parent:://o, sort keys %data;');
meta::function('perl', <<'__');
my @result = eval(join ' ', @_);
$@ ? terminal::error($@) : wantarray ? @result : $result[0];

__
meta::function('preprocess', <<'__');
# Implements a simple preprocessing language.
# Syntax follows two forms. One is the 'line form', which gives you a way to specify arguments inline
# but not spanning multiple lines. The other is 'block form', which gives you access to both one-line
# arguments and a block of lines. The line parameters are passed in verbatim, and the block is
# indentation-adjusted and then passed in as a second parameter. (Indentation is adjusted to align
# with the name of the command.)
#
# Here are the forms:
#
# - line arguments to function
#
# - block line arguments << eof
#   block contents
#   block contents
#   ...
# - eof

my ($string, %options) = @_;
my $expansions         = 0;
my $old_string         = '';
my $limit              = $options{expansion_limit} || 100;
my @pieces             = ();

sub adjust_spaces {
  my ($spaces, $string) = @_;
  $string =~ s/^$spaces  //mg;
  chomp $string;
  $string;
}

while ($old_string ne $string and $expansions++ < $limit) {
  $old_string = $string;

  while ((my @pieces = split  /(^(\h*)-\h \S+ \h* \V* <<\h*(\w+)$ \n .*?  ^\2-\h\3$)/xms, $string) > 1 and $expansions++ < $limit) {
    $pieces[1 + ($_ << 2)] =~ /^ (\h*)-\h(\S+)\h*(\V*)<<\h*(\w+)$ \n(.*?) ^\1-\h\4 $/xms && $externalized_functions{"template::$2"} and
      $pieces[1 + ($_ << 2)] = &{"template::$2"}($3, adjust_spaces($1, $5))
      for 0 .. $#pieces / 4;

    @pieces[2 + ($_ << 2), 3 + ($_ << 2)] = '' for 0 .. $#pieces / 4;
    $string = join '', @pieces;
  }

  if ((my @pieces = split     /^(\h*-\h \S+ \h* .*)$/xom, $string) > 1) {
    $pieces[1 + ($_ << 1)] =~ /^ \h*-\h(\S+)\h*(.*)$/xom && $externalized_functions{"template::$1"} and
      $pieces[1 + ($_ << 1)] = &{"template::$1"}($2)
      for 0 .. $#pieces >> 1;

    $string = join '', @pieces;
  }
}

$string;
__
meta::function('rd', <<'__');
if (@_) {my $pattern = join '|', @_;
         @{$transient{path}} = grep $_ !~ /^$pattern$/, @{$transient{path}}}
else    {pop @{$transient{path}}}

__
meta::function('reload', 'around_hook(\'reload\', sub {execute($_) for grep ! /^bootstrap::/, keys %data});');
meta::function('render', <<'__');
my ($options, @stuff) = separate_options(@_);

# Commented out until I write an accurate readme
# file::write('README.md', retrieve('markdown::readme'));

file::write("src/$_.waul.sdoc", retrieve("sdoc::waul::$_"),     mkpath => 1),
file::write("src/$_.md",        retrieve("markdown::waul::$_"), mkpath => 1) for qw/boot/;

my @deps = map "-e deps/$_.js", qw/regexp parser/;
terminal::info('waul-compiling bootstrap interpreter'),
sh("waul @deps src/boot.waul.sdoc") unless $$options{-W};

file::write('boot/interpreter', retrieve('pp::js::boot-image'), mkpath => 1),
chmod 0700, 'boot/interpreter';

file::write("$_.canard", retrieve("canard::$_"),           mkpath => 1) for grep s/^(sdoc::)?canard::lib\//lib\//, sort keys %data;
file::write("$_.md",     retrieve("markdown::canard::$_"), mkpath => 1) for grep s/^sdoc::canard::lib\//lib\//,    sort keys %data;
file::write("doc/$_.md", retrieve("markdown::note::$_"),   mkpath => 1) for grep s/^note:://,                      sort keys %data;

file::write("stdlib.canard", retrieve("wrapped-near.80::canard-pack::pp::sdoc::canard::stdlib"));

__
meta::function('rm', <<'__');
around_hook('rm', @_, sub {
  exists $data{$_} or terminal::warning("$_ does not exist") for @_;
  delete @data{@_}});
__
meta::function('rmparent', <<'__');
# Removes one or more parents.
my ($options, @parents) = separate_options(@_);
my $clobber_divergent = $$options{'-D'} || $$options{'--clobber-divergent'};

my %parents = map {$_ => 1} @parents;
my @other_parents = grep !$parents{$_}, grep s/^parent:://, select_keys('--namespace' => 'parent');
my %kept_by_another_parent;

$kept_by_another_parent{$_} = 1 for grep s/^(\S+)\s.*$/\1/, split /\n/o, cat(@other_parents);

for my $parent (@parents) {
  my $keep_parent_around = 0;

  for my $line (split /\n/, retrieve("parent::$parent")) {
    my ($name, $hash) = split /\s+/, $line;
    next unless exists $data{$name};

    my $local_hash = fast_hash(retrieve($name));
    if ($clobber_divergent or $hash eq $local_hash or ! defined $hash) {rm($name) unless $kept_by_another_parent{$name}}
    else {terminal::info("local attribute $name exists and is divergent; use rmparent -D $parent to delete it");
          $keep_parent_around = 1}}

  $keep_parent_around ? terminal::info("not deleting parent::$parent so that you can run", "rmparent -D $parent if you want to nuke divergent attributes too")
                      : rm("parent::$parent")}

__
meta::function('rs', <<'__');
render('-W');
srepl();

__
meta::function('run-example', <<'__');
sh("boot/interpreter examples/$_[0].canard");

__
meta::function('save', <<'__');
around_hook('save', sub {dangerous('', sub {file::write($0, serialize('-V')); $transient{initial} = state()}) if verify()});

__
meta::function('save-state', <<'__');
# Creates a named copy of the current state and stores it.
my ($state_name) = @_;
around_hook('save-state', $state_name, sub {
  associate("state::$state_name", current_state(), execute => 1)});

__
meta::function('sdoc', <<'__');
# Applies SDoc processing to a file or attribute. Takes the file or attribute
# name as the first argument and returns the processed text.

my %comments_for_extension = 
  qw|c     /*,*/  cpp   //    cc   //    h    //    java //  py  #    rb   #    pl  #   pm   #         ml   (*,*)  js  //
     hs    --     sh    #     lisp ;;;   lsp  ;;;   s    #   scm ;;;  sc   ;;;  as  //  html <!--,-->  mli  (*,*)  cs  //
     vim   "      elisp ;     bas  '     ada  --    asm  ;   awk #    bc   #    boo #   tex  %         fss  (*,*)  erl %
     scala //     hx    //    io   //    j    NB.   lua  --  n   //   m    %    php //  sql  --        pov  //     pro %
     r     #      self  ","   tcl  #     texi @c    tk   #   csh #    vala //   vbs '   v    /*,*/     vhdl --     ss  ;;;
     haml  -#     sass  /*,*/ scss /*,*/ css  /*,*/ fig  /   waul #   canard nb[,]|;

# No extension suggests a shebang line, which generally requires # to denote a comment.
$comments_for_extension{''} = '#';

my $generated_string = 'Generated by SDoc';

sub is_code    {map /^\s*[^A-Z\|\s]/o, @_}
sub is_blank   {map /^\n/o, @_}
sub comment    {my ($text, $s, $e) = @_; join "\n", map("$s $_" . (length $e ? " $e" : ''), split /\n/, $text)}

sub paragraphs {map split(/((?:\n\h*){2,})/, $_), @_}

my ($filename, $specified_extension) = @_;

# Two possibilities here. One is that the filename is an attribute, in which case
# we want to look up the extension in the transients table. The other is that
# it's a real filename.
my ($extension)       = $specified_extension || ($filename =~ /\.sdoc$/io ? $filename =~ /\.(\w+)\.sdoc$/igo : $filename =~ /\.(\w+)$/igo);
my ($other_extension) = extension_for($filename);
$other_extension =~ s/\.sdoc$//io;
$other_extension =~ s/^\.//o;

my ($start, $end) = split /,/o, $comments_for_extension{lc($other_extension || $extension)} // $comments_for_extension{''} // '#';

join '', map(is_code($_) || is_blank($_) ? ($_ =~ /^\s*c\n(.*)$/so ? $1 : $_) : comment($_, $start, $end), paragraphs retrieve($filename)),
         "\n" . comment($generated_string, $start, $end) . "\n";

__
meta::function('sdoc-html', <<'__');
# Converts SDoc to logically-structured HTML. Sections end up being nested,
# and code sections and examples are marked as such. For instance, here is some
# sample output:

# <div class='section level1'>
#   <h1 class='title'>Foo</h1>
#   <p>This is a paragraph...</p>
#   <p>This is another paragraph...</p>
#   <pre class='code'>int main () {return 0;}</pre>
#   <pre class='quoted'>int main () {return 0} // Won't compile</pre>
#   <div class='section level2'>
#     <h2 class='title'>Bar</h2>
#     ...
#   </div>
# </div>

# It is generally good about escaping things that would interfere with HTML,
# but within text paragraphs it lets you write literal HTML. The heuristic is
# that known tags that are reasonably well-formed are allowed, but unknown ones
# are escaped.

my ($attribute)   = @_;
my @paragraphs    = split /\n(?:\s*\n)+/, retrieve($attribute);

my $known_tags    = join '|', qw[html head body meta script style link title div a span input button textarea option select form label iframe blockquote code caption
                                 table tbody tr td th thead tfoot img h1 h2 h3 h4 h5 h6 li ol ul noscript p pre samp sub sup var canvas audio video strong em];
my $section_level = 0;
my @markup;

my $indent        = sub {'  ' x ($_[0] || $section_level)};
my $unindent      = sub {my $spaces = '  ' x ($section_level - 1); s/^$spaces//gm};

my $escape_all    = sub {s/&/&amp;/g; s/</&lt;/g; s/>/&gt;/g};
my $escape_some   = sub {s/&/&amp;/g; s/<(?!\/|($known_tags)[^>]*>.*<\/\1>)/&lt;/gs};

my $code          = sub {&$escape_all(); &$unindent(); s/^c\n//;                   push @markup, &$indent() . "<pre class='code'>$_</pre>"};
my $quoted        = sub {&$escape_all(); &$unindent(); s/^\|(\s?)/ \1/; s/^  //mg; push @markup, &$indent() . "<pre class='quoted'>$_</pre>"};

my $paragraph     = sub {&$escape_some(); push @markup, &$indent() . "<p>$_</p>"};

my $section       = sub {my $h = $_[0] > 6 ? 6 : $_[0]; push @markup, &$indent($_[0] - 1) . "<div class='section level$_[0]'>", &$indent($_[0]) . "<h$h>$2</h$h>"};
my $close_section = sub {push @markup, &$indent($_[0]) . "</div>"};

my $title = sub {
  my $indentation = (length($1) >> 1) + 1;
  &$close_section($section_level) while $section_level-- >= $indentation;
  &$section($indentation);
  $section_level = $indentation;
};

for (@paragraphs) {
  &$code(),   next unless /^\h*[A-Z|]/;
  &$quoted(), next if     /^\h*\|/;

  &$title(), s/^.*\n// if /^(\s*)(\S.*)\.\n([^\n]+)/ and length("$1$2") < 60 and length("$1$2") - 10 < length($3);
  &$paragraph();
}

&$close_section($section_level) while $section_level--;

join "\n", @markup;

__
meta::function('sdoc-markdown', <<'__');
# Renders a chunk of SDoc as Markdown. This involves converting quoted and
# unquoted code and section headings, but not numbered lists.

my ($attribute)   = @_;
my @paragraphs    = split /\n(?:\s*\n)+/, retrieve($attribute);

my $section_level = 0;
my @markup;

my $indent        = sub {'  ' x ($_[0] || $section_level)};
my $unindent      = sub {my $spaces = '  ' x ($section_level - 1); s/^$spaces//gm; $_};

my $code          = sub {&$unindent(); s/^c\n//;                   push @markup, join("\n", map &$indent(2) . $_, split /\n/)};
my $quoted        = sub {&$unindent(); s/^\|(\s?)/ \1/; s/^  //mg; push @markup, join("\n", map &$indent(2) . $_, split /\n/)};

my $heading       = sub {'#' x $_[0]};
my $section       = sub {&$unindent(); push @markup, &$heading($_[0]) . ' ' . $2};

my $title = sub {
  my $indentation = (length($1) >> 1) + 1;
  &$section($indentation);
  $section_level = $indentation;
};

for (@paragraphs) {
  &$code(),   next unless /^\h*[A-Z|]/;
  &$quoted(), next if     /^\h*\|/;

  &$title(), s/^.*\n// if /^(\s*)(\S.*)\.\n([^\n]+)/ and length("$1$2") < 60 and length("$1$2") - 10 < length($3);
  push @markup, join "\n", map &$unindent(), split /\n/;
}

join "\n\n", @markup;

__
meta::function('sdoc-packed', <<'__');
# An SDoc preprocessor that removes all comment paragraphs. Paragraph breaks
# are preserved, and no "generated by SDoc" string is added.
join "\n", grep /^\s*[^A-Z| ]/, split /\n(?:\s*\n)+/, retrieve(@_);

__
meta::function('sdocp', <<'__');
# Renders an attribute as SDocP. This logic was taken directly from the sdoc script.
my $attribute = retrieve($_[0]);
sub escape {my @results = map {s/\\/\\\\/go; s/\n/\\n/go; s/'/\\'/go; $_} @_; wantarray ? @results : $results[0]}
"sdocp('" . escape($_[0]) . "', '" . escape($attribute) . "');";
__
meta::function('serialize', <<'__');
my ($options, @criteria) = separate_options(@_);
my $partial     = $$options{'-p'};
my $criteria    = join '|', @criteria;
my @attributes  = map serialize_single($_), select_keys(%$options, '-m' => 1, '--criteria' => $criteria), select_keys(%$options, '-M' => 1, '--criteria' => $criteria);
my @final_array = @{$partial ? \@attributes : [retrieve('bootstrap::initialization'), @attributes, 'internal::main();', '', '__DATA__', $global_data]};
join "\n", @final_array;

__
meta::function('serialize-single', <<'__');
# Serializes a single attribute and optimizes for content.

my $name          = $_[0] || $_;
my $contents      = $data{$name};
my $meta_function = 'meta::' . namespace($name);
my $invocation    = attribute($name);
my $escaped       = $contents;
$escaped =~ s/\\/\\\\/go;
$escaped =~ s/'/\\'/go;

return "$meta_function('$invocation', '$escaped');" unless $escaped =~ /\v/;

my $delimiter = '__' . fast_hash($contents);
my $chars     = 2;

++$chars until $chars >= length($delimiter) || index("\n$contents", "\n" . substr($delimiter, 0, $chars)) == -1;
$delimiter = substr($delimiter, 0, $chars);

"$meta_function('$invocation', <<'$delimiter');\n$contents\n$delimiter";

__
meta::function('sh', 'system(@_);');
meta::function('shb', <<'__');
# Backgrounded shell.
with_fork(@_, \&::sh);

__
meta::function('shell', <<'__');
my ($options, @arguments) = separate_options(@_);
$transient{repl_prefix} = $$options{'--repl-prefix'};

terminal::cc(retrieve('data::current-continuation')) if length $data{'data::current-continuation'};
around_hook('shell', sub {shell::repl(%$options)});

__
meta::function('size', <<'__');
my $size = 0;
$size += length $data{$_} for keys %data;
sprintf "   full logical  unique    self\n% 7d % 7d % 7d % 7d", length(serialize()), $size, length(serialize('-up')), length $global_data;

__
meta::function('snapshot', <<'__');
my ($name) = @_;
file::write(my $finalname = temporary_name($name), serialize(), noclobber => 1);
chmod 0700, $finalname;
hook('snapshot', $finalname);
__
meta::function('state', <<'__');
my @keys = grep !is($_, '-v'), sort keys %data;
my $hash = fast_hash(fast_hash(scalar @keys) . join '|', @keys);
$hash = fast_hash("$data{$_}|$hash") for @keys;
fast_hash("$global_data|$hash");

__
meta::function('touch', 'associate($_, \'\') for @_;');
meta::function('unlock', 'hook(\'unlock\', chmod_self(sub {$_[0] | 0200}));');
meta::function('update', <<'__');
update_from(@_, grep s/^parent:://o, sort keys %data);

__
meta::function('update-from', <<'__');
# Upgrade all attributes that aren't customized. Customization is defined when the data type is created,
# and we determine it here by checking for $transient{inherit}{$type}.

# Note that this assumes you trust the remote script. If you don't, then you shouldn't update from it.

around_hook('update-from-invocation', separate_options(@_), sub {
  my ($options, @targets) = @_;
  my %parent_id_cache = cache('parent-identification');
  my %already_seen;

  @targets or return;

  my @known_targets     = grep s/^parent:://, parent_ordering(map "parent::$_", grep exists $data{"parent::$_"}, @targets);
  my @unknown_targets   = grep ! exists $data{"parent::$_"}, @targets;
  @targets = (@known_targets, @unknown_targets);

  my $save_state        = $$options{'-s'} || $$options{'--save'};
  my $no_parents        = $$options{'-P'} || $$options{'--no-parent'} || $$options{'--no-parents'};
  my $force             = $$options{'-f'} || $$options{'--force'};
  my $clobber_divergent = $$options{'-D'} || $$options{'--clobber-divergent'};

  save_state('before-update');

  for my $target (@targets) {
    dangerous("updating from $target", sub {
    around_hook('update-from', $target, sub {
      my $identity = $parent_id_cache{$target} ||= join '', qx($target identity);
      next if $already_seen{$identity};
      $already_seen{$identity} = 1;

      my $attributes = join '', qx($target ls -ahiu);
      my %divergent;
      die "skipping unreachable $target" unless $attributes;

      for my $to_rm (split /\n/, retrieve("parent::$target")) {
        my ($name, $hash) = split(/\s+/, $to_rm);
        next unless exists $data{$name};

        my $local_hash = fast_hash(retrieve($name));
        if ($clobber_divergent or $hash eq $local_hash or ! defined $hash) {rm($name)}
        else {terminal::info("preserving local version of divergent attribute $name (use update -D to clobber it)");
              $divergent{$name} = retrieve($name)}}

      associate("parent::$target", $attributes) unless $no_parents;

      dangerous('', sub {eval qx($target serialize -ipmu)});
      dangerous('', sub {eval qx($target serialize -ipMu)});

      map associate($_, $divergent{$_}), keys %divergent unless $clobber_divergent;

      reload()})})}

  cache('parent-identification', %parent_id_cache);

  if (verify()) {hook('update-from-succeeded', $options, @targets);
                 terminal::info("Successfully updated. Run 'load-state before-update' to undo this change.") if $save_state;
                 rm('state::before-update') unless $save_state}
  elsif ($force) {hook('update-from-failed', $options, @targets);
                  terminal::warning('Failed to verify: at this point your object will not save properly, though backup copies will be created.',
                                    'Run "load-state before-update" to undo the update and return to a working state.')}
  else {hook('update-from-failed', $options, @targets);
        terminal::error('Verification failed after the upgrade was complete.');
        terminal::info("$0 has been reverted to its pre-upgrade state.", "If you want to upgrade and keep the failure state, then run 'update-from $target --force'.");
        load_state('before-update');
        rm('state::before-update')}});

__
meta::function('usage', '"Usage: $0 action [arguments]\\nUnique actions (run \'$0 ls\' to see all actions):" . ls(\'-u\');');
meta::function('verify', <<'__');
file::write(my $other = $transient{temporary_filename} = temporary_name(), my $serialized_data = serialize());
chomp(my $observed = join '', qx|perl '$other' state|);

unlink $other if my $result = $observed eq (my $state = state());
terminal::error("Verification failed; expected $state but got $observed from $other") unless $result;
hook('after-verify', $result, observed => $observed, expected => $state);
$result;
__
meta::function('vim', <<'__');
# Installs VIM highlighters.
file::write("$ENV{'HOME'}/.vim/syntax/$_.vim", retrieve("vim_highlighter::$_")) for grep s/^vim_highlighter:://o, keys %data;
__
meta::function('waul', <<'__');
my ($name, %options) = @_;
$name =~ s/^waul:://;
my $output     = $options{output} || "$name.js";
my $extensions = $options{extensions} ? join(' ', map "--extension '$_'", split /\s+/, $options{extensions}) : '';
my $waul       = retrieve("waul::$name") =~ m-^#!/usr/bin/env (\S+)- ? $1 : 'waul';

terminal::info("compiling waul::$name using $waul ($extensions)");

with_exported("waul::$name", sub {
  my ($exported) = @_;
  sh("$waul --output '$output' $extensions $exported")});

__
meta::function('wrapped-near', <<'__');
my ($text, $approximate_margin) = @_;
$approximate_margin ||= 80;
my $pattern = "^(.{$approximate_margin,}?) ";
1 while $text =~ s/$pattern/\1\n/mg;
$text;

__
meta::hook('before-shell::ad', <<'__');
ad('alias::c.');

__
meta::indicator('cc', 'length ::retrieve(\'data::current-continuation\') ? "\\033[1;36mcc\\033[0;0m" : \'\';');
meta::indicator('locked', 'is_locked() ? "\\033[1;31mlocked\\033[0;0m" : \'\';');
meta::indicator('path', <<'__');
my @highlighted = map join("\033[1;30m|\033[0;0m", split /\|/, $_), @{$transient{path}};
join "\033[1;30m/\033[0;0m", @highlighted;

__
meta::internal_function('around_hook', <<'__');
# around_hook('hookname', @args, sub {
#   stuff;
# });

# Invokes 'before-hookname' on @args before the sub runs, invokes the
# sub on @args, then invokes 'after-hookname' on @args afterwards.
# The after-hook is not invoked if the sub calls 'die' or otherwise
# unwinds the stack.

my $hook = shift @_;
my $f    = pop @_;

hook("before-$hook", @_);
my $result = &$f(@_);
hook("after-$hook", @_);
$result;
__
meta::internal_function('associate', <<'__');
my ($name, $value, %options) = @_;
die "Namespace does not exist" unless exists $datatypes{namespace($name)};
$data{$name} = $value;
execute($name) if $options{execute};
$value;

__
meta::internal_function('attribute', <<'__');
my ($name) = @_;
$name =~ s/^[^:]*:://;
$name;
__
meta::internal_function('attribute_is', <<'__');
my ($a, %options) = @_;
my %inherited     = parent_attributes(grep /^parent::/o, sort keys %data) if grep exists $options{$_}, qw/-u -U -d -D/;
my $criteria      = $options{'--criteria'} || $options{'--namespace'} && "^$options{'--namespace'}::" || '.';

my %tests = ('-u' => sub {! $inherited{$a}},
             '-d' => sub {$inherited{$a} && fast_hash(retrieve($a)) ne $inherited{$a}},
             '-i' => sub {$transient{inherit}{namespace($a)}},
             '-v' => sub {$transient{virtual}{namespace($a)}},
             '-s' => sub {$a =~ /^state::/o},
             '-m' => sub {$a =~ /^meta::/o});

return 0 unless scalar keys %tests == scalar grep ! exists $options{$_}    ||   &{$tests{$_}}(), keys %tests;
return 0 unless scalar keys %tests == scalar grep ! exists $options{uc $_} || ! &{$tests{$_}}(), keys %tests;

$a =~ /$_/ || return 0 for @{$options{'--path'}};
$a =~ /$criteria/;

__
meta::internal_function('cache', <<'__');
my ($name, %pairs) = @_;
if (%pairs) {associate("cache::$name", join "\n", map {$pairs{$_} =~ s/\n//g; "$_ $pairs{$_}"} sort keys %pairs)}
else        {map split(/\s/, $_, 2), split /\n/, retrieve("cache::$name")}
__
meta::internal_function('chmod_self', <<'__');
my ($mode_function)      = @_;
my (undef, undef, $mode) = stat $0;
chmod &$mode_function($mode), $0;
__
meta::internal_function('dangerous', <<'__');
# Wraps a computation that may produce an error.
my ($message, $computation) = @_;
terminal::info($message) if $message;
my @result = eval {&$computation()};
terminal::warning(translate_backtrace($@)), return undef if $@;
wantarray ? @result : $result[0];
__
meta::internal_function('debug_trace', <<'__');
terminal::debug(join ', ', @_);
wantarray ? @_ : $_[0];
__
meta::internal_function('execute', <<'__');
my ($name, %options) = @_;
my $namespace = namespace($name);
eval {&{$datatypes{$namespace}}(attribute($name), retrieve($name))};
warn $@ if $@ && $options{'carp'};

__
meta::internal_function('exported', <<'__');
# Allocates a temporary file containing the concatenation of attributes you specify,
# and returns the filename. The filename will be safe for deletion anytime.
my $filename = temporary_name();
file::write($filename, cat(@_));
$filename;

__
meta::internal_function('extension_for', <<'__');
my $extension = $transient{extension}{namespace($_[0])};
$extension = &$extension($_[0]) if ref $extension eq 'CODE';
$extension || '';
__
meta::internal_function('fast_hash', <<'__');
my ($data)     = @_;
my $piece_size = length($data) >> 3;

my @pieces     = (substr($data, $piece_size * 8) . length($data), map(substr($data, $piece_size * $_, $piece_size), 0 .. 7));
my @hashes     = (fnv_hash($pieces[0]));

push @hashes, fnv_hash($pieces[$_ + 1] . $hashes[$_]) for 0 .. 7;

$hashes[$_] ^= $hashes[$_ + 4] >> 16 | ($hashes[$_ + 4] & 0xffff) << 16 for 0 .. 3;
$hashes[0]  ^= $hashes[8];

sprintf '%08x' x 4, @hashes[0 .. 3];
__
meta::internal_function('file::read', <<'__');
my $name = shift;
open my($handle), "<", $name;
my $result = join "", <$handle>;
close $handle;
$result;
__
meta::internal_function('file::write', <<'__');
use File::Path     'mkpath';
use File::Basename 'dirname';

my ($name, $contents, %options) = @_;
die "Choosing not to overwrite file $name" if $options{noclobber} and -f $name;
mkpath(dirname($name)) if $options{mkpath};

my $open_name = $name =~ /^[>|]/ ? $name : $options{append} ? ">> $name" : "> $name";
open my($handle), $open_name or die "Can't open $name for writing";
print $handle $contents;
close $handle;

__
meta::internal_function('fnv_hash', <<'__');
# A rough approximation to the Fowler-No Voll hash. It's been 32-bit vectorized
# for efficiency, which may compromise its effectiveness for short strings.

my ($data) = @_;

my ($fnv_prime, $fnv_offset) = (16777619, 2166136261);
my $hash                     = $fnv_offset;
my $modulus                  = 2 ** 32;

$hash = ($hash ^ ($_ & 0xffff) ^ ($_ >> 16)) * $fnv_prime % $modulus for unpack 'L*', $data . substr($data, -4) x 8;
$hash;
__
meta::internal_function('hypothetically', <<'__');
# Applies a temporary state and returns a serialized representation.
# The original state is restored after this, regardless of whether the
# temporary state was successful.

my %data_backup   = %data;
my ($side_effect) = @_;
my $return_value  = eval {&$side_effect()};
%data = %data_backup;

die $@ if $@;
$return_value;
__
meta::internal_function('internal::main', <<'__');
disable();

$SIG{'INT'} = sub {snapshot(); exit 1};

$transient{initial}      = state();
chomp(my $default_action = retrieve('data::default-action'));

my $function_name = shift(@ARGV) || $default_action;
my @effective_argv = @ARGV;

unshift @effective_argv, $function_name and $function_name = 'method_missing' unless exists $externalized_functions{$function_name};

around_hook('main-function', $function_name, @effective_argv, sub {
  dangerous('', sub {
    chomp(my $result = &$function_name(@effective_argv));
    print "$result\n" if $result})});

save() unless state() eq $transient{initial};

END {enable()}

__
meta::internal_function('invoke_editor_on', <<'__');
my ($data, %options) = @_;
my $editor    = $options{editor} || $ENV{VISUAL} || $ENV{EDITOR} || die 'Either the $VISUAL or $EDITOR environment variable should be set to a valid editor';
my $options   = $options{options} || $ENV{VISUAL_OPTS} || $ENV{EDITOR_OPTS} || '';
my $attribute = $options{attribute};
$attribute =~ s/\//-/g;
my $filename  = temporary_name() . "-$attribute$options{extension}";

file::write($filename, $data);
system("$editor $options '$filename'");

my $result = file::read($filename);
unlink $filename;
$result;
__
meta::internal_function('is_locked', '!((stat($0))[2] & 0222);');
meta::internal_function('namespace', <<'__');
my ($name) = @_;
$name =~ s/::.*$//;
$name;
__
meta::internal_function('parent_attributes', <<'__');
my $attributes = sub {my ($name, $value) = split /\s+/o, $_; $name => ($value || 1)};
map &$attributes(), split /\n/o, join("\n", retrieve(@_));
__
meta::internal_function('parent_ordering', <<'__');
# Topsorts the parents by dependency chain. The simplest way to do this is to
# transitively compute the number of parents referred to by each parent.

my @parents = @_;
my %all_parents = map {$_ => 1} @parents;

my %parents_of = map {
  my $t = $_;
  my %attributes = parent_attributes($_);
  $t => [grep /^parent::/, keys %attributes]} @parents;

my %parent_count;
my $parent_count;
$parent_count = sub {
  my ($key) = @_;
  return $parent_count{$key} if exists $parent_count{$key};
  my $count = 0;
  $count += $parent_count->($_) + exists $data{$_} for @{$parents_of{$key}};
  $parent_count{$key} = $count};

my %inverses;
push @{$inverses{$parent_count->($_)} ||= []}, $_ for @parents;
grep exists $all_parents{$_}, map @{$inverses{$_}}, sort keys %inverses;
__
meta::internal_function('retrieve', <<'__');
my @results = map defined $data{$_} ? $data{$_} : retrieve_with_hooks($_), @_;
wantarray ? @results : $results[0];

__
meta::internal_function('retrieve_with_hooks', <<'__');
# Uses the hooks defined in $transient{retrievers}, and returns undef if none work.
my ($attribute) = @_;
my $result      = undef;

defined($result = &$_($attribute)) and return $result for map $transient{retrievers}{$_}, sort keys %{$transient{retrievers}};
return undef;
__
meta::internal_function('select_keys', <<'__');
my %options = @_;
grep attribute_is($_, %options), sort keys %data;
__
meta::internal_function('separate_options', <<'__');
# Things with one dash are short-form options, two dashes are long-form.
# Characters after short-form are combined; so -auv4 becomes -a -u -v -4.
# Also finds equivalences; so --foo=bar separates into $$options{'--foo'} eq 'bar'.
# Stops processing at the -- option, and removes it. Everything after that
# is considered to be an 'other' argument.

# The only form not supported by this function is the short-form with argument.
# To pass keyed arguments, you need to use long-form options.

my @parseable;
push @parseable, shift @_ until ! @_ or $_[0] eq '--';

my @singles = grep /^-[^-]/, @parseable;
my @longs   = grep /^--/,    @parseable;
my @others  = grep ! /^-/,   @parseable;

my @singles = map /-(.{2,})/ ? map("-$_", split(//, $1)) : $_, @singles;

my %options;
/^([^=]+)=(.*)$/ and $options{$1} = $2 for @longs;
++$options{$_} for grep ! /=/, @singles, @longs;

({%options}, @others, @_);

__
meta::internal_function('strip', 'wantarray ? map {s/^\\s*|\\s*$//g; $_} @_ : $_[0] =~ /^\\s*(.*?)\\s*$/ && $1;');
meta::internal_function('table_display', <<'__');
# Displays an array of arrays as a table; that is, with alignment. Arrays are
# expected to be in column-major order.

sub maximum_length_in {
  my $maximum = 0;
  length > $maximum and $maximum = length for @_;
  $maximum;
}

my @arrays    = @_;
my @lengths   = map maximum_length_in(@$_), @arrays;
my @row_major = map {my $i = $_; [map $$_[$i], @arrays]} 0 .. $#{$arrays[0]};
my $format    = join '  ', map "%-${_}s", @lengths;

join "\n", map strip(sprintf($format, @$_)), @row_major;
__
meta::internal_function('temporary_name', <<'__');
use File::Temp 'tempfile';
my (undef, $temporary_filename) = tempfile("$0." . 'X' x 4, OPEN => 0);
$temporary_filename;
__
meta::internal_function('translate_backtrace', <<'__');
my ($trace) = @_;
$trace =~ s/\(eval (\d+)\)/$locations{$1 - 1}/g;
$trace;
__
meta::internal_function('with_cwd', <<'__');
my ($dir, $f) = @_;
my $cwd = cwd();

my @result = eval {chdir $dir && &$f()};
chdir $cwd;
die $@ if $@;
wantarray ? @result : $result[0];

__
meta::internal_function('with_exported', <<'__');
# Like exported(), but removes the file after running some function.
# Usage is with_exported(@files, sub {...});
my $f      = pop @_;
my $name   = exported(@_);
my $result = eval {&$f($name)};
terminal::warning("$@ when running with_exported()") if $@;
unlink $name;
$result;
__
meta::internal_function('with_fork', <<'__');
my (@args) = @_;
my $f = pop @args;

return process->new($child_pid) if my $child_pid = fork;

# This is the child process. Disable saving to prevent contention, and then
# exit with the given status code.
*::save = sub {};
exit &$f(@args);

__
meta::library('process', <<'__');
package process;

sub new  {my ($class, $pid) = @_; bless \$pid, $class}
sub kill {my ($self, $signal) = @_; ::kill $signal // 'KILL', $$self; $self->wait()}
sub term {my ($self) = @_; $self->kill('TERM')}
sub int  {my ($self) = @_; $self->kill('INT')}
sub stop {my ($self) = @_; $self->kill('STOP')}
sub cont {my ($self) = @_; $self->kill('CONT')}

sub wait {my ($self) = @_; ::wait($$self)}

__
meta::library('shell', <<'__');
# Functions for shell parsing and execution.
package shell;
use Term::ReadLine;

sub tokenize {grep length, split /\s+|("[^"\\]*(?:\\.)?")/o, join ' ', @_};

sub parse {
  my ($fn, @args) = @_;
  s/^"(.*)"$/\1/o, s/\\\\"/"/go for @args;
  {function => $fn, args => [@args]}}

sub execute {
  my %command = %{$_[0]};
  die "undefined command: $command{function}" unless exists $externalized_functions{$command{function}};
  &{"::$command{function}"}(@{$command{args}})}

sub run {execute(parse(tokenize(@_)))}

sub prompt {
  my %options = @_;
  my $name    = $options{name} // ::name();

  my $indicators = join '', map &{"::$_"}(), ::select_keys('--namespace' => 'indicator');
  my $prefix     = $transient{repl_prefix} // '';

  "$prefix\033[1;32m$name\033[0;0m$indicators "}

sub repl {
  my %options = @_;

  my $term = new Term::ReadLine "$0 shell";
  $term->ornaments(0);
  my $attribs = $term->Attribs;
  $attribs->{completion_entry_function} = $attribs->{list_completion_function};

  my $autocomplete = $options{autocomplete} || sub {[sort(keys %data), grep !/-/, sort keys %externalized_functions]};
  my $prompt       = $options{prompt}       || \&prompt;
  my $parse        = $options{parse}        || sub {parse(tokenize(@_))};
  my $output       = $options{output}       || sub {print join("\n", @_), "\n"};
  my $command      = $options{command}      || sub {my ($command) = @_; ::around_hook('shell-command', $command, sub {&$output(::dangerous('', sub {execute($command)}))})};

  length $_ && &$command(&$parse($_)) while ($attribs->{completion_word} = &$autocomplete(), defined($_ = $term->readline(&$prompt())))}

__
meta::library('terminal', <<'__');
# Functions for nice-looking terminal output.
package terminal;

my $process = ::name();

sub message {print STDERR "[$_[0]] $_[1]\n"}
sub color {
  my ($name, $color) = @_;
  *{"terminal::$name"} = sub {chomp($_), print STDERR "\033[1;30m$process(\033[1;${color}m$name\033[1;30m)\033[0;0m $_\n" for map join('', $_), @_}}

my %preloaded = (info => 32, progress => 32, state => 34, debug => 34, warning => 33, error => 31);
color $_, $preloaded{$_} for keys %preloaded;
__
meta::message_color('cc', '36');
meta::message_color('state', 'purple');
meta::message_color('states', 'yellow');
meta::note('binary-encoding', <<'__');
Binary encoding.
The reader conses up the initial program, and it needs some kind of native binary representation for cons cells and symbols. Each value with pointers needs to indicate whether or not it has
been marked in the current GC cycle. This tag information can be encoded in the low three bits of a machine word, eliminating the need for boxing in some cases. Here are the suffixes:

| 000   cons (32-bit tail pointer, 32-bit head pointer)
  001   symbol/string (32-bit length, 32-bit data pointer)

The rest are available for compiler libraries to use as they would like. The special symbol 0|0|000 represents nil; you can easily determine whether you have nil by checking the zero flag.

Unlike Lisp, cons is left-associative and lists are generated in reverse. That is, [a b c] creates the structure (cons (cons (cons nil 'a) 'b) 'c), not (cons 'a (cons 'b (cons 'c nil))) as it
would in Lisp or Scheme.

__
meta::note('callcc-examples', <<'__');
Call/cc examples.
It makes sense to implement continuations in terms of a function analogous to call/cc. For example:

| call/cc [. %s 5]              <- the same thing as 5
  call/cc [.]                   <- the same thing as []
  call/cc []                    <- the same thing as r<

Some questions:

| 1. How is the data stack tied to the return stack, if at all? Is the data stack part of a continuation?
  2. How is the current continuation replaced by a different one?
  3. Does the FP-style continuation model make sense in a concatenative context?
  4. Is continuation modeling even necessary?

__
meta::note('compilation', <<'__');
Compilation.
Canard makes much more sense as a binary memory image than as text. The 'compiler' just takes an input file and converts it to bytecode, a process that can be done in linear average time and
with almost no analysis. In particular, symbols are erased up-front; the string data is not necessarily stored.

Separate compilation is not possible, but this is not a problem from the perspective of performance. Multiple source files in the same environment should be concatenated prior to compilation;
this ensures good symbol packing and, importantly, allows symbol strings to be erased even for symbols that link files together. Because of this, there is no such thing as a precompiled
library.

The compilation process is fairly simple; it's just about converting the text into a list image. This is doable because all pointers are relative; this makes the resulting memory image
position-independent. Compiled images contain no mutable static data references; any such references will need to be pushed onto the stack at runtime. Immutable static data is encoded into
instructions as immediate data.

__
meta::note('continuations', <<'__');
Continuations.
In Canard, expressions (lists) are executed from right to left following the cons tree. So E[x :: y] = E[x] I[y], making cons homomorphic to composition. Because of this, a continuation can be
represented as a tuple (list, return-stack-head, data-stack-head), where the list is code and the two stack heads are pointers to immutable cons cells.

The return stack is required because blocks have return continuations, but it might not be required if CPS-conversion were performed up front. I'm not sure about this.

That's a cop-out.
Right, it is. Ok, so here's how cons cells are evaluated:

| E[:: x y] = E[x] I[y]

So cons corresponds to a form of composition. Here, the continuation of I[y] is E[x]; so in general the continuation of x y z is [x y]. E[] doesn't represent a tail-evaluation because it must
itself keep track of the continuation E[x]. Someone needs to keep track of this in any case; otherwise there is no implicit 'next command'.

The return stack.
This works as a stack of lists. Suppose, for example, you've got something like this:

| a b . [c d . [e] f] g

Here's the sequence of return stack contents after each step:

|  0. Receive input             [a b . [c d . [e] f] g]
   1. Execute g                 [a b . [c d . [e] f]]
   2. Execute [c d . [e] f]     [a b .]
   3. Execute .                 [c d . [e] f] [a b]
   4. Execute f                 [c d . [e]] [a b]
   5. Execute [e]               [c d .] [a b]
   6. Execute .                 [e] [c d] [a b]
   7. Execute e                 [] [c d] [a b]
   8. Execute []                [c d] [a b]
   9. Execute d                 [c] [a b]
  10. Execute c                 [] [a b]
  11. Execute []                [a b]
  12. Execute b                 [a]
  13. Execute a                 []
  14. Execute []                <empty>

So a continuation is the pair of data/return stack values, assuming immutable cons cells and stack entries in each case.

__
meta::note('definition', <<'__');
Symbol definition.
Canard gives you two ways to quote things. The first and most obvious is just to put something into a list. For instance, to alias the $< function:

| = 'print [$<]

The other is to quote a symbol:

| = 'print '$<                  <- but this might not work

These two definitions have different meanings:

| [$<] = a function that invokes $< and then returns
  '$<  = the address of the $< function

The problem with = 'print '$< is that after this, the symbol 'print is equivalent to the symbol '$<. This could be a big problem when thinking about quoted lists:

| == head [print] head [$<]     <- returns 1

Maybe the right answer is to just disable aliasing altogether...

__
meta::note('gc', <<'__');
Garbage collection.
GC is implemented as a library and is, importantly, non-primitive. Most GC libraries probably provide custom stack representations and cons allocators, and their entry point is an evaluation
function.

__
meta::note('global-symbol-table', <<'__');
Global symbol table.
This is an interesting problem. Lists fundamentally contain symbols, not functions, since we don't know whether they will be executed. So we can't fully erase the identity of the symbols that
make up these lists, at least in the authoritative copy.

Therefore, inlining is not of much use beyond the obvious primitive case because otherwise the lists are impossible to reconstruct. For example:

| = 'foo [bar bif baz]

If foo is represented as 0f1f 09 ... 0f1f 0b ... 0f1f 08 ... 0f1f 80 00000000 c3, then how do we know that it was written as [bar bif baz] instead of [<definition of bar> <definition of bif>
<definition of baz>]? Preserving the function calls is important here:

| 0f1f 09 e8 baz-offset 0f1f 09 e8 bif-offset 0f1f 09 e8 bar-offset 0f1f 80 00000000 c3

It's starting to look like a mistake to use machine language as an authoritative list encoding for a few reasons:

| 1. There is some overhead involved in allocating cons cells this way.
  2. There is also some overhead executing lists defined this way.
  3. Inlining is not generally possible, which will slow the processor down.
  4. Decoding is a pain and requires extra metadata.
  5. On systems with W^X (currently just OpenBSD, according to Wikipedia), we'll have to change the memory protection of the page where the list is allocated.

A nice advantage, however, is that we now have a way to encode native instructions without explicit decisionals. Otherwise the interpreter needs to know the difference between primitives and
other instructions.

Mutability vs immutability.
Any recursive calls will need to be indirect, so it seems reasonable enough to just make the global table mutable. But it's fine if modifying it is expensive, since this should be an uncommon
case. Modifying a global symbol could invalidate arbitrarily much code, or it could even fail to be reflected in already-compiled functions.

__
meta::note('left-associative-consing', <<'__');
Left-associative consing.
The main reason I want to cons from the left has to do with notational familiarity. I find it more natural to write things like 'f 3 4' than '4 3 f', just because it looks more like
applicative notation (though it is fundamentally different). However, it creates a few problems for lower-level notation. In particular:

| a b c d -> (((nil :: a) :: b) :: c) :: d) -> e8 d e8 c e8 b e8 a c3

So ultimately, the only stage at which the cons tree is reversed is in the initial parse phase -- this is a little counterintuitive, but otherwise fine. Trees are probably also serialized in
reverse, so that the parser can be treated as a projection into list-space. For now, the reverse-consing notation is fine.

__
meta::note('list-machine-homomorphism', <<'__');
List/machine-language homomorphism.
Canard lists can be translated into machine language via the compiler. In this sense, Canard is not an interpreter after all, but a compiler that does the translation up-front. This makes a
certain amount of sense.

The real question is whether all machine code has a list representation as well. If so, then primitives are just lists of numbers or some such, and this has some nice advantages from a
representational standpoint. How might this work? Here are some options:

| 1. Basic blocks are encoded as simple lists of numbers (instruction prefixes, opcode, operands), and each list ends with a jump instruction. The jump instruction is a list pointer.
  2. Lists are always represented in some form that can be executed natively; so consing corresponds to jumping from one list into another.

There are probably other solutions, but I think (2) is interesting. Not sure what to do about primitive commands...

Executable list representation.
The x86-64 32-bit relative jump instruction uses a single-byte E9 opcode. This wouldn't add a lot of overhead to a cons cell and could easily enough fit into a 64-bit chunk. There are some
other considerations, however, among which are things like CPS conversion. Encoding the list's execution semantics into the list itself makes the compiler intrinsic, which may not be a great
idea. But let's follow this to see where it goes.

Cons cell (nop precedes each jump, and the first one is a call to push the continuation pointer):

| 0f1f00 e8 hhhhhhhh 0f1f00 e9 tttttttt

Therefore, nil can be encoded as a ret instruction:

| 0f1f80 00000000 c3

The trouble with this approach is that we have no way to encode primitive stack instructions. Technically, those should be directly encoded into the head of the list. So, for example, the +
instruction (add the top two stack values) would be something like this:

| 4883ee08 488b4608 480106 e9 tttttttt
  subq $8, %rsi
  movq 8(%rsi), %rax
  addq %rax, (%rsi)
  jmp  tttttttt

Not sure whether this scales, however. Intel instructions have low enough information density that I can see this scheme breaking down for more complex instructions. Maybe it's possible to
overcome this by using very long cons cells...

Also, the existing scheme makes it very difficult to detect a cons cell. Testing a single continuation-jump byte seems really sketchy. The limit case is that we would need to decode the whole
thing as x86 instructions and figure out whether the e9 is a real opcode.

Optimizing compilation.
The list representation above is suboptimal in a few ways:

| 1. Function calls are not inlined.
  2. There are nops all over the place.
  3. Adjacent instructions have not been fused. This can be resolved at a symbolic level; there is no particular reason to implement a dynamic register allocator, I think.
  4. The stack model is unerased (not sure whether it makes sense to tackle this).
  5. Any polymorphic primitives will have unerased decisionals (unfortunately, the VM does provide some of these).

So in order to optimize, we'll have to go back to the symbolic stage and start fusing instructions into a separate native instruction stream, doing some register-stack aliasing in the process.
This also means we'll need to know the shape of each primitive, which shouldn't be too difficult. (Now it's becoming clear why most stack VMs don't provide high-power stack manipulators, but
if we constant-fold first it shouldn't be an issue.)

Optimization should not be a big concern in the native representation of cons cells, since it can be handled from within the language. The real value of having native cons representation is
enabling a protocol by which low-level system programming can be achieved.

__
meta::note('ll', <<'__');
Low-level basis.
The purpose of the low-level environment is to make it possible to write a compiler. Ideally, the compiler can compile itself, so the basis should be consistent modulo even lower-level
optimizations that can be emitted later on. The basic operation categories are:

| 1. Stack manipulation of various sorts. This should be covered by stash, permute, and literals.
  2. Toplevel definition and introspection, even if this isn't used by compilers. This establishes the identity of Canard as an interpreter with compiler backends.
  3. Direct allocation, freeing, and access of memory.
  4. Integer and floating-point arithmetic, but basic instructions only. Instruction fusion should be compiler-specific.
  5. Control flow.

Stack manipulation.
Every literal pushes a value onto the stack. Canard provides three functions that manipulate stack values:

| ^ k [f] x0 x1 x2 ... xk-1 xk ... = x0 x1 x2 ... xk-1 f xk ...         (stash)
  < k x0 x1 x2 ... xk-1 xk ...     = xk ...                             (drop)
  > k x0 x1 x2 ... xk ...          = xk x0 x1 x2 ... xk ...             (get)

Definition.
Canard gives you two functions that deal with definitions:

| = name value          (define)
  @ name                (get-value)

Low-level interpreters are allowed to impose an O(n) time overhead to resolve symbol definitions.

Memory.
There are four memory-related operators:

| * address = value     (dereference)
  ! value address       (assignment)
  ( size = address      (mmap; generally requires multiples of 4096 bytes)
  ) address             (munmap)

Arithmetic.
These mirror processor intrinsics:

| + x y   = x+y
  - x y   = x-y
  / x y   = x/y x%y
  % x y   = x*y
  & x y   = x&y
  | x y   = x|y
  ~ x     = ~x
  not x   = !x
  xor x y = x^y
  << n x  = x<<n
  >> n x  = x>>n
  >>> n x = x>>>n

Control flow.
There is only one control flow statement:

| ? 0 [true-branch] [false-branch] = false-branch
  ? x [true-branch] [false-branch] = true-branch        (x != 0)

Primitive representation.
What happens when you inspect something like the ^ function? Theoretically you would see a list of stack instructions, but in this case that doesn't make sense; there aren't other stack
instructions that will end up producing ^. Maybe the right move here is to provide some sort of machine code representation of the intrinsic. It could be the case that lists are homomorphic to
machine code anyway, at least across evaluation. (!)

__
meta::note('locals', <<'__');
Local variables.
There is a lot to be said for the option of using local variables in a concatenative context. Though perhaps the right execution combinators reduce the need to specify them explicitly. Also,
better stack permutation primitives would help with this.

__
meta::note('machine-code-type-mapping', <<'__');
Machine code type mapping.
Values are analogous to machine-code operations across the list-program homomorphism. For example:

| transparent pointer to <address> = jmp <address>
  packed pointer to <address>      = call <address>
  nil                              = ret
  nop                              = transparent metadata
  anything else                    = primitive

In particular, the transparent pointer is interesting because you could easily enough have more than one of them. For example:

| address1: e8 prog1 e9 address2
  address2: e9 address3
  address3: c3

Here we have just one cons cell: prog1 :: nil. Address2 is an intermediate pointer, but its type is encoded by the machine instruction that represents it, which importantly has tail
precedence: jmp a -> jmp b === jmp b. Any machine operation with this property can be erased when converting back from the machine-code representation to the logical one.

Quoted symbols are encoded as instructions that push the symbol's address onto the data stack.

__
meta::note('native-execution', <<'__');
Native execution.
Canard doesn't have a garbage collector initially, so how should the initial execution model work? It is unclear whether the native environment should even provide an allocation function at
all; maybe this is best left to the standard library. Maybe the initial environment uses a linear stack and provides no allocation other than mmap(). The other stuff could be built as custom
managed heaps on top of this.

There's a lot to recommend this approach. The problem is that the main environment is likely to have a representation that differs from list-based environments, which means that potentially
more code is required to work with it.

__
meta::note('numbers', <<'__');
Numbers.
Canard doesn't need a way to represent all numeric literals. It just needs to express each byte value and provide some arithmetic operators. So, as part of the boot image, there are 255
functions:

| 00 01 02 ... 0f 10 11 12 ... fe ff

Each of these pushes a single byte value onto the stack. It is not too difficult to build a list->number compiler from there: [00 12 50 10] -> 0x00125010, for instance (or big-endian,
depending on the compiler).

This removes the numeric-parsing case from the boot compiler/interpreter, which is ideal. Now all non-bracket words can be treated exactly the same way.

__
meta::note('optimization', <<'__');
Optimization.
Optimization libraries will probably fall into one of two categories. High-level optimizers remove unnecessary operations from a function by detecting invariants. Low-level optimizers find
ways to encode various operations efficiently on the target processor.

Note that high-level optimizers often don't use the usual set of primitives. These are domain-specific languages that know about certain classes of optimizations.

__
meta::note('parameter-space', <<'__');
Unary continuations.
One-to-one mapping of values to values; functions are guaranteed to be unary. No ability to delete values or return multiples directly. (Especially with currying.)

Stack-based concatenative.
Tacit programming focuses on stack top. The stack can be virtualized. Continuations have explicit arity and can be implemented using immutable conses for stack cells. Values that are not
literals are anonymous. Many-to-many mapping of values to values, but locality is constrained by stack variability.

The stack has a single focus point, and consuming a value yields an additional unique focus point. So tacit programming is possible at the expense of some shuffling. The linguistic tradeoff is
stack swapping to avoid explicit value specification. (Why not just use local variables to solve this problem?)

__
meta::note('permutation', <<'__');
Stack permutation.
What is the most concise, systematic way to permute the stack? Having a series of operators dedicated for the purpose seems like a reasonable solution if a solid basis exists, but I get the
sense that no such basis exists at the moment. Maybe I'm wrong about this. But it probably varies widely across implementations; Forth and Joy wouldn't use the same primitives.

  Stashing.
  It needs to be possible to grab values from the data stack, ignore them, and restore them later on. The initial Canard implementation uses 'stash' to do this; 'stash [f]' executes 'f' on the
  tail of the stack, restoring the head afterwards. This concept could be generalized to stash multiple stack entries rather than just one.

  Shuffling.
  All forms of shuffling, dropping, and duplication can be generalized into a permutation vector. Permutation could be implemented like this:

  | permute n [i1 i2 ... ik]

  The idea is that the top n items would be dropped, then replaced by items at i1, i2, ..., ik in the original stack. For instance, swap would be defined as 'permute 2 [1 0]'. Drop is 'permute
  1 []'. Dup is 'permute 1 [0 0]'. Get is 'permute 0 cons []'.

__
meta::note('prefused-conses', <<'__');
Prefused conses.
Cons cells are immutable, so there isn't a real reason to fragment them prematurely. Instead, we can prefuse them; runs of sequential atoms can be represented in a linear string. This
completes the CPS-conversion and inlines things in the process. For example:

| = 'foo [bar bif baz]

Here, the definitions of bar, bif, and baz can be inlined into a single mega-cons:

| [baz definition] [bif definition] [bar definition] 0f1f80 00000000 c3

The only difficulty is that we need to know where each sub-definition begins and ends. It should be possible to do this by inserting three-byte nop instructions and using the ModR/M byte to
encode the length of the current 'instruction'. For example:

| 0f1f 09 [baz definition: 9 bytes] 0f1f 0b [bif definition: 11 bytes] 0f1f 08 [bar definition: 8 bytes] 0f1f 80 00000000 c3
  ^                                 ^                                  ^                                 ^

The jump targets are marked with carets. It's important to refer to the nop instructions because these encode the length of the next list entry.

Update: function definitions can't be inlined due to the structural inspection problem. Instead, each defined symbol needs to have an identity (probably a memory address; these identities can
be opaque), and this identity needs to be the referent of the head of a cons. Inlining should happen inside the compiler, which is defined in user-space.

Allocating prefused data.
In a case like the map function, we can allocate a prefused cons easily enough by having the allocator hand us memory towards the end, not the beginning, of the heap. We can then request more
chunks and see whether they are contiguous. This means that the allocator needs to know how we're representing cons cells, and must be aware of the implicit sequencing going on. The GC must be
able to do the same thing in order to collect prefused segments that are no longer in use:

| 0f1f 05 ... 0f1f 08 ... (live set ->) 0f1f 03 ... 0f1f 80 00000000 c3
  |---------------------|
   this needs to be GC'd
                                <---- |
       future conses onto the same tail

__
meta::note('primitives', <<'__');
Primitives.
Canard needs to provide a few primitives in order to do anything at all. These are baked into any ELF images generated by the compiler and then encoded as symbol targets.

__
meta::note('quotation', <<'__');
Quotation.
There are some strange things happening around quoted symbols. Here are the specifics:

| 1. E[s] for some symbol s is the same as E[D[s]], where D[s] is the definition of s.
  2. The prefix ' returns a function which pushes the given symbol onto the data stack.
  3. E[:: x y] = E[x] I[y], not E[x] E[y].
  4. I[s] = E[s] for any symbol.
  5. I[:: x y] pushes :: x y onto the data stack.

The whole point behind the E/I distinction is that lists are quoted when in the head position. We want evaluation to distribute only across list tails, not heads. Therefore, we need to define
two separate functions to handle this case.

__
meta::note('self-hosting', <<'__');
Self-hosting.
The execution model as implemented in the bootstrap compiler is too high-level. Here's the definition of the evaluation function, assuming two functions r< and r> from Forth:

| . :: x y -> .i y r< [. x]   .i :: x y -> :: x y
  . []     -> . r>            .i []     -> []
  . _      -> _               .i _      -> . D[_]

This isn't quite right, but it is the right idea. The r< function doesn't make sense in Canard because of the explicitness of composition.

__
meta::note('stack-representation', <<'__');
Stack representation.
Canard uses multiple stacks to execute a program. The central one is the data stack; this is the only stack that is implicitly accessed by primitive functions, and this stack maintains
pointers to the others. The other primary stack is used for return addresses.

Every stack is encoded as an immutable linked list and can be manipulated as such. In fact, the data stack can be accessed in a first-class way as well.

Function calls.
Canard doesn't provide a native calling convention; as such, stack commands aren't really functions. The function call abstraction is a by-product of the way the evaluation function (.) works.
Here are the relevant expansions:

| . :: x y -> . @ y r< [. x]
  . []     -> . r>

Here, the recursive definition is really a way to encode a jump operation since all calls are tail calls. The "current continuation" can be pushed onto the data stack as a list using @cc. The
return stack is used only in the explicit context implied by r< and r>; the interpreter itself doesn't do anything particularly interesting with it.

Note: This evaluation strategy imposes a significant amount of GC overhead. It may be worth reconsidering. However, I think there are allocation heuristics that can be used to ameliorate the
effect.

__
meta::note('symbols', <<'__');
Symbols.
A symbol is a mutable (!) key/value mapping. On x86 it is encoded as an optional 32-bit nop tag (the string data) followed by a 32-bit relative jump. The jump target is changed to reflect
changes to the symbol's definition. Symbols don't themselves add a return address to the stack because their calling context will generally be a list. The only case when it isn't is when the
symbol is quoted:

| = 'foo 'bar

In this case, the jump address of 'foo is assigned to be the code address of 'bar. This works since the symbol's string data is encoded as a nop and will therefore be ignored by the processor.
So technically, each 'inlined' = operation ends up adding two instructions of overhead -- but does not use any additional stack frames, making it a function alias from a space perspective.

Quoting.
Is quoting native to the syntax? It doesn't need to be; we can get a quoted symbol by taking the head of a single-element list: :h [foo] is equivalent to 'foo, for example. Maybe quotation is
some form of prefix macro implemented within Canard itself.

__
meta::note('why-continuations', <<'__');
Why implement continuations.
It may not be necessary to implement any sort of CPS natively. The reason is that concatenative programs are much easier to transform than applicative ones. The program is arguably already
CPS-converted; the evaluation function can be easily modified to maintain a heap-allocated return stack.

Cases where continuations are useful.
There are two cases where continuations are particularly compelling. One is to implement coroutines, and the other is to implement backtracking search algorithms.

__
meta::parent('/home/spencertipping/bin/object', <<'__');
bootstrap::html                         f44dd03cb0c904b3a5f69fbda5f018d0
bootstrap::initialization               d22fafa2938ecb0d4728e2958b54ed3d
bootstrap::perldoc                      5793df44bdd2526bb461272924abfd4b
function::ad                            9220b9dc131f8f79878a6209adfe8ef2
function::alias                         8eeeeb4e064ef3aba7edf8f254427bc2
function::cat                           f684de6c8776617a437b76009114f52e
function::cc                            12ea9176e388400704d823433c209b7a
function::ccc                           d151a9793edd83f80fb880b7f0ab9b34
function::child                         f5764adf0b4e892f147a9b6b68d4816f
function::clone                         bb42e04e10a8e54e88786b6fbc4fb213
function::cp                            3fe69d1b58d90045ad520048977538c4
function::create                        3010d55f4dfa59a998742e07823ed54d
function::current-state                 6f03f86f1901e9ef07fdb5d4079a914c
function::cwd                           fd9b58e76c474a8fe93dc3abdccb8857
function::disable                       53b449708cc2ffdefa352e53bb7d847d
function::edit                          5778be977436f7245cf990bf95b6da34
function::edit-self                     71790df00f941ed9b56e17f789b93871
function::enable                        7de1cedc36841f5de8f9fdfbc3b65097
function::export                        2374cd1dbf7616cb38cafba4e171075d
function::extern                        1290a5223e2824763eecfb3a54961eff
function::grep                          55c3cea8ff4ec2403be2a9d948e59f14
function::hash                          6ee131d093e95b80039b4df9c7c84a02
function::hook                          675cdb98b5dd8567bdd5a02ead6184b5
function::hooks                         3d989899c616f7440429a2d9bf1cc44b
function::identity                      6523885762fcc2f354fc25cf6ed126ce
function::import                        5d0f0634cbd01274f2237717507198a2
function::initial-state                 03d8ed608855a723124e79ca184d8e73
function::is                            41564c8f21b12ab80824ac825266d805
function::load-state                    b6cf278a1f351f316fa6e070359b6081
function::lock                          5d8db258704e6a8623fac796f62fac02
function::ls                            01a23d51d5b529e03943bd57e33f92df
function::mv                            ccd000960db4cf627d9246c43d87ba4c
function::name                          955ba2d1fe1d67cd78651a4042283b00
function::parents                       3da9e63b5aae9e2f5dcc946a86d166aa
function::perl                          9f9fd744f0ed225ad8fb3b79fa53dd9a
function::rd                            2adb16d7e819d2e87a27201744a581e7
function::reload                        1589f4cf8374e0011991cb8907afca3e
function::rm                            6f6fd7a6c25558eb469d78ea888f8551
function::rmparent                      fc2884910a6939a47898a778f277332c
function::save                          3cbe5c3735ee4ff99cb60ccf68bc8b91
function::save-state                    5af59ebc4ad8965767e4dc106d3b557e
function::serialize                     a97c7391c635a93b0a710d10eb8cb3cd
function::serialize-single              8bac97e94a1162947d274421053387b0
function::sh                            1b2f542ca9dd63ad437058b7f6f61aac
function::shb                           21139548efb79500d9c999dba024ab32
function::shell                         a87f389b94713e5855e62241d649d01d
function::size                          69f6ab4a100c6ef05d4d41510004d645
function::snapshot                      56939a47f2758421669641e15ebd66eb
function::state                         88bc24e732c55aac68a103eab96b9e48
function::touch                         3991b1b7c7187566f50e5e58ce01fa06
function::unlock                        b4aac02f7f3fb700acf4acfd9b180ceb
function::update                        ac391dc90e507e7586c81850e7c2ecdd
function::update-from                   06fef658374d482adb2e62fbeed9efb4
function::usage                         5bdd370f5a56cfbf199e08d398091444
function::verify                        0c0cc1dfeab7d705919df122f7850a4f
indicator::cc                           3db7509c521ee6abfedd33d5f0148ed3
indicator::locked                       fc2b4f4ca0d6a334b9ac423d06c8f18c
indicator::path                         b5e2cb524caa0283f713a0ddf9f4c162
internal_function::around_hook          7cc876e7c5f78c34654337fc95255587
internal_function::associate            55f202ffdbc6b9005e53d3e82f5f9bfe
internal_function::attribute            dd6f010f9688977464783f60f5b6d3dd
internal_function::attribute_is         d28ac825b3937029386372c560a65775
internal_function::cache                eb9da45580a9ac0882baf98acd2ecd60
internal_function::chmod_self           2035e861eedab55ba0a9f6f5a068ca70
internal_function::dangerous            46c4baaa214ab3d05af43e28083d5141
internal_function::debug_trace          0faf9d9f4159d72dfe4481f6f3607ce1
internal_function::execute              f0924e087d978ff2ab1e117124db3042
internal_function::exported             ae35afef7d4762f2818aee5872c75be0
internal_function::extension_for        9de8261d69cc93e9b92072b89c89befd
internal_function::fast_hash            ee5eba48f837fda0fe472645fdd8899a
internal_function::file::read           e647752332c8e05e81646a3ff98f9a8e
internal_function::file::write          460e2343283eb9fd0e1815389f4e07e6
internal_function::fnv_hash             c36d56f1e13a60ae427afc43ba025afc
internal_function::hypothetically       b83e3f894a6df8623ccd370515dfd976
internal_function::internal::main       12c18f86d766ffb67b8dc0572985bf98
internal_function::invoke_editor_on     5eb976796f0ec172d6ec036116a2f41e
internal_function::is_locked            da12ced6aa38295251f7e748ffd22925
internal_function::namespace            784d2e96003550681a4ae02b8d6d0a27
internal_function::parent_attributes    f6ccfaa982ab1a4d066043981aaca277
internal_function::parent_ordering      57b6da88f76b59f3fed9abfa61280e5e
internal_function::retrieve             721a6800f328da05047fd7392758f55d
internal_function::retrieve_with_hooks  0f1b0220ccd973d57a2e96ff00458cf2
internal_function::select_keys          a5e3532ec6d58151d0ee24416ea1e2b5
internal_function::separate_options     34ec41a6edaa15adde607a0db3ccfa36
internal_function::strip                14f490b10ebd519e829d8ae20ea4d536
internal_function::table_display        d575f4dc873b2e0be5bd7352047fd904
internal_function::temporary_name       6f548d101fc68356515ffd0fc9ae0c93
internal_function::translate_backtrace  d77a56d608473b3cd8a3c6cb84185e10
internal_function::with_cwd             928bae9caa3cb212f0c5c977ba55166c
internal_function::with_exported        df345d5095d5ed13328ddd07ea922b36
internal_function::with_fork            b252464d1efd12dc4a5ee6890076b6a9
library::process                        9fe4e2320eae9f6661a6eb6e777fb6ca
library::shell                          f561500cf223df1bf6daf43af93577a5
library::terminal                       7e2d045782405934a9614fe04bcfe559
message_color::cc                       2218ef0f7425de5c717762ffb100eb43
message_color::state                    03621cd6ac0b1a40d703f41e26c5807f
message_color::states                   ac66eeeff487b5f43f88a78ea18b3d56
meta::configure                         69c2e727c124521d074fde21f8bbc4db
meta::externalize                       aa44e27e0bbee6f0ca4de25d603a1fc7
meta::functor::editable                 48246c608f363de66511400e00b26164
meta::type::alias                       889d26d2df385e9ff8e2da7de4e48374
meta::type::bootstrap                   51108ab2ddb8d966e927c8f62d9ef3e5
meta::type::cache                       9267171f2eace476f64a1a670eaaf2c7
meta::type::data                        120e1649a468d3b3fd3fb783b4168499
meta::type::function                    8ea626198861dc59dd7f303eecb5ff88
meta::type::hook                        ff92aef328b6bdc6f87ddd0821f3e42f
meta::type::inc                         78e0375b6725487cb1f0deca41e96bbe
meta::type::indicator                   feb54a2624e6983617685047c717427f
meta::type::internal_function           eff3cf31e2635f51c83836f116c99d2f
meta::type::library                     7622e8d65e03066668bade74715d65ad
meta::type::message_color               557a1b44979cbf77a7251fbdc4c5b82c
meta::type::meta                        c6250056816b58a9608dd1b2614246f8
meta::type::parent                      09d1d03379e4e0b262e06939f4e00464
meta::type::retriever                   71a29050bf9f20f6c71afddff83addc9
meta::type::state                       84da7d5220471307f1f990c5057d3319
retriever::file                         3bbc9d8a887a536044bafff1d54def7e
retriever::global                       4fe8df0cca548075169968772843a156
retriever::id                           4da6080168d32445150cc4200af7af6e
retriever::object                       c7633990b4e01bdc783da7e545799f4f
retriever::perl                         f41938e6dbad317f62abffc1e4d28cca

__
meta::parent('/home/spencertipping/bin/waul-object', <<'__');
function::minify-yui                                        6374d98eda8642e5cdebe4fb34f5419b
function::waul                                              66b92f55d5db498934b487188a04b16d
meta::type::waul                                            869b5820cd79178b94c3ccdd47dff9df
parent::/home/spencertipping/conjectures/perl-objects/js    ac7c732f4ee4da4ac20ddf1bbb255d5f
parent::/home/spencertipping/conjectures/perl-objects/sdoc  23fe6ae582697a9456521c4572ebc201
parent::preprocessor                                        03278e21c3e08874a6f70024f3166a36

__
meta::parent('/home/spencertipping/conjectures/perl-objects/js', <<'__');
meta::type::js                           0377fcc438f3af85ec87d4770b8cd307
parent::/home/spencertipping/bin/object  208e4b12afe64a14bfd8cacf04181e14

__
meta::parent('/home/spencertipping/conjectures/perl-objects/sdoc', <<'__');
function::sdoc                           9d019a0b391ccb5fb849a2bd354385b5
function::sdoc-html                      b23152b3f5be696e5bae842ec43fc5a4
function::sdoc-markdown                  a35a6441dd750466f2d0e636bee2b382
function::sdoc-packed                    8ec4975fca7228708baae6ccd241bdbf
function::sdocp                          c3d738d982ba87418a298ff58478a85b
meta::type::sdoc                         22cd7315641d38c9d536344e83c36bed
meta::type::slibrary                     95474943c4a5f8ff17d3cf66ddb7c386
parent::/home/spencertipping/bin/object  208e4b12afe64a14bfd8cacf04181e14
retriever::code-sdoc                     03b87ff8d1ecf7594db9ca0669fc69a1
retriever::html-sdoc                     8ab7705d03276945b23a71677153233c
retriever::markdown-sdoc                 67c34ba8223ec36a3ae018e411354db2
retriever::sdoc                          662061e9e41491e2a1debd6862ccf1e7
retriever::sdoc-packed                   f7116f96adf2c748ac1991f4d7c1792b
retriever::sdocp                         fcfcf3a7de79d7d863402b9ccfcac3c4

__
meta::parent('canard-object', <<'__');
function::canard-pack                                       1baa1b17104517b0670946e937df3e78
meta::type::canard                                          ee0b958db0f8b728c95edf7a27132ef2
parent::/home/spencertipping/conjectures/perl-objects/sdoc  4049d6a1b51e739f038d4624dcb394b4
parent::preprocessor                                        88f8be6f851d5f9159d7996dd67ab875
parent::text                                                727dd08e33498dacbaf10aff70d58487
retriever::canard-pack                                      0752d53db63bb0fc6df5bfc16c3eac10

__
meta::parent('notes', <<'__');
function::note    c6d52ffe73cd48cd95fdc561c59d9f63
function::notes   7229b326ac8686b2db6de98496bc7527
meta::type::note  f81bea58841a438e4ee34608ab4f54c0
parent::object    208e4b12afe64a14bfd8cacf04181e14

__
meta::parent('object', <<'__');
bootstrap::html                         f44dd03cb0c904b3a5f69fbda5f018d0
bootstrap::initialization               d22fafa2938ecb0d4728e2958b54ed3d
bootstrap::perldoc                      5793df44bdd2526bb461272924abfd4b
function::ad                            9220b9dc131f8f79878a6209adfe8ef2
function::alias                         8eeeeb4e064ef3aba7edf8f254427bc2
function::cat                           f684de6c8776617a437b76009114f52e
function::cc                            12ea9176e388400704d823433c209b7a
function::ccc                           d151a9793edd83f80fb880b7f0ab9b34
function::child                         f5764adf0b4e892f147a9b6b68d4816f
function::clone                         bb42e04e10a8e54e88786b6fbc4fb213
function::cp                            3fe69d1b58d90045ad520048977538c4
function::create                        3010d55f4dfa59a998742e07823ed54d
function::current-state                 6f03f86f1901e9ef07fdb5d4079a914c
function::cwd                           fd9b58e76c474a8fe93dc3abdccb8857
function::disable                       53b449708cc2ffdefa352e53bb7d847d
function::edit                          5778be977436f7245cf990bf95b6da34
function::edit-self                     71790df00f941ed9b56e17f789b93871
function::enable                        7de1cedc36841f5de8f9fdfbc3b65097
function::export                        2374cd1dbf7616cb38cafba4e171075d
function::extern                        1290a5223e2824763eecfb3a54961eff
function::grep                          55c3cea8ff4ec2403be2a9d948e59f14
function::hash                          6ee131d093e95b80039b4df9c7c84a02
function::hook                          675cdb98b5dd8567bdd5a02ead6184b5
function::hooks                         3d989899c616f7440429a2d9bf1cc44b
function::identity                      6523885762fcc2f354fc25cf6ed126ce
function::import                        5d0f0634cbd01274f2237717507198a2
function::initial-state                 03d8ed608855a723124e79ca184d8e73
function::is                            41564c8f21b12ab80824ac825266d805
function::load-state                    b6cf278a1f351f316fa6e070359b6081
function::lock                          5d8db258704e6a8623fac796f62fac02
function::ls                            01a23d51d5b529e03943bd57e33f92df
function::mv                            ccd000960db4cf627d9246c43d87ba4c
function::name                          955ba2d1fe1d67cd78651a4042283b00
function::parents                       3da9e63b5aae9e2f5dcc946a86d166aa
function::perl                          9f9fd744f0ed225ad8fb3b79fa53dd9a
function::rd                            2adb16d7e819d2e87a27201744a581e7
function::reload                        1589f4cf8374e0011991cb8907afca3e
function::rm                            6f6fd7a6c25558eb469d78ea888f8551
function::rmparent                      fc2884910a6939a47898a778f277332c
function::save                          3cbe5c3735ee4ff99cb60ccf68bc8b91
function::save-state                    5af59ebc4ad8965767e4dc106d3b557e
function::serialize                     a97c7391c635a93b0a710d10eb8cb3cd
function::serialize-single              8bac97e94a1162947d274421053387b0
function::sh                            1b2f542ca9dd63ad437058b7f6f61aac
function::shb                           21139548efb79500d9c999dba024ab32
function::shell                         a87f389b94713e5855e62241d649d01d
function::size                          69f6ab4a100c6ef05d4d41510004d645
function::snapshot                      56939a47f2758421669641e15ebd66eb
function::state                         88bc24e732c55aac68a103eab96b9e48
function::touch                         3991b1b7c7187566f50e5e58ce01fa06
function::unlock                        b4aac02f7f3fb700acf4acfd9b180ceb
function::update                        ac391dc90e507e7586c81850e7c2ecdd
function::update-from                   06fef658374d482adb2e62fbeed9efb4
function::usage                         5bdd370f5a56cfbf199e08d398091444
function::verify                        0c0cc1dfeab7d705919df122f7850a4f
indicator::cc                           3db7509c521ee6abfedd33d5f0148ed3
indicator::locked                       fc2b4f4ca0d6a334b9ac423d06c8f18c
indicator::path                         b5e2cb524caa0283f713a0ddf9f4c162
internal_function::around_hook          7cc876e7c5f78c34654337fc95255587
internal_function::associate            55f202ffdbc6b9005e53d3e82f5f9bfe
internal_function::attribute            dd6f010f9688977464783f60f5b6d3dd
internal_function::attribute_is         d28ac825b3937029386372c560a65775
internal_function::cache                eb9da45580a9ac0882baf98acd2ecd60
internal_function::chmod_self           2035e861eedab55ba0a9f6f5a068ca70
internal_function::dangerous            46c4baaa214ab3d05af43e28083d5141
internal_function::debug_trace          0faf9d9f4159d72dfe4481f6f3607ce1
internal_function::execute              f0924e087d978ff2ab1e117124db3042
internal_function::exported             ae35afef7d4762f2818aee5872c75be0
internal_function::extension_for        9de8261d69cc93e9b92072b89c89befd
internal_function::fast_hash            ee5eba48f837fda0fe472645fdd8899a
internal_function::file::read           e647752332c8e05e81646a3ff98f9a8e
internal_function::file::write          460e2343283eb9fd0e1815389f4e07e6
internal_function::fnv_hash             c36d56f1e13a60ae427afc43ba025afc
internal_function::hypothetically       b83e3f894a6df8623ccd370515dfd976
internal_function::internal::main       12c18f86d766ffb67b8dc0572985bf98
internal_function::invoke_editor_on     5eb976796f0ec172d6ec036116a2f41e
internal_function::is_locked            da12ced6aa38295251f7e748ffd22925
internal_function::namespace            784d2e96003550681a4ae02b8d6d0a27
internal_function::parent_attributes    f6ccfaa982ab1a4d066043981aaca277
internal_function::parent_ordering      57b6da88f76b59f3fed9abfa61280e5e
internal_function::retrieve             721a6800f328da05047fd7392758f55d
internal_function::retrieve_with_hooks  0f1b0220ccd973d57a2e96ff00458cf2
internal_function::select_keys          a5e3532ec6d58151d0ee24416ea1e2b5
internal_function::separate_options     34ec41a6edaa15adde607a0db3ccfa36
internal_function::strip                14f490b10ebd519e829d8ae20ea4d536
internal_function::table_display        d575f4dc873b2e0be5bd7352047fd904
internal_function::temporary_name       6f548d101fc68356515ffd0fc9ae0c93
internal_function::translate_backtrace  d77a56d608473b3cd8a3c6cb84185e10
internal_function::with_cwd             928bae9caa3cb212f0c5c977ba55166c
internal_function::with_exported        df345d5095d5ed13328ddd07ea922b36
internal_function::with_fork            b252464d1efd12dc4a5ee6890076b6a9
library::process                        9fe4e2320eae9f6661a6eb6e777fb6ca
library::shell                          f561500cf223df1bf6daf43af93577a5
library::terminal                       7e2d045782405934a9614fe04bcfe559
message_color::cc                       2218ef0f7425de5c717762ffb100eb43
message_color::state                    03621cd6ac0b1a40d703f41e26c5807f
message_color::states                   ac66eeeff487b5f43f88a78ea18b3d56
meta::configure                         69c2e727c124521d074fde21f8bbc4db
meta::externalize                       aa44e27e0bbee6f0ca4de25d603a1fc7
meta::functor::editable                 48246c608f363de66511400e00b26164
meta::type::alias                       889d26d2df385e9ff8e2da7de4e48374
meta::type::bootstrap                   51108ab2ddb8d966e927c8f62d9ef3e5
meta::type::cache                       9267171f2eace476f64a1a670eaaf2c7
meta::type::data                        120e1649a468d3b3fd3fb783b4168499
meta::type::function                    8ea626198861dc59dd7f303eecb5ff88
meta::type::hook                        ff92aef328b6bdc6f87ddd0821f3e42f
meta::type::inc                         78e0375b6725487cb1f0deca41e96bbe
meta::type::indicator                   feb54a2624e6983617685047c717427f
meta::type::internal_function           eff3cf31e2635f51c83836f116c99d2f
meta::type::library                     7622e8d65e03066668bade74715d65ad
meta::type::message_color               557a1b44979cbf77a7251fbdc4c5b82c
meta::type::meta                        c6250056816b58a9608dd1b2614246f8
meta::type::parent                      09d1d03379e4e0b262e06939f4e00464
meta::type::retriever                   71a29050bf9f20f6c71afddff83addc9
meta::type::state                       84da7d5220471307f1f990c5057d3319
retriever::file                         3bbc9d8a887a536044bafff1d54def7e
retriever::global                       4fe8df0cca548075169968772843a156
retriever::id                           4da6080168d32445150cc4200af7af6e
retriever::object                       c7633990b4e01bdc783da7e545799f4f
retriever::perl                         f41938e6dbad317f62abffc1e4d28cca

__
meta::parent('preprocessor', <<'__');
function::preprocess           ab5526a02ff417d4c162357dc327e7c4
meta::type::template           bc4b0c80b5efc716b19e99b832c22bf3
parent::object                 208e4b12afe64a14bfd8cacf04181e14
retriever::pp                  3b5f5c5d30c5a04f72056dedaacfe7b7
template::comment              dfe273d2dad3d8159b847545e4e5c309
template::eval                 1a0e2124a05056be4abc11803883c294
template::failing_conditional  e3a4523110dd859e828f342185de7c62
template::include              47b5552d609d97fe7f2522d5c1027014
template::pinclude             c07ff79bf8d642cceaa9ef844bfcb189

__
meta::parent('sdoc', <<'__');
function::sdoc                           2dcf55f3e50721bda37c206b17544c54
function::sdoc-html                      b23152b3f5be696e5bae842ec43fc5a4
function::sdoc-markdown                  a35a6441dd750466f2d0e636bee2b382
function::sdoc-packed                    cb00c465ca722870bc1708f6b8ab320d
function::sdocp                          c3d738d982ba87418a298ff58478a85b
meta::type::sdoc                         22cd7315641d38c9d536344e83c36bed
meta::type::slibrary                     95474943c4a5f8ff17d3cf66ddb7c386
parent::/home/spencertipping/bin/object  208e4b12afe64a14bfd8cacf04181e14
retriever::code-sdoc                     03b87ff8d1ecf7594db9ca0669fc69a1
retriever::html-sdoc                     8ab7705d03276945b23a71677153233c
retriever::markdown-sdoc                 67c34ba8223ec36a3ae018e411354db2
retriever::sdoc                          662061e9e41491e2a1debd6862ccf1e7
retriever::sdoc-packed                   f7116f96adf2c748ac1991f4d7c1792b
retriever::sdocp                         fcfcf3a7de79d7d863402b9ccfcac3c4

__
meta::parent('text', <<'__');
function::wrapped-near                   b34731b33db1a4b56c724b1aa5c97f6d
parent::/home/spencertipping/bin/object  208e4b12afe64a14bfd8cacf04181e14
retriever::wrapped-near                  1b00aeef9dbd19633a1fedc443b846e8

__
meta::retriever('canard-pack', <<'__');
return undef unless $_[0] =~ /^canard-pack::(.*)$/;
defined retrieve($1) ? canard_pack($1) : undef;

__
meta::retriever('code-sdoc', <<'__');
# Lets you specify the SDoc extension manually. For instance:
# code.js::sdoc::foo causes sdoc::foo to be SDoc-rendered using Javascript comments.
my ($name) = @_;
return undef unless $name =~ s/^code\.(\w+)::// and defined retrieve($name);
sdoc($name, $1);

__
meta::retriever('file', '-f $_[0] ? file::read($_[0]) : undef;');
meta::retriever('global', <<'__');
# Returns the global data stashed at the end of this perl object
$_[0] eq 'self' ? $global_data : undef;

__
meta::retriever('html-sdoc', <<'__');
my ($attribute) = @_;
return undef unless $attribute =~ s/^html::/sdoc::/ and defined retrieve($attribute) || $attribute =~ s/^sdoc::// && defined retrieve($attribute);
sdoc_html($attribute);

__
meta::retriever('id', '$_[0] =~ /^id::/ ? substr($_[0], 4) : undef;');
meta::retriever('markdown-sdoc', <<'__');
my ($attribute) = @_;
return undef unless $attribute =~ s/^markdown::/sdoc::/ and defined retrieve($attribute) || $attribute =~ s/^sdoc::// && defined retrieve($attribute);
sdoc_markdown($attribute);

__
meta::retriever('object', <<'__');
# Fetch a property from another Perl object. This uses the 'cat' function.
return undef unless $_[0] =~ /^object::(.*?)::(.*)$/ && -x $1 && qx|$1 is '$2'|;
join '', qx|$1 cat '$2'|;

__
meta::retriever('perl', <<'__');
# Lets you use the result of evaluating some Perl expression
return undef unless $_[0] =~ /^perl::(.*)$/;
eval $1;

__
meta::retriever('pp', <<'__');
return undef unless namespace($_[0]) eq 'pp';
my $attr = retrieve(attribute($_[0]));
defined $attr ? preprocess($attr) : undef;
__
meta::retriever('sdoc', 'exists $data{"sdoc::$_[0]"} ? sdoc("sdoc::$_[0]") : undef;');
meta::retriever('sdoc-packed', <<'__');
return undef unless $_[0] =~ /^sdoc-packed::(.*)$/;
exists $data{"sdoc::$1"} ? sdoc_packed("sdoc::$1") : undef;

__
meta::retriever('sdocp', <<'__');
return undef unless $_[0] =~ /^sdocp::(.*)$/;
exists $data{"sdoc::$1"} ? sdocp("sdoc::$1") : undef;

__
meta::retriever('wrapped-near', <<'__');
return undef unless $_[0] =~ /^wrapped-near\.(\d+)::(.*)$/;
defined retrieve($2) ? wrapped_near(retrieve($2), $1) : undef;

__
meta::sdoc('canard::lib/canard-linux-x64', <<'__');
Linux/x86-64 Canard compiler | Spencer Tipping
Licensed under the terms of the MIT source code license

Introduction.
This library implements the Canard compiler for Linux on x86-64. The compiler is written in machine language and is self-hosting. It also provides a set of primitives that allow the language
to operate, as well as a core memory image that you can use to create an interpreter instance.

Primitive functions.
Primitives are defined in terms of their machine-language equivalents. The following functions are considered to be primitive:

__
meta::sdoc('canard::lib/comments', <<'__');
Canard standard library: comments | Spencer Tipping
Licensed under the terms of the MIT source code license

Introduction.
This library allows you to use nb[] to write comments. You should include it before including anything else. It also enables shebang-line syntax if you elect to use /usr/bin/env. If you want
to refer to a specific canard interpreter with an absolute path, you'll need to define the interpreter:

| =interpreter '#!/usr/bin/my-canard

= '=interpreter [= %s []]
= '#!/usr/bin/env [nb]
= 'nb [%% 1 []]

__
meta::sdoc('canard::lib/functional', <<'__');
Canard standard library: function manipulation | Spencer Tipping
Licensed under the terms of the MIT source code license

Piecewise construction.
This serves the purpose of something like 'where' in functional languages. The idea is to provide a series of local definitions that will be inlined into the form in question. This is done
first by defining a substitution function, then deriving a recursive variant from that.

| :/ symbol replacement -> [? :: replacement 'nb [] $= 'symbol %0]
  %s $:                     symbol replacement                      = replacement 'symbol
  :: %s ''nb                replacement 'symbol                     = (:: replacement 'nb) 'symbol
  ^1 [:: %s '%0 :: [[] $=]] (:: replacement 'nb) 'symbol            = (:: replacement 'nb) [[] $= 'symbol %0]
  :+ [?] :+ :: []           (:: replacement 'nb) [[] $= 'symbol %0] = [? (:: replacement 'nb) [] $= 'symbol %0]

The :/ function constructs a closure, but does not actually perform substitution. To do that, you would use :* or :**.

= ':/ [:+ [?] :+ :: [] ^1 [:: %s '%0 :: [[] $=]] :: %s 'nb %s $:]

Composition.
Functions can be composed by appending their list forms. . @o f g x is the same as f g x.

= '@o [:+ @: ^1 [@:]]

Objectification.
Functions can be objectified (converted to anonymous list form) by using @ on any symbols that are present. Lists pass through unmodified, since they are already functions.

= '@: [? [] [@] :? %0]

Recursive map.
Like the regular map function, but distributes over sub-lists recursively. This is primarily useful for editing functions in their list form.

| :** [f] :: x y -> :* [:** [f]] :: x y
  :** [f] _      -> f _

You can use it like this: :** [+ 1] [1 2 [3 4] 5], yielding [2 3 [4 5] 6].

= ':** [? [:* :: :: [] ':**] [.] :? %1]

__
meta::sdoc('canard::lib/iteration', <<'__');
Canard iteration library | Spencer Tipping
Licensed under the terms of the MIT source code license

Introduction.
This library provides trivial functions to iterate over numeric quantities.

= '#* [? [#* ^2 [.] %% 02 [00 01 01 00] - 01] [%% 02 []] %0]

| #* n [f] x -> #* (n-1) [f] f (n-1) x
  %% 2 [0 1 1 0] - 1 n [f] x               = (n-1) [f] [f] (n-1) x
  #* ^2 [.]          (n-1) [f] [f] (n-1) x = #* (n-1) [f] f (n-1) x

| #* 0 [f] x -> x
  %% 2 [] 0 [f] x = x

__
meta::sdoc('canard::lib/lexical', <<'__');
Canard standard library: lexical scope | Spencer Tipping
Licensed under the terms of the MIT source code license

Introduction.
Writing concatenative code is interesting, but sometimes it's useful to have the usual lexical scoping with destructuring binds. Canard supports this via quotation and compiles the lexical
forms into concatenative ones. Right now it does not support applicative destructuring; the only thing you can destructure is the stack itself.

Implementation.
The implementation combs through the given code and performs beta-rewriting, doing nothing to avoid collision cases. This means that you should be very careful about lexical closures, as they
may exhibit incorrect identifier collisions. The most obvious case is defining the constant function k:

| = 'k fn [x] [fn [y] [x]]
  = 'return-y k 'y
  return-y 5                    <- returns 5, not y

This happens because fn is not aware of the global fn[] binding when it compiles the block into stack code; the second fn[] binding won't be compiled until the first function is run. In
general, it is unsafe to use lexical closures at all because of this problem; however, this can be fixed by replacing 'y' with a gensym at compile-time. Another option is to compile the inner
fn[] first, yielding concatenative code that invokes the 'x' function:

| = 'k fn [x] fn [y] [x]

This will force fn [y] [x] to be compiled ahead of time, yielding [x %% 1 []].

__
meta::sdoc('canard::lib/lists', <<'__');
Canard standard library: list functions | Spencer Tipping
Licensed under the terms of the MIT source code license

Introduction.
This library defines useful list functions, including map, flatmap, filter, append, etc. All traversal goes from right to left, as per the natural cons cell ordering.

Flatmap definition.
Flat-map is structured just like map. The only difference is that the intermediate results are appended rather than consed. Also, it needs to make a recursive call to itself rather than to the
map function.

= ':~ :** @o :/ ':* [':~] :/ ':: [':+] @ ':*

Map-function template.
Here is the derivation for flatmap:

| :~ [f] :: x y -> :+ :~ [f] x f y
  ^1 [:^]      [f] :: x y  = [f] x y
  %% 2 [0 1 0] [f] x y     = [f] x [f] y
  ^2 [.]       [f] x [f] y = [f] x f y
  :+ :~        [f] x f y   = :+ :~ [f] x f y

Notice, however, that a number of functions here can be replaced to do other things. For instance, the :+ invocation in flatmap can be replaced with ::, at which point the function will be a
regular map. What we really have is a 'map template' that can be specialized in different ways. To leverage this, we first define the map function, then we write the map template, then we
write flatmap as a substitution over the definition of 'map'.

= ':* [? [:: :* ^2 [.] %% 02 [00 01 00] ^1 [:^]] [%v] :? %1]

List append.
Appends each element from the second list to the first. The head of :+ x y is the head of y. Here are the cases:

| :+ _ :: t h -> :: :+ _ t h
  :+ x []     -> x

= ':+ [? [:: :+ ^1 [:^]] [%v %s] :? %1]

List length.
This is the usual recursive length function over lists.

= ':# [? [+ 01 :# :t] [00 %v] :? %0]

Cons accessors.
These retrieve the individual pieces of a cons cell.

= ':h [%v :^]
= ':t [%% 02 [00] :^]

__
meta::sdoc('canard::lib/numbers', <<'__');
Canard numeric library | Spencer Tipping
Licensed under the terms of the MIT source code license

Introduction.
This library implements some functions to make numeric manipulation more convenient. Functions provided include:

| 1. Single-digit numeric aliases; e.g. 1 -> 01, 2 -> 02, ... 9 -> 09
  2. Single-digit numeric adjustments: +1 -> [+ 01], -1 -> [- 01], ... +9 -> [+ 09] (same for * and /)

#* 0a [= #d %s :: [] $+ '0 #d %0  =#:prefix-op '+ %0  =#:prefix-op '* %0
                                  =#:prefix-op '- %0  =#:prefix-op '/ %0]

= '=#:prefix-op [= $+ ^1 [#d ^1 [:: :: [] ^1 [$+ '0 #d]]] %% 02 [00 01 00 01]]

| =#:prefix-op prefix n -> = $+ prefix #d n :: :: [] prefix $+ '0 n
  %% 2 [0 1 0 1]  prefix n                         = prefix n prefix n
  %^ 3 [$+ '0 #d] prefix n prefix n                = prefix n prefix $+ '0 #d n
  ^2 [:: :: []]   prefix n prefix $+ '0 n          = prefix n :: :: [] prefix $+ '0 #d n
  = $+ ^1 [#d]    prefix n :: :: [] prefix $+ '0 n = = $+ prefix #d n :: :: [] prefix $+ '0 #d n

= '#d [$ + 30]

__
meta::sdoc('canard::lib/stack', <<'__');
Canard standard library: stack functions | Spencer Tipping
Licensed under the terms of the MIT source code license

Introduction.
This library provides a bunch of stack functions that prevent you from having to use the long forms of %% and %^ for common situations. The functions provided here are:

| %0    dup x           = x x
  %1    nip x y         = y x y
  %2    nip2 x y z      = z x y z
  %#    nth n x1 ... xn = xn x1 ... xn

| %v    drop x y               = y
  %v#   dropn n x1 ... xn xn+1 = xn+1

| %s    swap x y = y x
  %r3   rot3 x y z = y z x
  %R3   Rot3 x y z = z x y

| ^1    stash [f] x y = x f y
  ^2    stash2 [f] x y z = x y f z

= '%0  [%% 00 [00]]
= '%1  [%% 00 [01]]   = '%s  [%% 02 [01 00]]
= '%2  [%% 00 [02]]   = '%r3 [%% 03 [01 02 00]]
= '%#  [%% 00 :: []]  = '%R3 [%% 03 [02 00 01]]

= '%v  [%% 01 []]     = '^1  [%^ 01]
= '%v# [%% %s []]     = '^2  [%^ 02]

__
meta::sdoc('canard::stdlib', <<'__');
- include sdoc-packed::canard::lib/lexical
- include sdoc-packed::canard::lib/lists
- include sdoc-packed::canard::lib/numbers
- include sdoc-packed::canard::lib/iteration
- include sdoc-packed::canard::lib/functional
- include sdoc-packed::canard::lib/stack
- include sdoc-packed::canard::lib/comments

__
meta::sdoc('js::boot-image', <<'__');
#!/usr/bin/env node

Canard bootstrap interpreter image | Spencer Tipping
Licensed under the terms of the MIT source code license

- include deps/caterwaul.min.js
- include deps/caterwaul.std.min.js
- include deps/regexp.js
- include deps/parser.js
- include src/boot.js

caterwaul(':all')(function ($) {
  $.canard.syntax.prototype -se [it.execute(stack, bindings) = process.stderr.write('\033[1;30m#{this.is_cons() ? "[" + this + "]" : this} \033[40G\033[1;32m#{print_stack(stack)}\033[0;0m\n')
                                                               -then- original.apply(this, arguments),
                                 where [original = it.execute]],
  when.false,

  process.argv.length > 2 && process.argv[2] !== '-i' -se [process.argv.shift(), when.it] ? start_from_file() : start_from_repl(),
  Number.prototype.is_cons() = false,

  where [start_from_file() = $.canard(process.argv.slice(2) *[require('fs').readFileSync(x, 'utf8')] -seq -re- it.join('\n\n')),

         stack             = null,
         bindings          = $.canard.default_bindings(),
         start_from_repl() = process.argv.slice(2) *[require('fs').readFileSync(x, 'utf8')] *![stack = $.canard.parse(x).interpret(stack, bindings)] -seq
                             -then- require('repl').start('canard> ', undefined, repl_function, undefined, true)
                             -where [repl_function(x, _1, _2, cc) = cc(stack -eq- $.canard.parse(filter(x)).interpret(stack, bindings) <then> undefined, rescue.e)
                                                                    -then- process.stderr.write('\033[s\033[80G\033[1;32m#{print_stack(stack)}\033[u\033[0;0m'),
                                     filter(code)                 = code.replace(/^\s*\(\s*|\s*\)\s*$/g, '')],

         print_stack(s)    = s !== null ? s.h.is_cons() ? '[#{s.h}] #{print_stack(s.t)}'
                                                        : '#{s.h} #{print_stack(s.t)}' : '']}, {require: require})(caterwaul);

__
meta::sdoc('waul::boot', <<'__');
Bootstrap interpreter | Spencer Tipping
Licensed under the terms of the MIT source code license

Introduction.
This interpreter parses and interprets Canard programs. It provides a set of primitives sufficient to generate the file that will contain the reference Canard compiler. This interpreter
provides no comment syntax; comments can be written as 'nb [stuff]'.

caterwaul.module('canard', ':all', function ($) {
  ($.canard(source, stack, bindings) = $.canard.parse(source).interpret(stack || null, {} / $.canard.default_bindings() /-$.merge/ bindings)) /-$.merge/ statics()

  -where [statics() = capture [syntax             = tree_ctor() /-$.syntax_subclass/ tree_methods() /-$.merge/ tree_statics(),
                               default_bindings() = default_bindings(),
                               parse              = parser()],

Parsing logic.
The parser is really simple; it just handles juxtaposition (treated as cons), list encapsulation, and atom parsing.

          parser() = "toplevel([new linear_string_state(_)])[0].value()".qf
                     -where [toplevel(xs) = toplevel(xs), toplevel = annotate(toplevel, 'toplevel', []),
                             term(xs)     = term(xs),     term     = annotate(term,     'term',     []),

                             maybe_ws(p)  = linear_regexp(/\s+/) /-bfs/ p /-alt/ p /-bfc/ optional(linear_regexp(/\s+/)) /-map/ "_[0]".qf,
                             cons         = maybe_ws(term) /!manyc /-map/ "_ /[$.canard.syntax.nil()][x0 /-$.canard.syntax.cons/ x] -seq".qf,
                             atom         = linear_regexp(/([^ \n\r\t\[\]]+)/) /-map/ "_[1] /!$.canard.syntax.atom".qf,
                             list         = linear_regexp(/\[/) / cons /-bfc/ linear_regexp(/\]/) /-map/ "_[1]".qf,
                             term         = atom /-alt/ list,
                             toplevel     = cons],

Syntax trees and interpreter.
The interpreter is just a tree-walker that acts as a nondestructive function from stack to stack. It carries a binding table that the program can modify.

          tree_ctor()(d, c1, c2) = d instanceof this.constructor ? this -se [it.data = d.data, it.length = 0]
                                                                 : this -se [it.data = d, it.length = c1 && c2 ? 2 : 0, it[0] /eq.c1 /when.c1, it[1] /eq.c2 /when.c2],

          tree_statics()         = capture [nil()      = new $.canard.syntax('[]'),
                                            atom(data) = new $.canard.syntax(data),
                                            cons(t, h) = new $.canard.syntax('cons', t, h)],

          tree_methods()         = capture [is_cons()  = this.length === 2 && this.data === 'cons',  h()    = this[1],
                                            is_atom()  = !this.length,                               t()    = this[0],
                                            is_quote() = this.is_atom() && /^'/.test(this.data),     name() = this.data.replace(/^'/, ''),
                                            is_nil()   = this.is_atom() && this.data === '[]',

                                            unquote()  = this.is_atom() && /^'/.test(this.data) ? $.canard.syntax.atom(this.data /~substr/ 1) : this,
                                            quote()    = this.is_atom()                         ? $.canard.syntax.atom("'#{this.data}")       : this,

                                            toString() = this.is_nil()                                              ? '[]'
                                                       : this.is_cons() && !this.t().is_nil() && this.h().is_cons() ? '#{this.t()} [#{this.h()}]'
                                                       : this.is_cons() &&  this.t().is_nil()                       ? this.h().toString()
                                                       : this.is_cons()                                             ? '#{this.t()} #{this.h()}'
                                                                                                                    : this.data]
                                   /-$.merge/ interpreter_methods(),

          interpreter_methods()  = capture [should_run()               = !this.is_nil() && this.is_atom() && !this.is_quote(),

                                            execute(stack, bindings)   = rescue ['#{this}:[e]\n#{e}' /raise]
                                                                       [ this.should_run() ? bindings[this.name()].interpret(stack, bindings)
                                                                                           : {h: this.unquote(), t: stack}],

                                            interpret(stack, bindings) = rescue ['#{this}:[i]\n#{e}' /raise]
                                                                       [ this.is_cons()    ? this.t().interpret(this.h().execute(stack, bindings), bindings)
                                                                       : this.is_nil()     ? stack
                                                                       : this.should_run() ? bindings[this.name()].interpret(stack, bindings)
                                                                                           : {h: this.unquote(), t: stack}]],

Default bindings.
These provide a very simple base language that should be sufficient to write the abstractions necessary to generate the reference compiler.

          up(stack, n)              = n ? up(stack.t, n - 1) : stack,
          append_items_to(s, o, l)  = l.is_cons() ? append_items_to({t: s, h: up(o, +l.h().data).h}, o, l.t()) : s,
          stash_helper(n, b, s, bs) = n ? {h: s.h, t: stash_helper(n - 1, b, s.t, bs)} : b.interpret(s, bs),

          stack_depth(s)            = s ? 1 + stack_depth(s.t) : 0,

          default_bindings() = capture [

                     /* symbol table */ '='(stack, bindings)  = bindings[stack.h.name()] -eq- stack.t.h -then- stack.t.t,
                                        '@'(stack, bindings)  = {h: bindings[stack.h.name()], t: stack.t},

                             /* repl */ ls(stack, bindings)   = process.stdout.write(bindings /keys /seq -re- it.join(' ') + '\n') -then- stack,
                                        depth(stack)          = {h: $.canard.syntax.atom(stack_depth(stack)), t: stack},
                                        clear(stack)          = null,

                  /* logging/tracing */ '$<'(stack)           = console.log(stack.h.toString())                              -then- stack.t,
                                        '$|'(stack)           = console.log('\033[1;32m#{stack.h}\033[0;0m')                 -then- stack,
                                        '#<'(stack)           = process.stdout.write(new Buffer(1) <se> it[0] -eq- +stack.h) -then- stack.t,

              /* symbol manipulation */ '$#'(stack)           = {h: $.canard.syntax.atom(stack.h.data.length),                t: stack.t},
                                        '$'(stack)            = {h: $.canard.syntax.atom(String.fromCharCode(+stack.h)),      t: stack.t},
                                        '$^'(stack)           = {h: stack.t.h.data.charCodeAt(+stack.h.data),                 t: stack.t.t},
                                        '$+'(stack)           = {h: $.canard.syntax.atom(stack.h.data + stack.t.h.data),      t: stack.t.t},
                                        '$:'(stack)           = {h: stack.h.quote(),                                          t: stack.t},
                                        '$.'(stack)           = {h: stack.h.unquote(),                                        t: stack.t},

                                        '$='(stack)           = {h: +(stack.h.data === stack.t.h.data), t: stack.t.t},

                      /* conditional */ '?'(stack, bindings)  = +stack.t.t.h ? stack  .h.interpret(stack.t.t.t, bindings)
                                                                             : stack.t.h.interpret(stack.t.t.t, bindings),

                      /* permutation */ '%%'(stack)           = append_items_to(stack.t.t /-up/ +stack.h, stack.t.t, stack.t.h),
                                        '%^'(stack, bindings) = stash_helper(+stack.h, stack.t.h, stack.t.t, bindings),

                    /* type checking */ '/?'(stack)           = {h: +stack.h.is_nil(),  t: stack.t},
                                        ':?'(stack)           = {h: +stack.h.is_cons(), t: stack.t},
                                        '!'(stack)            = {h: +!stack.h,          t: stack.t},

                      /* cons/uncons */ '::'(stack)           = {h: $.canard.syntax.cons(stack.h, stack.t.h), t: stack.t.t},
                                        ':^'(stack)           = new Error('#{stack.h} is not a cons cell') /raise /unless [stack.h.is_cons()]
                                                                -then- {h: stack.h.t(), t: {h: stack.h.h(), t: stack.t}},

                             /* eval */ '.'(stack, bindings)  = stack.h.interpret(stack.t, bindings)] %v*[{interpret: x}] /seq

                               /          numeric_bindings()
                               /-$.merge/ arithmetic_bindings(),

          numeric_bindings()    = n[256] *[['0123456789abcdef'.charAt(x >>> 4) + '0123456789abcdef'.charAt(x & 15), {interpret: given.x [given.stack in {h: x, t: stack}] (x)}]] -object -seq,
          arithmetic_bindings() = '+ - * / % >> << >>> | & ^ < > <= >= === !== == !='.qw
                                  *[[x, {interpret: "function (stack) {return {h: stack.t.h #{x} stack.h, t: stack.t.t}}" /!$.parse /!$.compile}]] -object -seq]

  -using- caterwaul.parser});

__
meta::template('comment', '\'\';     # A mechanism for line or block comments.');
meta::template('eval', <<'__');
my $result = eval $_[0];
terminal::warning("Error during template evaluation: $@") if $@;
$result;
__
meta::template('failing_conditional', <<'__');
my ($commands)    = @_;
my $should_return = $commands =~ / if (.*)$/ && ! eval $1;
terminal::warning("eval of template condition failed: $@") if $@;
$should_return;
__
meta::template('include', <<'__');
my ($commands) = @_;
return '' if template::failing_conditional($commands);
join "\n", map retrieve($_), split /\s+/, $commands;
__
meta::template('pinclude', <<'__');
# Just like the regular include, but makes sure to insert paragraph boundaries
# (this is required for SDoc to function properly).

my ($commands) = @_;
return '' if template::failing_conditional($commands);
my $text = join "\n\n", map retrieve($_), split /\s+/, $commands;
"\n\n$text\n\n";
__
meta::vim_highlighter('canard', <<'__');
" Canard language highlighter | Spencer Tipping
" Licensed under the terms of the MIT source code license

if !exists("main_syntax")
  if version < 600
    syntax clear
  elseif exists("b:current_syntax")
    finish
  endif
  let main_syntax = "canard"
endif

syn case match
setlocal iskeyword=33-90,92,94-127

syn region  canard_bracketed_region     matchgroup=canard_comment           start=/\[/ end=/]/ contained transparent
syn region  canard_comment              matchgroup=canard_comment_delimiter start=/nb\s*\[/ end=/]/ contains=canard_bracketed_region
syn region  canard_quoted_symbol        start=/\<'/ end=/[ \n\t\r\[\]]\@=\|$/
syn match   canard_bracket              /[\[[\]]/
syn match   canard_number               /\<[0-9a-f][0-9a-f]\>/

syn keyword canard_def                  =
syn keyword canard_intrinsic            $< $\| $# $ $^ $+ $: $. $= %% %^ ? :? /? :: :^ . @ !
syn keyword canard_arithmetic           + - * / % << >> >>> \| & ^ < > <= >= == != === !==

hi link canard_comment                  Comment
hi link canard_comment_delimiter        Special
hi link canard_quoted_symbol            Identifier
hi link canard_def                      Keyword
hi link canard_bracket                  Special
hi link canard_number                   Number
hi link canard_intrinsic                Type

__
internal::main();

__DATA__
