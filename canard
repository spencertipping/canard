#!/usr/bin/perl
# 99aeabc9ec7fe80b1b39f5e53dc7e49e      <- self-modifying Perl magic
# state:  63c2d70cd7cbbfeb144f130183e21a6d
# istate: cb9ae940fc5fea59873e49899bfce77f
# id:     a91f89c1b23f2df1762a7d9a838bcf20

# This is a self-modifying Perl file. I'm sorry you're viewing the source (it's
# really gnarly). If you're curious what it's made of, I recommend reading
# http://github.com/spencertipping/writing-self-modifying-perl.
#
# If you got one of these from someone and don't know what to do with it, send
# it to spencer@spencertipping.com and I'll see if I can figure out what it
# does.

# For the benefit of HTML viewers (this is a hack):
# <div id='cover' style='position: absolute; left: 0; top: 0; width: 10000px; height: 10000px; background: white'></div>

$|++;

my %data;
my %transient;
my %externalized_functions;
my %datatypes;

my %locations;          # Maps eval-numbers to attribute names

my $global_data = join '', <DATA>;

sub meta::define_form {
  my ($namespace, $delegate) = @_;
  $datatypes{$namespace} = $delegate;
  *{"meta::${namespace}::implementation"} = $delegate;
  *{"meta::$namespace"} = sub {
    my ($name, $value, %options) = @_;
    chomp $value;
    $data{"${namespace}::$name"} = $value unless $options{no_binding};
    &$delegate($name, $value) unless $options{no_delegate}}}

sub meta::eval_in {
  my ($what, $where) = @_;

  # Obtain next eval-number and alias it to the designated location
  @locations{eval('__FILE__') =~ /\(eval (\d+)\)/} = ($where);

  my $result = eval $what;
  $@ =~ s/\(eval \d+\)/$where/ if $@;
  warn $@ if $@;
  $result}

meta::define_form 'meta', sub {
  my ($name, $value) = @_;
  meta::eval_in($value, "meta::$name")};

meta::meta('configure', <<'__');
# A function to configure transients. Transients can be used to store any number of
# different things, but one of the more common usages is type descriptors.

sub meta::configure {
  my ($datatype, %options) = @_;
  $transient{$_}{$datatype} = $options{$_} for keys %options;
}
__
meta::meta('externalize', <<'__');
# Function externalization. Data types should call this method when defining a function
# that has an external interface.

sub meta::externalize {
  my ($name, $attribute, $implementation) = @_;
  my $escaped = $name;
  $escaped =~ s/[^A-Za-z0-9:]/_/go;
  $externalized_functions{$name} = $externalized_functions{$escaped} = $attribute;
  *{"::$name"} = *{"::$escaped"} = $implementation || $attribute;
}

__
meta::meta('functor::editable', <<'__');
# An editable type. This creates a type whose default action is to open an editor
# on whichever value is mentioned. This can be changed using different flags.

sub meta::functor::editable {
  my ($typename, %options) = @_;

  meta::configure $typename, %options;
  meta::define_form $typename, sub {
    my ($name, $value) = @_;

    $options{on_bind} && &{$options{on_bind}}($name, $value);

    meta::externalize $options{prefix} . $name, "${typename}::$name", sub {
      my $attribute             = "${typename}::$name";
      my ($command, @new_value) = @_;

      return &{$options{default}}(retrieve($attribute)) if ref $options{default} eq 'CODE' and not defined $command;
      return edit($attribute) if $command eq 'edit' or $options{default} eq 'edit' and not defined $command;
      return associate($attribute, @new_value ? join(' ', @new_value) : join('', <STDIN>)) if $command eq '=' or $command eq 'import' or $options{default} eq 'import' and not defined $command;
      return retrieve($attribute)}}}
__
meta::meta('type::alias', <<'__');
meta::configure 'alias', inherit => 0;
meta::define_form 'alias', sub {
  my ($name, $value) = @_;
  meta::externalize $name, "alias::$name", sub {
    # Can't pre-tokenize because shell::tokenize doesn't exist until the library::
    # namespace has been evaluated (which will be after alias::).
    shell::run(shell::tokenize($value), shell::tokenize(@_));
  };
};
__
meta::meta('type::binary', <<'__');
meta::functor::editable 'binary', extension => '.binary', default => 'edit', inherit => 0;

__
meta::meta('type::bootstrap', <<'__');
# Bootstrap attributes don't get executed. The reason for this is that because
# they are serialized directly into the header of the file (and later duplicated
# as regular data attributes), they will have already been executed when the
# file is loaded.

meta::configure 'bootstrap', extension => '.pl', inherit => 1;
meta::define_form 'bootstrap', sub {};
__
meta::meta('type::cache', <<'__');
meta::configure 'cache', inherit => 0;
meta::define_form 'cache', \&meta::bootstrap::implementation;
__
meta::meta('type::canard', <<'__');
meta::functor::editable 'canard', extension => '.canard', inherit => 0, default => 'edit';

__
meta::meta('type::data', 'meta::functor::editable \'data\', extension => \'\', inherit => 0, default => \'cat\';');
meta::meta('type::function', <<'__');
meta::configure 'function', extension => '.pl', inherit => 1;
meta::define_form 'function', sub {
  my ($name, $value) = @_;
  meta::externalize $name, "function::$name", meta::eval_in("sub {\n$value\n}", "function::$name");
};
__
meta::meta('type::hook', <<'__');
meta::configure 'hook', extension => '.pl', inherit => 0;
meta::define_form 'hook', sub {
  my ($name, $value) = @_;
  *{"hook::$name"} = meta::eval_in("sub {\n$value\n}", "hook::$name");
};
__
meta::meta('type::inc', <<'__');
meta::configure 'inc', inherit => 1, extension => '.pl';
meta::define_form 'inc', sub {
  use File::Path 'mkpath';
  use File::Basename qw/basename dirname/;

  my ($name, $value) = @_;
  my $tmpdir   = basename($0) . '-' . $$;
  my $filename = "/tmp/$tmpdir/$name";

  push @INC, "/tmp/$tmpdir" unless grep /^\/tmp\/$tmpdir$/, @INC;

  mkpath(dirname($filename));
  unless (-e $filename) {
    open my $fh, '>', $filename;
    print $fh $value;
    close $fh;
  }
};
__
meta::meta('type::indicator', <<'__');
# Shell indicator function. The output of each of these is automatically
# appended to the shell prompt.

meta::configure 'indicator', inherit => 1, extension => '.pl';
meta::define_form 'indicator', sub {
  my ($name, $value) = @_;
  *{"indicator::$name"} = meta::eval_in("sub {\n$value\n}", "indicator::$name");
};
__
meta::meta('type::internal_function', <<'__');
meta::configure 'internal_function', extension => '.pl', inherit => 1;
meta::define_form 'internal_function', sub {
  my ($name, $value) = @_;
  *{$name} = meta::eval_in("sub {\n$value\n}", "internal_function::$name");
};
__
meta::meta('type::js', <<'__');
meta::functor::editable 'js', extension => '.js', inherit => 1;

__
meta::meta('type::library', <<'__');
meta::configure 'library', extension => '.pl', inherit => 1;
meta::define_form 'library', sub {
  my ($name, $value) = @_;
  meta::eval_in($value, "library::$name");
};
__
meta::meta('type::message_color', <<'__');
meta::configure 'message_color', extension => '', inherit => 1;
meta::define_form 'message_color', sub {
  my ($name, $value) = @_;
  terminal::color($name, $value);
};
__
meta::meta('type::meta', <<'__');
# This doesn't define a new type. It customizes the existing 'meta' type
# defined in bootstrap::initialization. Note that horrible things will
# happen if you redefine it using the editable functor.

meta::configure 'meta', extension => '.pl', inherit => 1;
__
meta::meta('type::note', 'meta::functor::editable \'note\', extension => \'.sdoc\', inherit => 0, default => \'edit\';');
meta::meta('type::parent', <<'__');
meta::define_form 'parent', \&meta::bootstrap::implementation;
meta::configure 'parent', extension => '', inherit => 1;
__
meta::meta('type::retriever', <<'__');
meta::configure 'retriever', extension => '.pl', inherit => 1;
meta::define_form 'retriever', sub {
  my ($name, $value) = @_;
  $transient{retrievers}{$name} = meta::eval_in("sub {\n$value\n}", "retriever::$name");
};
__
meta::meta('type::sdoc', <<'__');
# A meta-type for other types. So retrieve('js::main') will work if you have
# the attribute 'sdoc::js::main'. The filename will be main.js.sdoc.

meta::functor::editable 'sdoc', inherit => 1, extension => sub {
  extension_for(attribute($_[0])) . '.sdoc';
};
__
meta::meta('type::slibrary', <<'__');
meta::configure 'slibrary', extension => '.pl.sdoc', inherit => 1;
meta::define_form 'slibrary', sub {
  my ($name, $value) = @_;
  meta::eval_in(sdoc("slibrary::$name"), "slibrary::$name");
};

__
meta::meta('type::state', <<'__');
# Allows temporary or long-term storage of states. Nothing particularly insightful
# is done about compression, so storing alternative states will cause a large
# increase in size. Also, states don't contain other states -- otherwise the size
# increase would be exponential.

# States are created with the save-state function.

meta::configure 'state', inherit => 0, extension => '.pl';
meta::define_form 'state', \&meta::bootstrap::implementation;
__
meta::meta('type::template', <<'__');
meta::configure 'template', extension => '.pl', inherit => 1;
meta::define_form 'template', sub {
  my ($name, $value) = @_;
  meta::externalize "template::$name", "template::$name", meta::eval_in("sub {\n$value\n}", "template::$name");
};
__
meta::meta('type::vim_highlighter', <<'__');
meta::configure 'vim_highlighter', extension => '.vim', inherit => 1;
meta::define_form 'vim_highlighter', \&meta::bootstrap::implementation;

__
meta::alias('cb', <<'__');
ad -c binary::

__
meta::alias('cl', 'ad -c canard::lib');
meta::alias('cn', 'ad -c note::');
meta::alias('eb', 'edit sdoc::binary::boot');
meta::alias('ebb', 'edit sdoc::canard::boot/binary');
meta::alias('er', 'edit sdoc::readme');
meta::alias('erf', 'edit function::render');
meta::alias('erwf', 'edit function::render-waul');
meta::alias('esl', 'edit sdoc::canard::stdlib');
meta::alias('ev', 'edit vim_highlighter::canard');
meta::alias('l', 'edit --prefix=sdoc::canard::lib/');
meta::alias('r', <<'__');
sh waul -e deps/regexp.js -e deps/parser.js -e src/boot.js -c :all

__
meta::alias('repl', 'sh boot/interpreter');
meta::alias('sls', 'sh wc stdlib.canard');
meta::alias('sr', 'srepl');
meta::alias('srepl', <<'__');
sh boot/interpreter -i stdlib.canard

__
meta::bootstrap('html', <<'__');
<html>
  <head>
  <meta http-equiv='content-type' content='text/html; charset=UTF-8' />
  <link rel='stylesheet' href='http://spencertipping.com/perl-objects/web/style.css'/>

  <script src='http://ajax.googleapis.com/ajax/libs/jquery/1.5.2/jquery.min.js'></script>
  <script src='http://spencertipping.com/caterwaul/caterwaul.all.min.js'></script>
  <script src='http://spencertipping.com/montenegro/montenegro.client.js'></script>
  <script src='http://spencertipping.com/perl-objects/web/attribute-parser.js'></script>
  <script src='http://spencertipping.com/perl-objects/web/interface.js'></script>
  </head>
  <body></body>
</html>

__
meta::bootstrap('initialization', <<'__');
#!/usr/bin/perl
# 99aeabc9ec7fe80b1b39f5e53dc7e49e      <- self-modifying Perl magic
# state:  __state
# istate: __istate
# id:     __id

# This is a self-modifying Perl file. I'm sorry you're viewing the source (it's
# really gnarly). If you're curious what it's made of, I recommend reading
# http://github.com/spencertipping/writing-self-modifying-perl.
#
# If you got one of these from someone and don't know what to do with it, send
# it to spencer@spencertipping.com and I'll see if I can figure out what it
# does.

# For the benefit of HTML viewers (this is a hack):
# <div id='cover' style='position: absolute; left: 0; top: 0; width: 10000px; height: 10000px; background: white'></div>

$|++;

my %data;
my %transient;
my %externalized_functions;
my %datatypes;

my %locations;          # Maps eval-numbers to attribute names

my $global_data = join '', <DATA>;

sub meta::define_form {
  my ($namespace, $delegate) = @_;
  $datatypes{$namespace} = $delegate;
  *{"meta::${namespace}::implementation"} = $delegate;
  *{"meta::$namespace"} = sub {
    my ($name, $value, %options) = @_;
    chomp $value;
    $data{"${namespace}::$name"} = $value unless $options{no_binding};
    &$delegate($name, $value) unless $options{no_delegate}}}

sub meta::eval_in {
  my ($what, $where) = @_;

  # Obtain next eval-number and alias it to the designated location
  @locations{eval('__FILE__') =~ /\(eval (\d+)\)/} = ($where);

  my $result = eval $what;
  $@ =~ s/\(eval \d+\)/$where/ if $@;
  warn $@ if $@;
  $result}

meta::define_form 'meta', sub {
  my ($name, $value) = @_;
  meta::eval_in($value, "meta::$name")};

__
meta::bootstrap('perldoc', <<'__');
=head1 Self-modifying Perl script

=head2 Original implementation by Spencer Tipping L<http://spencertipping.com>

The prototype for this script is licensed under the terms of the MIT source code license.
However, this script in particular may be under different licensing terms. To find out how
this script is licensed, please contact whoever sent it to you. Alternatively, you may
run it with the 'license' argument if they have specified a license that way.

You should not edit this file directly. For information about how it was constructed, go
to L<http://spencertipping.com/writing-self-modifying-perl>. For quick usage guidelines,
run this script with the 'usage' argument.

=cut

__
meta::cache('parent-identification', <<'__');
/home/spencertipping/bin/object 99aeabc9ec7fe80b1b39f5e53dc7e49e
/home/spencertipping/bin/waul-object 4e04fdb8e560f4dd2ca4880b91a8e2ea
/home/spencertipping/conjectures/perl-objects/js 246bc56c88e8e8daae3737dbb16a2a2c
/home/spencertipping/conjectures/perl-objects/sdoc a1e8480e579614c01dabeecf0f963bcc
binary 93194ecf50e38f2adb6e273909e007b5
c 8118b5c1b0aa08bce7e839df4ab80199
canard-object 3d87f1a4b0694cfebcbfd589fa5ed5dd
git-integration 9fabb9b6f2f374c35ddcc26549ac2b65
notes a9e5975593ed5d90d943ad98405c71e5
object 99aeabc9ec7fe80b1b39f5e53dc7e49e
preprocessor 70dae4b46eb4e06798ec6f38d17d4c7b
sdoc a1e8480e579614c01dabeecf0f963bcc
text ffe5790f4c605b3bd73283f7c5e57dc5
vim-highlighters 902333a0bd6ed90ff919fe8477cb4e69
__
meta::cache('parent-state', <<'__');
3d87f1a4b0694cfebcbfd589fa5ed5dd 78cdd08d39e47d528e0fb86ce291782d
70dae4b46eb4e06798ec6f38d17d4c7b cdb1e173c2cda2da981cf29863a0beeb
902333a0bd6ed90ff919fe8477cb4e69 a60202000f88d34a7672f049a9c52e05
93194ecf50e38f2adb6e273909e007b5 aee8217336a8219d9ed2cd4d53d30cbf
99aeabc9ec7fe80b1b39f5e53dc7e49e d5bcbc2df886ce170ecfd4a1d2abc812
9fabb9b6f2f374c35ddcc26549ac2b65 bf263208d5aa817e0c81ebcd8d81d0de
a1e8480e579614c01dabeecf0f963bcc afb8e7eb4524c014262c84b5ede7ab52
a9e5975593ed5d90d943ad98405c71e5 5b08a7836cda563678fff8659df70df2
ffe5790f4c605b3bd73283f7c5e57dc5 940d3967fa9c2e8821f2d14e2738f9c7
__
meta::data('author', 'Spencer Tipping');
meta::data('default-action', 'shell');
meta::data('license', <<'__');
MIT License
Copyright (c) 2010 Spencer Tipping

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
__
meta::data('permanent-identity', 'a91f89c1b23f2df1762a7d9a838bcf20');
meta::function('ad', <<'__');
my ($options, @paths) = separate_options(@_);
@{$transient{path}} = () if $$options{-c};
return @{$transient{path}} = () unless @paths;
push @{$transient{path}}, @paths;

__
meta::function('alias', <<'__');
my ($name, @stuff) = @_;
@_ ? @stuff ? around_hook('alias', @_, sub {associate("alias::$name", join(' ', @stuff), execute => 1)})
            : retrieve("alias::$name") // "Undefined alias $name"
   : table_display([select_keys('--namespace' => 'alias')], [map retrieve($_), select_keys('--namespace' => 'alias')]);

__
meta::function('boot', <<'__');
create("sdoc::canard::boot/$_[0]");

__
meta::function('canard-pack', <<'__');
# Packs down a canard program as text.
my $program = cat(@_);
$program =~ s/\s*(\]|\[)\s*/\1/g;
$program =~ s/\s+/ /g;
$program =~ s/^\s|\s$//g;
$program;

__
meta::function('cat', 'join "\\n", retrieve(@_);');
meta::function('cc', <<'__');
# Stashes a quick one-line continuation. (Used to remind me what I was doing.)
@_ ? associate('data::current-continuation', hook('set-cc', join(' ', @_))) : retrieve('data::current-continuation');
__
meta::function('ccc', 'rm(\'data::current-continuation\');');
meta::function('child', <<'__');
around_hook('child', @_, sub {
  my ($child_name) = @_;
  clone($child_name);
  enable();
  qx($child_name update-from $0);
  terminal::info("$child_name\'s identity is " . join '', qx($child_name identity));
  disable()});

__
meta::function('clone', <<'__');
for (grep length, @_) {
  around_hook('clone', $_, sub {
    hypothetically(sub {
      rm('data::permanent-identity');
      file::write($_, serialize(), noclobber => 1);
      chmod(0700, $_)})})}
__
meta::function('compile-binary', <<'__');
# Compiles binary-text to binary output.
my $text = join ' ', map split(/\s+/), split /#.*/m, retrieve($_[0]);
my $hex_letters = '0123456789abcdef';

my @output;

my $offset     = 0;
my $next       = 1;
my $repeat     = sub {$next = $_[0]; ''};                       # Repeaters have no output
my $repetition = sub {my $count = $next; $next = 1; $count};
my $ascii      = sub {$_[0]};
my $binary     = sub {my $total = 0; $total = ($total << 1) + substr($_[0], $_, 1)                      for 0 .. 7; chr($total) x &$repetition()};
my $octal      = sub {my $total = 0; $total = ($total << 3) + index($hex_letters, substr($_[0], $_, 1)) for 0 .. 2; chr($total) x &$repetition()};
my $hex        = sub {my $total = 0; $total = ($total << 4) + index($hex_letters, substr($_[0], $_, 1)) for 0 .. 1; chr($total) x &$repetition()};
my $until      = sub {my $address = hex $_[0]; "\0" x ($address - $offset)};
my $debug      = sub {printf STDERR "%s: 0x%x\n", $_[0], $offset; ''};
my $place      = sub {die sprintf "incorrect address at place %x (actual is %x)", hex $_[0], $offset unless $offset == hex $_[0]; ''};

my $emit       = sub {my ($s) = @_; $offset += length $s; push @output, $s};

my @tokens = split m#('\S+|-[01]{8}|o[0-3][0-7]{2}|[0-9a-f]{2}|@\?\S+|@!?[0-9a-f]+|/\d+/)#, $text;
&$emit(/^'(\S+)/        ? &$ascii($1)  : /^@\?(\S+)/         ? &$debug($1) :
       /^-([01]{8})/    ? &$binary($1) : /^o([0-3][0-7]{2})/ ? &$octal($1) :
       /^@!([0-9a-f]+)/ ? &$place($1)  : /^@([0-9a-f]+)/     ? &$until($1) :
       /^\/(\d+)\//     ? &$repeat($1) : /^[0-9a-f]{2}/      ? &$hex($_)   : '') for @tokens;

join '', @output;

__
meta::function('cp', <<'__');
my $from = shift @_;
my $value = retrieve($from);
associate($_, $value) for @_;
__
meta::function('create', <<'__');
my ($name, $value) = @_;
around_hook('create', $name, $value, sub {
  return edit($name) if exists $data{$name};
  associate($name, defined $value ? $value : '');
  edit($name) unless defined $value});

__
meta::function('current-state', 'serialize(\'-pS\');');
meta::function('cwd', <<'__');
use Cwd qw/getcwd/;
getcwd();

__
meta::function('disable', 'hook(\'disable\', chmod_self(sub {$_[0] & 0666}));');
meta::function('edit', <<'__');
my ($options, @names) = separate_options(@_);
@names = select_keys('--criteria' => "^$$options{'--prefix'}.*" . join('.*', @names), %$options) if $$options{'--prefix'};

my ($name, @others) = @names;
die "cannot edit multiple attributes simultaneously (others are @others)" if @others;
die "$name is virtual or does not exist" unless exists $data{$name};
die "$name is inherited; use 'edit $name -f' to edit anyway" unless is($name, '-u') || is($name, '-d') || exists $$options{'-f'};

my $extension = extension_for($name);
around_hook('edit', @_, sub {
  associate($name, invoke_editor_on($data{$name} // '', %$options, attribute => $name, extension => $extension), execute => 1)});

save() unless $data{'data::edit::no-save'} or state() eq $transient{initial};
'';

__
meta::function('edit-self', <<'__');
$global_data = invoke_editor_on($global_data);
save();

__
meta::function('enable', 'hook(\'enable\', chmod_self(sub {$_[0] | $_[0] >> 2}));');
meta::function('expanded-bootstrap', <<'__');
my $bootstrap_text = retrieve('bootstrap::initialization');
my $state          = state();
my $istate         = state('-iG');
my $object_id      = identity();

$bootstrap_text =~ s/__state/$state/g;
$bootstrap_text =~ s/__istate/$istate/g;
$bootstrap_text =~ s/__id/$object_id/g;

$bootstrap_text;

__
meta::function('export', <<'__');
# Exports data into a text file.
#   export attr1 attr2 attr3 ... file.txt
my $name = pop @_;
@_ or die 'Expected filename';
file::write($name, join "\n", retrieve(@_));
__
meta::function('extern', '&{$_[0]}(retrieve(@_[1 .. $#_]));');
meta::function('gU', <<'__');
sh("git push @_");

__
meta::function('ga', <<'__');
sh("git add @_");

__
meta::function('gc', <<'__');
around_hook('git-commit', @_, sub {
  my $message = join ' ', @_;
  $message =~ s/'/\\'/g;
  enable();
  sh("git commit -a -m '$message'");
  disable()});

__
meta::function('gd', <<'__');
sh('git diff');

__
meta::function('gl', <<'__');
sh("git log @_");

__
meta::function('grep', <<'__');
# Looks through attributes for a pattern. Usage is grep pattern [options], where
# [options] is the format as provided to select_keys.

my ($pattern, @args)     = @_;
my ($options, @criteria) = separate_options(@args);
my @attributes           = select_keys(%$options, '--criteria' => join('|', @criteria));

$pattern = qr/$pattern/;

my @m_attributes;
my @m_line_numbers;
my @m_lines;

for my $k (@attributes) {
  next unless length $k;
  my @lines = split /\n/, retrieve($k);
  for (0 .. $#lines) {
    next unless $lines[$_] =~ $pattern;
    push @m_attributes,   $k;
    push @m_line_numbers, $_ + 1;
    push @m_lines,        '' . ($lines[$_] // '')}}

unless ($$options{'-C'}) {
  s/($pattern)/\033[1;31m\1\033[0;0m/g for @m_lines;
  s/^/\033[1;34m/o for @m_attributes;
  s/^/\033[1;32m/o && s/$/\033[0;0m/o for @m_line_numbers}

table_display([@m_attributes], [@m_line_numbers], [@m_lines]);
__
meta::function('gs', <<'__');
sh('git status');

__
meta::function('gu', <<'__');
sh("git pull @_");

__
meta::function('hash', 'fast_hash(@_);');
meta::function('hook', <<'__');
my ($hook, @args) = @_;
$transient{active_hooks}{$hook} = 1;
dangerous('', sub {&$_(@args)}) for grep /^hook::${hook}::/, sort keys %data;
@args;
__
meta::function('hooks', 'join "\\n", sort keys %{$transient{active_hooks}};');
meta::function('identity', 'retrieve(\'data::permanent-identity\') || associate(\'data::permanent-identity\', fast_hash(rand() . name() . serialize()));');
meta::function('import', <<'__');
my $name = pop @_;
associate($name, @_ ? join('', map(file::read($_), @_)) : join('', <STDIN>)); 
__
meta::function('initial-state', '$transient{initial};');
meta::function('is', <<'__');
my ($attribute, @criteria) = @_;
my ($options, @stuff) = separate_options(@criteria);
exists $data{$attribute} and attribute_is($attribute, %$options);

__
meta::function('lib', <<'__');
create("sdoc::canard::lib/$_[0]");

__
meta::function('load-state', <<'__');
around_hook('load-state', @_, sub {
  my ($state_name) = @_;
  my $state = retrieve("state::$state_name");

  terminal::state('saving current state into _...');
  save_state('_');

  delete $data{$_} for grep ! /^state::/, keys %data;
  %externalized_functions = ();

  terminal::state("restoring state $state_name...");
  meta::eval_in($state, "state::$state_name");
  terminal::error(hook('load-state-failed', $@)) if $@;
  reload();
  verify()});

__
meta::function('lock', 'hook(\'lock\', chmod_self(sub {$_[0] & 0555}));');
meta::function('ls', <<'__');
my ($options, @criteria) = separate_options(@_);
my ($external, $shadows, $sizes, $flags, $long, $hashes, $parent_hashes) = @$options{qw(-e -s -z -f -l -h -p)};
$sizes = $flags = $hashes = $parent_hashes = 1 if $long;

return table_display([grep ! exists $data{$externalized_functions{$_}}, sort keys %externalized_functions]) if $shadows;

my $criteria    = join('|', @criteria);
my @definitions = select_keys('--criteria' => $criteria, '--path' => $transient{path}, %$options);

my %inverses  = map {$externalized_functions{$_} => $_} keys %externalized_functions;
my @externals = map $inverses{$_}, grep length, @definitions;
my @internals = grep length $inverses{$_}, @definitions;
my @sizes     = map sprintf('%6d %6d', length(serialize_single($_)), length(retrieve($_))), @{$external ? \@internals : \@definitions} if $sizes;

my @flags     = map {my $k = $_; join '', map(is($k, "-$_") ? $_ : '-', qw(d i m u))} @definitions if $flags;
my @hashes    = map fast_hash(retrieve($_)), @definitions if $hashes;

my %inherited     = parent_attributes(grep /^parent::/o, keys %data) if $parent_hashes;
my @parent_hashes = map $inherited{$_} || '-', @definitions if $parent_hashes;

join "\n", map strip($_), split /\n/, table_display($external ? [grep length, @externals] : [@definitions],
                                                    $sizes ? ([@sizes]) : (), $flags ? ([@flags]) : (), $hashes ? ([@hashes]) : (), $parent_hashes ? ([@parent_hashes]) : ());

__
meta::function('metadata-from', <<'__');
my ($filename) = @_;
my %metadata;

# Not using file::read because we only need the first few lines.
open my($fh), '<', $filename or return {};
while (<$fh>) {
  /^#\s*(\w+):\s*(.*)$/ and $metadata{$1} = $2;
  last unless /^#/;
}
close $fh;

\%metadata;

__
meta::function('mv', <<'__');
my ($from, $to) = @_;
die "'$from' does not exist" unless exists $data{$from};
associate($to, retrieve($from), execute => 1);
rm($from);

__
meta::function('name', <<'__');
my $name = $0;
$name =~ s/^.*\///;
$name;
__
meta::function('note', <<'__');
# Creates a note with a given name, useful for jotting things down.
my $name = join('-', @_);
create("note::$name");

__
meta::function('notes', 'ls(\'-a\', \'^note::\');');
meta::function('parents', 'join "\\n", grep s/^parent:://o, sort keys %data;');
meta::function('perl', <<'__');
my @result = eval(join ' ', @_);
$@ ? terminal::error($@) : wantarray ? @result : $result[0];

__
meta::function('preprocess', <<'__');
# Implements a simple preprocessing language.
# Syntax follows two forms. One is the 'line form', which gives you a way to specify arguments inline
# but not spanning multiple lines. The other is 'block form', which gives you access to both one-line
# arguments and a block of lines. The line parameters are passed in verbatim, and the block is
# indentation-adjusted and then passed in as a second parameter. (Indentation is adjusted to align
# with the name of the command.)
#
# Here are the forms:
#
# - line arguments to function
#
# - block line arguments << eof
#   block contents
#   block contents
#   ...
# - eof

my ($string, %options) = @_;
my $expansions         = 0;
my $old_string         = '';
my $limit              = $options{expansion_limit} || 100;
my @pieces             = ();

sub adjust_spaces {
  my ($spaces, $string) = @_;
  $string =~ s/^$spaces  //mg;
  chomp $string;
  $string;
}

while ($old_string ne $string and $expansions++ < $limit) {
  $old_string = $string;

  while ((my @pieces = split  /(^(\h*)-\h \S+ \h* \V* <<\h*(\w+)$ \n .*?  ^\2-\h\3$)/xms, $string) > 1 and $expansions++ < $limit) {
    $pieces[1 + ($_ << 2)] =~ /^ (\h*)-\h(\S+)\h*(\V*)<<\h*(\w+)$ \n(.*?) ^\1-\h\4 $/xms && $externalized_functions{"template::$2"} and
      $pieces[1 + ($_ << 2)] = &{"template::$2"}($3, adjust_spaces($1, $5))
      for 0 .. $#pieces / 4;

    @pieces[2 + ($_ << 2), 3 + ($_ << 2)] = '' for 0 .. $#pieces / 4;
    $string = join '', @pieces;
  }

  if ((my @pieces = split     /^(\h*-\h \S+ \h* .*)$/xom, $string) > 1) {
    $pieces[1 + ($_ << 1)] =~ /^ \h*-\h(\S+)\h*(.*)$/xom && $externalized_functions{"template::$1"} and
      $pieces[1 + ($_ << 1)] = &{"template::$1"}($2)
      for 0 .. $#pieces >> 1;

    $string = join '', @pieces;
  }
}

$string;
__
meta::function('rd', <<'__');
if (@_) {my $pattern = join '|', @_;
         @{$transient{path}} = grep $_ !~ /^$pattern$/, @{$transient{path}}}
else    {pop @{$transient{path}}}

__
meta::function('reload', 'around_hook(\'reload\', sub {execute($_) for grep ! /^bootstrap::/, keys %data});');
meta::function('render', <<'__');
my ($options, @stuff) = separate_options(@_);

# Commented out until I write an accurate readme
# file::write('README.md', retrieve('markdown::readme'));

file::write('boot.binary', retrieve('binary::boot'));
file::write('boot.md',     retrieve('markdown::binary::boot'));
file::write('boot',        retrieve('bin::boot'));
chmod 0700, 'boot';

file::write("$_.canard", retrieve("canard::$_"),           mkpath => 1) for grep s/^(sdoc::)?canard::lib\//lib\//, sort keys %data;
file::write("$_.md",     retrieve("markdown::canard::$_"), mkpath => 1) for grep s/^sdoc::canard::lib\//lib\//,    sort keys %data;
file::write("doc/$_.md", retrieve("markdown::note::$_"),   mkpath => 1) for grep s/^note:://,                      sort keys %data;

file::write("stdlib.canard", retrieve("wrapped-near.80::canard-pack::pp::sdoc::canard::stdlib"));

__
meta::function('rm', <<'__');
around_hook('rm', @_, sub {
  exists $data{$_} or terminal::warning("$_ does not exist") for @_;
  delete @data{@_}});
__
meta::function('rmparent', <<'__');
# Removes one or more parents.
my ($options, @parents) = separate_options(@_);
my $clobber_divergent = $$options{'-D'} || $$options{'--clobber-divergent'};

my %parents = map {$_ => 1} @parents;
my @other_parents = grep !$parents{$_}, grep s/^parent:://, select_keys('--namespace' => 'parent');
my %kept_by_another_parent;

$kept_by_another_parent{$_} = 1 for grep s/^(\S+)\s.*$/\1/, split /\n/o, cat(@other_parents);

for my $parent (@parents) {
  my $keep_parent_around = 0;

  for my $line (split /\n/, retrieve("parent::$parent")) {
    my ($name, $hash) = split /\s+/, $line;
    next unless exists $data{$name};

    my $local_hash = fast_hash(retrieve($name));
    if ($clobber_divergent or $hash eq $local_hash or ! defined $hash) {rm($name) unless $kept_by_another_parent{$name}}
    else {terminal::info("local attribute $name exists and is divergent; use rmparent -D $parent to delete it");
          $keep_parent_around = 1}}

  $keep_parent_around ? terminal::info("not deleting parent::$parent so that you can run", "rmparent -D $parent if you want to nuke divergent attributes too")
                      : rm("parent::$parent")}

__
meta::function('rs', <<'__');
render('-W');
srepl();

__
meta::function('run-example', <<'__');
sh("boot/interpreter examples/$_[0].canard");

__
meta::function('save', <<'__');
around_hook('save', sub {dangerous('', sub {file::write($0, serialize('-V')); $transient{initial} = state()}) if verify()});

__
meta::function('save-state', <<'__');
# Creates a named copy of the current state and stores it.
my ($state_name) = @_;
around_hook('save-state', $state_name, sub {
  associate("state::$state_name", current_state(), execute => 1)});

__
meta::function('sdoc', <<'__');
# Applies SDoc processing to a file or attribute. Takes the file or attribute
# name as the first argument and returns the processed text.

my %comments_for_extension = 
  qw|c     /*,*/  cpp   //    cc   //    h    //    java //  py  #    rb   #    pl  #   pm   #         ml   (*,*)  js  //
     hs    --     sh    #     lisp ;;;   lsp  ;;;   s    #   scm ;;;  sc   ;;;  as  //  html <!--,-->  mli  (*,*)  cs  //
     vim   "      elisp ;     bas  '     ada  --    asm  ;   awk #    bc   #    boo #   tex  %         fss  (*,*)  erl %
     scala //     hx    //    io   //    j    NB.   lua  --  n   //   m    %    php //  sql  --        pov  //     pro %
     r     #      self  ","   tcl  #     texi @c    tk   #   csh #    vala //   vbs '   v    /*,*/     vhdl --     ss  ;;;
     haml  -#     sass  /*,*/ scss /*,*/ css  /*,*/ fig  /   waul #   canard nb[,]|;

# No extension suggests a shebang line, which generally requires # to denote a comment.
$comments_for_extension{''} = '#';

my $generated_string = 'Generated by SDoc';

sub is_code    {map /^\s*[^A-Z\|\s]/o, @_}
sub is_blank   {map /^\n/o, @_}
sub comment    {my ($text, $s, $e) = @_; join "\n", map("$s $_" . (length $e ? " $e" : ''), split /\n/, $text)}

sub paragraphs {map split(/(\n(?:\h*\n)+)/, $_), @_}

my ($filename, $specified_extension) = @_;
my $logical_filename = $filename =~ /^sdoc::(.*)$/ ? $1 : $filename;

# Two possibilities here. One is that the filename is an attribute, in which case
# we want to look up the extension in the transients table. The other is that
# it's a real filename.
my $extension = $specified_extension || extension_for($logical_filename) || ($filename =~ /\.sdoc$/io ? $filename =~ /\.(\w+)\.sdoc$/igo : $filename =~ /\.(\w+)$/igo)[0];
$extension =~ s/^\.//o;

my ($start, $end) = split /,/o, $comments_for_extension{lc $extension} // $comments_for_extension{''} // '#';

join '', map(is_code($_) || is_blank($_) ? ($_ =~ /^\s*c\n(.*)$/so ? $1 : $_) : comment($_, $start, $end), paragraphs retrieve($filename)),
         "\n" . comment($generated_string, $start, $end) . "\n";

__
meta::function('sdoc-html', <<'__');
# Converts SDoc to logically-structured HTML. Sections end up being nested,
# and code sections and examples are marked as such. For instance, here is some
# sample output:

# <div class='section level1'>
#   <h1 class='title'>Foo</h1>
#   <p>This is a paragraph...</p>
#   <p>This is another paragraph...</p>
#   <pre class='code'>int main () {return 0;}</pre>
#   <pre class='quoted'>int main () {return 0} // Won't compile</pre>
#   <div class='section level2'>
#     <h2 class='title'>Bar</h2>
#     ...
#   </div>
# </div>

# It is generally good about escaping things that would interfere with HTML,
# but within text paragraphs it lets you write literal HTML. The heuristic is
# that known tags that are reasonably well-formed are allowed, but unknown ones
# are escaped.

my ($attribute)   = @_;
my @paragraphs    = split /\n(?:\s*\n)+/, retrieve($attribute);

my $known_tags    = join '|', qw[html head body meta script style link title div a span input button textarea option select form label iframe blockquote code caption
                                 table tbody tr td th thead tfoot img h1 h2 h3 h4 h5 h6 li ol ul noscript p pre samp sub sup var canvas audio video strong em];
my $section_level = 0;
my @markup;

my $indent        = sub {'  ' x ($_[0] || $section_level)};
my $unindent      = sub {my $spaces = '  ' x ($section_level - 1); s/^$spaces//gm};

my $escape_all    = sub {s/&/&amp;/g; s/</&lt;/g; s/>/&gt;/g};
my $escape_some   = sub {s/&/&amp;/g; s/<(?!\/|($known_tags)[^>]*>.*<\/\1>)/&lt;/gs};

my $code          = sub {&$escape_all(); &$unindent(); s/^c\n//;                   push @markup, &$indent() . "<pre class='code'>$_</pre>"};
my $quoted        = sub {&$escape_all(); &$unindent(); s/^\|(\s?)/ \1/; s/^  //mg; push @markup, &$indent() . "<pre class='quoted'>$_</pre>"};

my $paragraph     = sub {&$escape_some(); push @markup, &$indent() . "<p>$_</p>"};

my $section       = sub {my $h = $_[0] > 6 ? 6 : $_[0]; push @markup, &$indent($_[0] - 1) . "<div class='section level$_[0]'>", &$indent($_[0]) . "<h$h>$2</h$h>"};
my $close_section = sub {push @markup, &$indent($_[0]) . "</div>"};

my $title = sub {
  my $indentation = (length($1) >> 1) + 1;
  &$close_section($section_level) while $section_level-- >= $indentation;
  &$section($indentation);
  $section_level = $indentation;
};

for (@paragraphs) {
  &$code(),   next unless /^\h*[A-Z|]/;
  &$quoted(), next if     /^\h*\|/;

  &$title(), s/^.*\n// if /^(\s*)(\S.*)\.\n([^\n]+)/ and length("$1$2") < 60 and length("$1$2") - 10 < length($3);
  &$paragraph();
}

&$close_section($section_level) while $section_level--;

join "\n", @markup;

__
meta::function('sdoc-markdown', <<'__');
# Renders a chunk of SDoc as Markdown. This involves converting quoted and
# unquoted code and section headings, but not numbered lists.

my ($attribute)   = @_;
my @paragraphs    = split /\n(?:\s*\n)+/, retrieve($attribute);

my $section_level = 0;
my @markup;

my $indent        = sub {'  ' x ($_[0] || $section_level)};
my $unindent      = sub {my $spaces = '  ' x ($section_level - 1); s/^$spaces//gm; $_};

my $code          = sub {&$unindent(); s/^c\n//;                   push @markup, join("\n", map &$indent(2) . $_, split /\n/)};
my $quoted        = sub {&$unindent(); s/^\|(\s?)/ \1/; s/^  //mg; push @markup, join("\n", map &$indent(2) . $_, split /\n/)};

my $heading       = sub {'#' x $_[0]};
my $section       = sub {&$unindent(); push @markup, &$heading($_[0]) . ' ' . $2};

my $title = sub {
  my $indentation = (length($1) >> 1) + 1;
  &$section($indentation);
  $section_level = $indentation;
};

for (@paragraphs) {
  &$code(),   next unless /^\h*[A-Z|]/;
  &$quoted(), next if     /^\h*\|/;

  &$title(), s/^.*\n// if /^(\s*)(\S.*)\.\n([^\n]+)/ and length("$1$2") < 60 and length("$1$2") - 10 < length($3);
  push @markup, join "\n", map &$unindent(), split /\n/;
}

join "\n\n", @markup;

__
meta::function('sdoc-packed', <<'__');
# An SDoc preprocessor that removes all comment paragraphs. Paragraph breaks
# are preserved, and no "generated by SDoc" string is added.
join "\n", grep /^\s*[^A-Z| ]/, split /\n(?:\s*\n)+/, retrieve(@_);

__
meta::function('sdocp', <<'__');
# Renders an attribute as SDocP. This logic was taken directly from the sdoc script.
my $attribute = retrieve($_[0]);
sub escape {my @results = map {s/\\/\\\\/go; s/\n/\\n/go; s/'/\\'/go; $_} @_; wantarray ? @results : $results[0]}
"sdocp('" . escape($_[0]) . "', '" . escape($attribute) . "');";
__
meta::function('serialize', <<'__');
my ($options, @criteria) = separate_options(@_);
my $partial     = $$options{'-p'};
my $criteria    = join '|', @criteria;
my @attributes  = map serialize_single($_), select_keys(%$options, '-m' => 1, '--criteria' => $criteria), select_keys(%$options, '-M' => 1, '--criteria' => $criteria);
my @final_array = @{$partial ? \@attributes : [expanded_bootstrap(), @attributes, 'internal::main();', '', '__DATA__', $global_data]};
join "\n", @final_array;

__
meta::function('serialize-single', <<'__');
# Serializes a single attribute and optimizes for content.

my $name          = $_[0] || $_;
my $contents      = $data{$name};
my $meta_function = 'meta::' . namespace($name);
my $invocation    = attribute($name);
my $escaped       = $contents;
$escaped =~ s/\\/\\\\/go;
$escaped =~ s/'/\\'/go;

return "$meta_function('$invocation', '$escaped');" unless $escaped =~ /\v/;

my $delimiter = '__' . fast_hash($contents);
my $chars     = 2;

++$chars until $chars >= length($delimiter) || index("\n$contents", "\n" . substr($delimiter, 0, $chars)) == -1;
$delimiter = substr($delimiter, 0, $chars);

"$meta_function('$invocation', <<'$delimiter');\n$contents\n$delimiter";

__
meta::function('sh', 'system(@_);');
meta::function('shb', <<'__');
# Backgrounded shell.
with_fork(@_, \&::sh);

__
meta::function('shell', <<'__');
my ($options, @arguments) = separate_options(@_);
$transient{repl_prefix} = $$options{'--repl-prefix'};

terminal::cc(retrieve('data::current-continuation')) if length $data{'data::current-continuation'};
around_hook('shell', sub {shell::repl(%$options)});

__
meta::function('size', <<'__');
my $size = 0;
$size += length $data{$_} for keys %data;
sprintf "   full logical  unique    self\n% 7d % 7d % 7d % 7d", length(serialize()), $size, length(serialize('-up')), length $global_data;

__
meta::function('snapshot', <<'__');
my ($name) = @_;
file::write(my $finalname = temporary_name($name), serialize(), noclobber => 1);
chmod 0700, $finalname;
hook('snapshot', $finalname);
__
meta::function('state', <<'__');
my ($options, @attributes) = separate_options(@_);
@attributes = grep !is($_, '-v'), sort keys %data unless @attributes;
@attributes = grep is($_, '-iu'), @attributes if $$options{'-i'};

my $hash = fast_hash(fast_hash(scalar @attributes) . join '|', @attributes);
$hash = fast_hash("$data{$_}|$hash") for @attributes;

$$options{'-G'} ? $hash : fast_hash("$global_data|$hash");

__
meta::function('test', <<'__');
render();
sh('file boot');
sh('readelf -h boot');

__
meta::function('touch', 'associate($_, \'\') for @_;');
meta::function('unlock', 'hook(\'unlock\', chmod_self(sub {$_[0] | 0200}));');
meta::function('update', <<'__');
update_from(@_, grep s/^parent:://o, sort keys %data);

__
meta::function('update-from', <<'__');
# Upgrade all attributes that aren't customized. Customization is defined when the data type is created,
# and we determine it here by checking for $transient{inherit}{$type}.

# Note that this assumes you trust the remote script. If you don't, then you shouldn't update from it.

around_hook('update-from-invocation', separate_options(@_), sub {
  my ($options, @targets) = @_;
  my %parent_id_cache    = cache('parent-identification');
  my %parent_state_cache = cache('parent-state');
  my %already_seen;

  @targets or return;

  my @known_targets     = grep s/^parent:://, parent_ordering(map "parent::$_", grep exists $data{"parent::$_"}, @targets);
  my @unknown_targets   = grep ! exists $data{"parent::$_"}, @targets;
  @targets = (@known_targets, @unknown_targets);

  my $save_state        = $$options{'-s'} || $$options{'--save'};
  my $no_state          = $$options{'-S'} || $$options{'--no-state'};
  my $no_verify         = $$options{'-V'} || $$options{'--no-verify'};
  my $no_parents        = $$options{'-P'} || $$options{'--no-parent'} || $$options{'--no-parents'};
  my $force             = $$options{'-f'} || $$options{'--force'};
  my $clobber_divergent = $$options{'-D'} || $$options{'--clobber-divergent'};

  save_state('before-update') unless $no_state;

  for my $target (@targets) {
    dangerous("updating from $target", sub {
    around_hook('update-from', $target, sub {
      my $target_filename = strip(qx(which $target)) || $target;
      my %parent_metadata = %{metadata_from($target_filename)};
      terminal::warning("$target_filename has no externally visible metadata (makes updating slower)") unless $parent_metadata{id};

      my $identity = $parent_id_cache{$target} ||= $parent_metadata{id} || join '', qx($target identity);
      next if $already_seen{$identity} || $parent_state_cache{$identity} eq $parent_metadata{istate};

      my $attributes = join '', qx($target ls -ahiu);
      my %divergent;
      die "skipping unreachable $target" unless $attributes;

      # These need to come after the reachability check so that we retry against
      # other copies in case something fails.
      ++$already_seen{$identity};
      $parent_state_cache{$identity} = $parent_metadata{istate} || join '', qx($target state -iG);

      for my $to_rm (split /\n/, retrieve("parent::$target")) {
        my ($name, $hash) = split(/\s+/, $to_rm);
        next unless exists $data{$name};

        my $local_hash = fast_hash(retrieve($name));
        if ($clobber_divergent or $hash eq $local_hash or ! defined $hash) {rm($name)}
        else {terminal::info("preserving local version of divergent attribute $name (use update -D to clobber it)");
              $divergent{$name} = retrieve($name)}}

      associate("parent::$target", $attributes) unless $no_parents;

      dangerous('', sub {eval qx($target serialize -ipmu)});
      dangerous('', sub {eval qx($target serialize -ipMu)});

      map associate($_, $divergent{$_}), keys %divergent unless $clobber_divergent;

      reload()})})}

  cache('parent-identification', %parent_id_cache);
  cache('parent-state',          %parent_state_cache);

  if ($no_verify) {hook('update-from-presumably-succeeded', $options, @targets);
                   rm('state::before-update') unless $no_state || $save_state}
  elsif (verify()) {hook('update-from-succeeded', $options, @targets);
                    terminal::info("Successfully updated. Run 'load-state before-update' to undo this change.") if $save_state;
                    rm('state::before-update') unless $no_state || $save_state}
  elsif ($force || $no_state) {hook('update-from-failed', $options, @targets);
                               terminal::warning('Failed to verify: at this point your object will not save properly, though backup copies will be created.',
                                                 $no_state ? 'You should attempt to repair this object since no prior state was saved.'
                                                           : 'Run "load-state before-update" to undo the update and return to a working state.')}
  else {hook('update-from-failed', $options, @targets);
        terminal::error('Verification failed after the upgrade was complete.');
        terminal::info("$0 has been reverted to its pre-upgrade state.", "If you want to upgrade and keep the failure state, then run 'update-from $target --force'.");
        load_state('before-update');
        rm('state::before-update')}});

__
meta::function('usage', '"Usage: $0 action [arguments]\\nUnique actions (run \'$0 ls\' to see all actions):" . ls(\'-u\');');
meta::function('verify', <<'__');
file::write(my $other = $transient{temporary_filename} = temporary_name(), my $serialized_data = serialize());
chomp(my $observed = join '', qx|perl '$other' state|);

unlink $other if my $result = $observed eq (my $state = state());
terminal::error("Verification failed; expected $state but got $observed from $other") unless $result;
hook('after-verify', $result, observed => $observed, expected => $state);
$result;
__
meta::function('vim', <<'__');
# Installs VIM highlighters.
file::write("$ENV{'HOME'}/.vim/syntax/$_.vim", retrieve("vim_highlighter::$_")) for grep s/^vim_highlighter:://o, keys %data;
__
meta::function('wrapped-near', <<'__');
my ($text, $approximate_margin) = @_;
$approximate_margin ||= 80;
my $pattern = "^(.{$approximate_margin,}?) ";
1 while $text =~ s/$pattern/\1\n/mg;
$text;

__
meta::hook('before-shell::ad', <<'__');
ad('alias::c.');

__
meta::indicator('cc', 'length ::retrieve(\'data::current-continuation\') ? "\\033[1;36mcc\\033[0;0m" : \'\';');
meta::indicator('locked', 'is_locked() ? "\\033[1;31mlocked\\033[0;0m" : \'\';');
meta::indicator('path', <<'__');
my @highlighted = map join("\033[1;30m|\033[0;0m", split /\|/, $_), @{$transient{path}};
join "\033[1;30m/\033[0;0m", @highlighted;

__
meta::internal_function('around_hook', <<'__');
# around_hook('hookname', @args, sub {
#   stuff;
# });

# Invokes 'before-hookname' on @args before the sub runs, invokes the
# sub on @args, then invokes 'after-hookname' on @args afterwards.
# The after-hook is not invoked if the sub calls 'die' or otherwise
# unwinds the stack.

my $hook = shift @_;
my $f    = pop @_;

hook("before-$hook", @_);
my @result = &$f(@_);
hook("after-$hook", @_);
wantarray ? @result : $result[0];

__
meta::internal_function('associate', <<'__');
my ($name, $value, %options) = @_;
die "Namespace does not exist" unless exists $datatypes{namespace($name)};
$data{$name} = $value;
execute($name) if $options{execute};
$value;

__
meta::internal_function('attribute', <<'__');
my ($name) = @_;
$name =~ s/^[^:]*:://;
$name;
__
meta::internal_function('attribute_is', <<'__');
my ($a, %options) = @_;
my %inherited     = parent_attributes(grep /^parent::/o, sort keys %data) if grep exists $options{$_}, qw/-u -U -d -D/;
my $criteria      = $options{'--criteria'} || $options{'--namespace'} && "^$options{'--namespace'}::" || '.';

my %tests = ('-u' => sub {! $inherited{$a}},
             '-d' => sub {$inherited{$a} && fast_hash(retrieve($a)) ne $inherited{$a}},
             '-i' => sub {$transient{inherit}{namespace($a)}},
             '-v' => sub {$transient{virtual}{namespace($a)}},
             '-s' => sub {$a =~ /^state::/o},
             '-m' => sub {$a =~ /^meta::/o});

return 0 unless scalar keys %tests == scalar grep ! exists $options{$_}    ||   &{$tests{$_}}(), keys %tests;
return 0 unless scalar keys %tests == scalar grep ! exists $options{uc $_} || ! &{$tests{$_}}(), keys %tests;

$a =~ /$_/ || return 0 for @{$options{'--path'}};
$a =~ /$criteria/;

__
meta::internal_function('cache', <<'__');
my ($name, %pairs) = @_;
if (%pairs) {associate("cache::$name", join "\n", map {$pairs{$_} =~ s/\n//g; "$_ $pairs{$_}"} sort keys %pairs)}
else        {map split(/\s/, $_, 2), split /\n/, retrieve("cache::$name")}
__
meta::internal_function('chmod_self', <<'__');
my ($mode_function)      = @_;
my (undef, undef, $mode) = stat $0;
chmod &$mode_function($mode), $0;
__
meta::internal_function('dangerous', <<'__');
# Wraps a computation that may produce an error.
my ($message, $computation) = @_;
terminal::info($message) if $message;
my @result = eval {&$computation()};
terminal::warning(translate_backtrace($@)), return undef if $@;
wantarray ? @result : $result[0];
__
meta::internal_function('debug_trace', <<'__');
terminal::debug(join ', ', @_);
wantarray ? @_ : $_[0];
__
meta::internal_function('execute', <<'__');
my ($name, %options) = @_;
my $namespace = namespace($name);
eval {&{$datatypes{$namespace}}(attribute($name), retrieve($name))};
warn $@ if $@ && $options{'carp'};

__
meta::internal_function('exported', <<'__');
# Allocates a temporary file containing the concatenation of attributes you specify,
# and returns the filename. The filename will be safe for deletion anytime.
my $filename = temporary_name();
file::write($filename, cat(@_));
$filename;

__
meta::internal_function('extension_for', <<'__');
my $extension = $transient{extension}{namespace($_[0])};
$extension = &$extension($_[0]) if ref $extension eq 'CODE';
$extension || '';
__
meta::internal_function('fast_hash', <<'__');
my ($data)     = @_;
my $piece_size = length($data) >> 3;

my @pieces     = (substr($data, $piece_size * 8) . length($data), map(substr($data, $piece_size * $_, $piece_size), 0 .. 7));
my @hashes     = (fnv_hash($pieces[0]));

push @hashes, fnv_hash($pieces[$_ + 1] . $hashes[$_]) for 0 .. 7;

$hashes[$_] ^= $hashes[$_ + 4] >> 16 | ($hashes[$_ + 4] & 0xffff) << 16 for 0 .. 3;
$hashes[0]  ^= $hashes[8];

sprintf '%08x' x 4, @hashes[0 .. 3];
__
meta::internal_function('file::read', <<'__');
my $name = shift;
open my($handle), "<", $name;
my $result = join "", <$handle>;
close $handle;
$result;
__
meta::internal_function('file::write', <<'__');
use File::Path     'mkpath';
use File::Basename 'dirname';

my ($name, $contents, %options) = @_;
die "Choosing not to overwrite file $name" if $options{noclobber} and -f $name;
mkpath(dirname($name)) if $options{mkpath};

my $open_name = $name =~ /^[>|]/ ? $name : $options{append} ? ">> $name" : "> $name";
open my($handle), $open_name or die "Can't open $name for writing";
print $handle $contents;
close $handle;

__
meta::internal_function('fnv_hash', <<'__');
# A rough approximation to the Fowler-No Voll hash. It's been 32-bit vectorized
# for efficiency, which may compromise its effectiveness for short strings.

my ($data) = @_;

my ($fnv_prime, $fnv_offset) = (16777619, 2166136261);
my $hash                     = $fnv_offset;
my $modulus                  = 2 ** 32;

$hash = ($hash ^ ($_ & 0xffff) ^ ($_ >> 16)) * $fnv_prime % $modulus for unpack 'L*', $data . substr($data, -4) x 8;
$hash;
__
meta::internal_function('hypothetically', <<'__');
# Applies a temporary state and returns a serialized representation.
# The original state is restored after this, regardless of whether the
# temporary state was successful.

my %data_backup   = %data;
my ($side_effect) = @_;
my $return_value  = eval {&$side_effect()};
%data = %data_backup;

die $@ if $@;
$return_value;
__
meta::internal_function('internal::main', <<'__');
disable();

$SIG{'INT'} = sub {snapshot(); exit 1};

$transient{initial}      = state();
chomp(my $default_action = retrieve('data::default-action'));

my $function_name = shift(@ARGV) || $default_action;
my @effective_argv = @ARGV;

unshift @effective_argv, $function_name and $function_name = 'method_missing' unless exists $externalized_functions{$function_name};

around_hook('main-function', $function_name, @effective_argv, sub {
  dangerous('', sub {
    chomp(my @result = &$function_name(@effective_argv));
    print join("\n", @result), "\n" if @result})});

save() unless state() eq $transient{initial};

END {enable()}

__
meta::internal_function('invoke_editor_on', <<'__');
my ($data, %options) = @_;
my $editor    = $options{editor} || $ENV{VISUAL} || $ENV{EDITOR} || die 'Either the $VISUAL or $EDITOR environment variable should be set to a valid editor';
my $options   = $options{options} || $ENV{VISUAL_OPTS} || $ENV{EDITOR_OPTS} || '';
my $attribute = $options{attribute};
$attribute =~ s/\//-/g;
my $filename  = temporary_name() . "-$attribute$options{extension}";

file::write($filename, $data);
system("$editor $options '$filename'");

my $result = file::read($filename);
unlink $filename;
$result;
__
meta::internal_function('is_locked', '!((stat($0))[2] & 0222);');
meta::internal_function('namespace', <<'__');
my ($name) = @_;
$name =~ s/::.*$//;
$name;
__
meta::internal_function('parent_attributes', <<'__');
my $attributes = sub {my ($name, $value) = split /\s+/o, $_; $name => ($value || 1)};
map &$attributes(), split /\n/o, join("\n", retrieve(@_));
__
meta::internal_function('parent_ordering', <<'__');
# Topsorts the parents by dependency chain. The simplest way to do this is to
# transitively compute the number of parents referred to by each parent.

my @parents = @_;
my %all_parents = map {$_ => 1} @parents;

my %parents_of = map {
  my $t = $_;
  my %attributes = parent_attributes($_);
  $t => [grep /^parent::/, keys %attributes]} @parents;

my %parent_count;
my $parent_count;
$parent_count = sub {
  my ($key) = @_;
  return $parent_count{$key} if exists $parent_count{$key};
  my $count = 0;
  $count += $parent_count->($_) + exists $data{$_} for @{$parents_of{$key}};
  $parent_count{$key} = $count};

my %inverses;
push @{$inverses{$parent_count->($_)} ||= []}, $_ for @parents;
grep exists $all_parents{$_}, map @{$inverses{$_}}, sort keys %inverses;
__
meta::internal_function('retrieve', <<'__');
my @results = map defined $data{$_} ? $data{$_} : retrieve_with_hooks($_), @_;
wantarray ? @results : $results[0];

__
meta::internal_function('retrieve_with_hooks', <<'__');
# Uses the hooks defined in $transient{retrievers}, and returns undef if none work.
my ($attribute) = @_;
my $result      = undef;

defined($result = &$_($attribute)) and return $result for map $transient{retrievers}{$_}, sort keys %{$transient{retrievers}};
return undef;
__
meta::internal_function('select_keys', <<'__');
my %options = @_;
grep attribute_is($_, %options), sort keys %data;
__
meta::internal_function('separate_options', <<'__');
# Things with one dash are short-form options, two dashes are long-form.
# Characters after short-form are combined; so -auv4 becomes -a -u -v -4.
# Also finds equivalences; so --foo=bar separates into $$options{'--foo'} eq 'bar'.
# Stops processing at the -- option, and removes it. Everything after that
# is considered to be an 'other' argument.

# The only form not supported by this function is the short-form with argument.
# To pass keyed arguments, you need to use long-form options.

my @parseable;
push @parseable, shift @_ until ! @_ or $_[0] eq '--';

my @singles = grep /^-[^-]/, @parseable;
my @longs   = grep /^--/,    @parseable;
my @others  = grep ! /^-/,   @parseable;

my @singles = map /-(.{2,})/ ? map("-$_", split(//, $1)) : $_, @singles;

my %options;
/^([^=]+)=(.*)$/ and $options{$1} = $2 for @longs;
++$options{$_} for grep ! /=/, @singles, @longs;

({%options}, grep length, @others, @_);

__
meta::internal_function('strip', 'wantarray ? map {s/^\\s*|\\s*$//g; $_} @_ : $_[0] =~ /^\\s*(.*?)\\s*$/ && $1;');
meta::internal_function('table_display', <<'__');
# Displays an array of arrays as a table; that is, with alignment. Arrays are
# expected to be in column-major order.

sub maximum_length_in {
  my $maximum = 0;
  length > $maximum and $maximum = length for @_;
  $maximum;
}

my @arrays    = @_;
my @lengths   = map maximum_length_in(@$_), @arrays;
my @row_major = map {my $i = $_; [map $$_[$i], @arrays]} 0 .. $#{$arrays[0]};
my $format    = join '  ', map "%-${_}s", @lengths;

join "\n", map strip(sprintf($format, @$_)), @row_major;
__
meta::internal_function('temporary_name', <<'__');
use File::Temp 'tempfile';
my (undef, $temporary_filename) = tempfile("$0." . 'X' x 4, OPEN => 0);
$temporary_filename;
__
meta::internal_function('translate_backtrace', <<'__');
my ($trace) = @_;
$trace =~ s/\(eval (\d+)\)/$locations{$1 - 1}/g;
$trace;
__
meta::internal_function('with_cwd', <<'__');
my ($dir, $f) = @_;
my $cwd = cwd();

my @result = eval {chdir $dir && &$f()};
chdir $cwd;
die $@ if $@;
wantarray ? @result : $result[0];

__
meta::internal_function('with_exported', <<'__');
# Like exported(), but removes the file after running some function.
# Usage is with_exported(@files, sub {...});
my $f      = pop @_;
my $name   = exported(@_);
my $result = eval {&$f($name)};
terminal::warning("$@ when running with_exported()") if $@;
unlink $name;
$result;
__
meta::internal_function('with_fork', <<'__');
my (@args) = @_;
my $f = pop @args;

return process->new($child_pid) if my $child_pid = fork;

# This is the child process. Disable saving to prevent contention, and then
# exit with the given status code.
*::save = sub {};
exit &$f(@args);

__
meta::library('process', <<'__');
package process;

sub new  {my ($class, $pid) = @_; bless \$pid, $class}
sub kill {my ($self, $signal) = @_; ::kill $signal // 'KILL', $$self; $self->wait()}
sub term {my ($self) = @_; $self->kill('TERM')}
sub int  {my ($self) = @_; $self->kill('INT')}
sub stop {my ($self) = @_; $self->kill('STOP')}
sub cont {my ($self) = @_; $self->kill('CONT')}

sub wait {my ($self) = @_; ::wait($$self)}

__
meta::library('shell', <<'__');
# Functions for shell parsing and execution.
package shell;
use Term::ReadLine;

sub tokenize {grep length, split /\s+|("[^"\\]*(?:\\.)?")/o, join ' ', @_};

sub parse {
  my ($fn, @args) = @_;
  s/^"(.*)"$/\1/o, s/\\\\"/"/go for @args;
  {function => $fn, args => [@args]}}

sub execute {
  my %command = %{$_[0]};
  die "undefined command: $command{function}" unless exists $externalized_functions{$command{function}};
  &{"::$command{function}"}(@{$command{args}})}

sub run {execute(parse(tokenize(@_)))}

sub prompt {
  my %options = @_;
  my $name    = $options{name} // ::name();

  my $indicators = join '', map &{"::$_"}(), ::select_keys('--namespace' => 'indicator');
  my $prefix     = $transient{repl_prefix} // '';

  "$prefix\033[1;32m$name\033[0;0m$indicators "}

sub repl {
  my %options = @_;

  my $term = new Term::ReadLine "$0 shell";
  $term->ornaments(0);
  my $attribs = $term->Attribs;
  $attribs->{completion_entry_function} = $attribs->{list_completion_function};

  my $autocomplete = $options{autocomplete} || sub {[sort(keys %data), grep !/-/, sort keys %externalized_functions]};
  my $prompt       = $options{prompt}       || \&prompt;
  my $parse        = $options{parse}        || sub {parse(tokenize(@_))};
  my $output       = $options{output}       || sub {print join("\n", @_), "\n"};
  my $command      = $options{command}      || sub {my ($command) = @_; ::around_hook('shell-command', $command, sub {&$output(::dangerous('', sub {execute($command)}))})};

  length $_ && &$command(&$parse($_)) while ($attribs->{completion_word} = &$autocomplete(), defined($_ = $term->readline(&$prompt())))}

__
meta::library('terminal', <<'__');
# Functions for nice-looking terminal output.
package terminal;

my $process = ::name();

sub message {print STDERR "[$_[0]] $_[1]\n"}
sub color {
  my ($name, $color) = @_;
  *{"terminal::$name"} = sub {chomp($_), print STDERR "\033[1;30m$process(\033[1;${color}m$name\033[1;30m)\033[0;0m $_\n" for map join('', $_), @_}}

my %preloaded = (info => 32, progress => 32, state => 34, debug => 34, warning => 33, error => 31);
color $_, $preloaded{$_} for keys %preloaded;
__
meta::message_color('cc', '36');
meta::message_color('state', 'purple');
meta::message_color('states', 'yellow');
meta::note('bootstrapping', <<'__');
Bootstrapping.
There isn't much need to write a binary Canard image in itself. The reason is
that this will be just as platform-specific as the original bootstrap
interpreter. The interpreter allows you to inspect all of its internals, so you
could conceivably create a copy of it at another location in memory.

__
meta::note('cons-cell-allocator', <<'__');
Cons cell allocator.
Allocating cons cells efficiently should be straightforward. I think this
algorithm will work:

| pop %rax                      <- continuation
  pop %rbx                      <- tail element pointer
  pop %rcx                      <- head element pointer
  testq %rbx, %rbx              <- are we consing onto nil?
  jz encode_tail_call           <- if so, do a JMP instead of a CALL
  testq %rbx, %rsi              <- are we consing onto the last cell?
  je after_tail                 <- if so, don't cons the tail
    subq %rsi, %rbx             <- absolute to relative address
    movl %ebx, -4(%rsi)         <- copy 32-bit displacement into place
    lea -5(%rsi), %rsi          <- subtract to finish the tail allocation
    movb $0xe9, (%rsi)          <- encode JMP instruction
  after_tail:
    subq %rsi, %rcx             <- absolute to relative address
    movl %ecx, -4(%rsi)         <- copy 32-bit displacement into place
    lea -5(%rsi), %rsi          <- allocate head of cons cell
    movb $0xe8, (%rsi)          <- encode CALL instruction
  jmp *%rax                     <- invoke continuation
  encode_tail_call:
    subq %rsi, %rcx             <- absolute to relative address
    movl %ecx, -4(%rsi)         <- copy 32-bit displacement
    lea -5(%rsi), %rsi          <- allocate head
    movb $0xe9, (%rsi)          <- encode JMP instruction (tail call)
  jmp *%rax                     <- invoke continuation

Notice that we use %rsi as the heap allocation pointer (and that it grows
downwards). This means that %rsi must be preserved across things like syscalls.

Here are the cases (... indicates the original position of %rsi):

| cons x []             %rsi -> | e9 xx xx xx xx | ...
  cons x y              %rsi -> | e8 xx xx xx xx | e9 yy yy yy yy | ...
  cons x cons y z       %rsi -> | e8 xx xx xx xx | e8 yy yy yy yy |
                                                   e9 zz zz zz zz | ...

__
meta::note('dynamic-inlining', <<'__');
Dynamic inlining.
It is simple to remove indirection lazily by modifying calling code. For
example:

| call symbol_f_definition
  ...
  symbol_f_definition:
    movq $symbol_f_bound_value, %rax
    movq (%rsp), %rbx
    subq %rbx, %rax
    movl %eax, -4(%rbx)
    jmp -5(%rbx)
  ...
  symbol_f_bound_value:
    ...

Or some such. The idea is to patch up the caller so that the next call goes
straight to the symbol's destination rather than through the symbol table. After
the call has been executed, the code should become:

| call symbol_f_bound_value
  ...
  symbol_f_definition:
    ...
  symbol_f_bound_value:
    ...

The result is that we've removed the unnecessary indirection through the symbol
table.

Inlining and CPS.
CPS is fundamentally at odds with symbol-inlining because we're relying on the
caller to specify its own continuation as the return address. If it doesn't do
this, then we'll modify someone else's code. For example:

| pushq %rax            <- continuation, but not our_continuation
  jmp symbol_f_definition
  our_continuation:
    ...

Here, the five bytes preceding (%rax) will be modified; this is undesirable
because it will probably not be the calling site. To avoid this, we need to
invoke the indirect symbol_f_definition instead:

| pushq %rax
  jmp symbol_f_definition_indirect

This one behaves just like symbol_f_definition but does not patch the caller.

Philosophical implications.
What we're doing here is just removing dynamicism from the program at runtime.
Symbols cannot be redefined, so there isn't much reason to preserve the
indirection through the symbol table once we know what the destination is.

We can't fix up tail calls (which are a special case of call/cc) because we
don't know where the continuation came from:

| call/cc [foo bar]

Here, [foo bar] will tail-call to the outer continuation; however, this is not
always the case:

| . [foo bar]

__
meta::note('dynamic-tail-call-optimization', <<'__');
Dynamic tail call optimization.
Now that tail calls are not automatically generated, we have the flexibility to
rewrite all calling addresses (except those used with call/cc, but that is a
different matter). Here's the code:

| popq %rax                     <- continuation
  testb (%rax), $0xc3           <- is the continuation opcode RET?
  jne preserve_caller
  testb -5(%rax), $0xe8         <- is the call site using a CALL?
  jne preserve_caller
    movb $0xe9, -5(%rax)        <- rewrite CALL to JMP
  preserve_caller:
  ...

__
meta::note('dynamic-tco-is-impossible', <<'__');
Dynamic TCO is impossible.
This is the case because call sites are aliased. This happens because of the
identity that '. [x]' and 'x' are functionally equivalent (though they are not
the same lists).

The problem is that the cons cell that points to the . is shared across all
values of the list it is invoking. Therefore, we can't modify it unless we can
prove that it is monomorphic (but if it were, the odds are good that it would
have been written as just 'x', not '. [x]').

An alternative is to eagerly clone the code over the domain of monomorphism ...
but this is a serious undertaking and is probably impossible.

Update.
This is not at all the case. See note::dynamic-tail-call-optimization.

__
meta::note('frequency-vs-cost', <<'__');
Frequency vs cost.
Machine-coded lists are expensive to inspect but cheap to execute. Canard is
primarily about execution (I'll explain further in a moment), so it makes
perfect sense to use a machine encoding.

Why primarily about execution? Because most of the heavy lifting will not
involve lists at all. You don't generally use linked lists in
performance-critical situations. Instead, you allocate memory and use vectors or
some such. Most list-oriented code is probably something to do with
metaprogramming or non-performance-critical symbolic manipulation.

I think that means this issue is closed: executable data structures are a win
here. (The performance win comes from delegating dispatch to the processor's
decoder rather than using soft decoding, which would be necessary provided that
we also need RTTI and polymorphism.)

__
meta::note('function-continuation-management', <<'__');
Function continuation management.
Normal functions will want to immediately stash their continuations onto the
return stack, then reload that continuation just prior to their last instruction
(which will be a tail call). So they will generally look like this:

| f [x y z]     -> f [x r> y z r<]              (defining f)
  g [x]         -> g [x]                        (defining g)
  h []          -> []                           (defining h)

The same is true of anonymous functions, including those inside conditionals:

| f [? [x r> y r<] [z r> t r<] r> g r<]

This is, quite frankly, miserable and hackish. What's worse is that we can't
realistically get rid of the inconvenience using metaprogramming, since
anonymous functions are indistinguishable from data lists. (Adding a marker
would be adding syntax, which is lame.)

Underlying algebra.
The apparent irregularity of the above r< and r> invocations is actually one
optimization removed from a very regular quasi-monadic form:

| f [x y z]     -> f [x r> y z r<]
                 = f [x r> y r< r> z r<]
                 = f [r> return r< r> x r< r> y r< r> z r<]

Update.
Since lists are no longer tail-encoded, we need to wrap each call uniformly with
r> and r<. So:

| f [x y z]     -> f [r> x y z r<]

Alternatively, something like this:

| f [x y z]     -> f [call-without-current-continuation [x y z]]

It might be nice to bake the without-current-continuation stuff into the calling
convention. It's a little silly to be moving the values around twice like this.
(However, it is convenient to be able to use the single-byte e8 and e9 to
address lists.)

__
meta::note('gc', <<'__');
Garbage collection.
GC is implemented as a library and is, importantly, non-primitive. Most GC libraries probably provide custom stack representations and cons allocators, and their entry point is an evaluation
function.

__
meta::note('interpreter-constraints', <<'__');
Interpreter constraints.
| 1. The interpreter should impose little overhead.
  2. Its data should be polymorphic (symbols, conses, nil).
  3. It must provide a representation for tail calls.

All of this is achieved if lists are made of executable code, but as discussed
elsewhere this has its own disadvantages.

__
meta::note('interpreter-internals', <<'__');
Canard interpreter.
The interpreter structure is heavily inspired by jonesforth, but with some
significant differences as well. The biggest difference is that Canard makes
code generally isomorphic to data; therefore, the interpreter code is itself a
data structure that appears in the memory image.

Unlike jonesforth, this interpreter is indirect-threaded through the symbol
table. This allows you to use symbols in recursive definitions:

| foo [? [foo] [] > 1]

Lists and symbols.
Like Joy, Canard is made up of lists and symbols. Everything, including numbers,
is modeled this way; there is in fact no literal numeric syntax at all. Each
object is represented by the machine code that provides its runtime behavior.
There are three primary cases:

| cons x y = e8 y e9 x          <- call to y, then tail call (jump) to x
  symbol s = e9 target(s)       <- tail call to symbol definition
  nil      = c3                 <- return from subroutine

In practice, nil is rarely encoded due to this shorthand:

| cons nil x = e9 x             <- tail-call straight to x

Notice the similarity between a symbol and a thing consed to nil. This
establishes the nice equivalence:

| 'foo = [foo]

And therefore we can remove a case from the interpreter, since quoting is
already handled by the list construct.

Threading.
Jonesforth uses a very minimalistic and elegant direct-threading model that ends
up saving a signficant amount of space over writing out the opcodes. Canard
takes a different approach for a couple of reasons. First, Canard is 64-bit, so
the 4-byte absolute addresses become 8-byte ones if we use a direct encoding.
Second, we can't do eager symbol resolution since we'll use (i.e. compile) some
symbols before they have been defined.

At the same time, however, we want to avoid the overhead that comes with the
second layer of indirection intrinsic to indirect threading. The easiest way to
do this, assuming that we're willing to be arbitrarily hackish (which I am), is
to simply update the calling address to remove the indirection [1]. So we end up
with code that looks like this:

| e8 xx xx xx xx                <- xx xx xx xx points to the symbol table entry
  xx xx xx xx:
    movzxl $yy yy yy yy, %eax   <- absolute address of yy yy yy yy
    subq (%rsp), %rax           <- make it relative to the calling address
    movl %eax, -4(%rsp)         <- go back and fix up the address
    jmp -5(%rsp)                <- and use the new and improved jump

This has an interesting effect on the resulting code in the code-as-data model.
The symbols will end up being erased and lists will refer back to each other
directly rather than going through the symbol table:

| fact [? [* fact - 1 %0] [1 %v] %0]
       ^     v
       +--<--+

Notice that we've now lost information [2]: we don't know why the list refers to
itself, just that it does. We arguably shouldn't make this transformation
lightly, since the user will see the difference between the initial abstract
list and the resulting resolved one. This transformation becomes particularly
apparent when taken to its logical limit: every primitive operation will end up
being replaced by its definition until the whole list is rewritten into fully
executable machine code and will contain no intermediate symbol indirection at
all.

Note that this has the added benefit that tail calls propagate through symbol
dereferencing. (I think this is true; need to verify in all cases.)

| [1] This could be a problem because it makes it impractical to generalize the
      calling convention to any form of CPS. (Specifically, you can't invoke a
      piece of code with a different continuation without seriously borking
      things.) I'm going to need to put a lot of thought into this...

| [2] Technically, the information is still there, though only due to a
      counterintuitive property of the mechanism. Lists preserve their identity
      across this transformation and we know that every list might have an
      associated symbol. Therefore, we can easily enough go backwards from
      list-address to symbol name in the event that lists must be printed. Code
      that inspects the lists will still need to manually invert the symbol
      lookup.

Symbols.
The symbol table contains executable code that looks up symbols, returning the
default 'define-this-symbol' function if the mapping doesn't exist. The initial
symbol table is a part of this bootstrap image and is one of the few things
about Canard that isn't written in the language itself.

Once defined, symbols are fairly straightforward. The symbol table maps each
symbol to a caller-modifying function as described above.

__
meta::note('interpreter-overhead', <<'__');
Interpretation vs executable data structures.
I'm mostly interested in cons cells here. If we represent a cons as a data
structure, then the logical model would be something like this:

| struct cons {
    uint64_t head;
    uint64_t tail;
  };

The interpreter for this data structure would encode the call-vs-jmp logic that
would otherwise be present:

| interpret_cons:       <- %rax points to the cons cell
    call *(%rax)
    jmp *8(%rax)

Conveniently, there isn't much overhead imposed here, and cons cell unpacking is
quite straightforward:

| unpack_cons:          <- %rax points to the cons cell
    movaps (%rax), %xmm0
    lea -16(%rsp), %rsp
    movaps %xmm0, (%rsp)

Note that I haven't yet specified how cons cells are stored. That's an open
question if data structures are non-executable, and arguably it should be
encoded somehow.

Executable data structures.
The encoding here is different. A list would have one of these three forms:

| 1. e8 <32-bit relative head ptr> e9 <32-bit relative tail ptr>
  2. e9 <32-bit relative head ptr>
  3. c3

Case (1) is a nontrivial cons; case (2) is x :: nil, and case (3) is just nil.

Some sort of padding is probably necessary, though that could go at the end.
Cons cells need not have any particular alignment for the execution case.
However, loading unaligned values is expensive, so arguably the 32-bit relative
addresses should be aligned. Doing this yields something like this:

| <3-byte nop> e8 <32-bit head ptr> <3-byte nop> e9 <32-bit tail ptr>

The unpacking function is a little more complex than it is for interpreted
lists:

| unpack_cons:
    movq (%rax), %rbx
    lea 5(%rax), %rcx           <- assuming no padding
    testb %bl, $0xe8
    addl 1(%rax), %ecx
    jne unpack_trivial_cons
    lea 10(%rax), %rdx
    addl 6(%rax), %edx
    push %rdx
    push %rcx
    jmp end
  unpack_trivial_cons:
    xorq %rdx, %rdx
    push %rdx
    push %rcx

There is probably a more efficient way to write this, but there are certainly
more instructions this way. (There could hardly not be; the first representation
was just logical data.)

Cache utilization.
It's probably safe to assume that the implementation will either be CPU-bound or
cache-bound, and as applications become larger it is likely to be the latter.
Anything that reduces the code size is probably worth it, within reason.

__
meta::note('left-associative-consing', <<'__');
Left-associative consing.
The main reason I want to cons from the left has to do with notational familiarity. I find it more natural to write things like 'f 3 4' than '4 3 f', just because it looks more like
applicative notation (though it is fundamentally different). However, it creates a few problems for lower-level notation. In particular:

| a b c d -> (((nil :: a) :: b) :: c) :: d) -> e8 d e8 c e8 b e8 a c3

So ultimately, the only stage at which the cons tree is reversed is in the initial parse phase -- this is a little counterintuitive, but otherwise fine. Trees are probably also serialized in
reverse, so that the parser can be treated as a projection into list-space. For now, the reverse-consing notation is fine.

__
meta::note('list-ambiguity', <<'__');
List ambiguity.
Does tail call optimization make lists ambiguous? Consider:

| [x y z]               <- e8 zz e8 yy e9 xx
  cons [x y] :< [z]     <- e8 zz e9 AA ... AA: e8 yy e9 xx
  cons [[w x] y] <: [z] <- e8 zz e9 AA ... AA: e8 yy e9 BB
                                       ... BB: e8 xx e9 ww

The third case is identical to this:

| cons [w x y] <: [z]   <- e8 zz e9 AA ... AA: e8 yy e8 xx e9 ww

The only difference is prefused consing, but this is not a reliable indicator
since it depends on the ordering of potentially unrelated cons operations.

Therefore, we cannot encode tail calls as a reader optimization.

__
meta::note('native-execution', <<'__');
Native execution.
Canard doesn't have a garbage collector initially, so how should the initial execution model work? It is unclear whether the native environment should even provide an allocation function at
all; maybe this is best left to the standard library. Maybe the initial environment uses a linear stack and provides no allocation other than mmap(). The other stuff could be built as custom
managed heaps on top of this.

There's a lot to recommend this approach. The problem is that the main environment is likely to have a representation that differs from list-based environments, which means that potentially
more code is required to work with it.

__
meta::note('no-need-for-callcc', <<'__');
No need for callcc.
r< and r> serve the same purpose that callcc normally would. The reason is
simple: every function call is a callcc operation, since the program is
implicitly CPS-converted by return jumping. This is more intuitive in
concatenative than in applicative style (though it's also true in the latter: a
function call involves consuming and producing stack values and symmetrically
jumping into and out of the function).

__
meta::note('numbers', <<'__');
Numbers.
Canard doesn't need a way to represent all numeric literals. It just needs to express each byte value and provide some arithmetic operators. So, as part of the boot image, there are 255
functions:

| 00 01 02 ... 0f 10 11 12 ... fe ff

Each of these pushes a single byte value onto the stack. It is not too difficult to build a list->number compiler from there: [00 12 50 10] -> 0x00125010, for instance (or big-endian,
depending on the compiler).

This removes the numeric-parsing case from the boot compiler/interpreter, which is ideal. Now all non-bracket words can be treated exactly the same way.

__
meta::note('optimization', <<'__');
Optimization.
Optimization libraries will probably fall into one of two categories. High-level optimizers remove unnecessary operations from a function by detecting invariants. Low-level optimizers find
ways to encode various operations efficiently on the target processor.

Note that high-level optimizers often don't use the usual set of primitives. These are domain-specific languages that know about certain classes of optimizations.

__
meta::note('parameter-space', <<'__');
Unary continuations.
One-to-one mapping of values to values; functions are guaranteed to be unary. No ability to delete values or return multiples directly. (Especially with currying.)

Stack-based concatenative.
Tacit programming focuses on stack top. The stack can be virtualized. Continuations have explicit arity and can be implemented using immutable conses for stack cells. Values that are not
literals are anonymous. Many-to-many mapping of values to values, but locality is constrained by stack variability.

The stack has a single focus point, and consuming a value yields an additional unique focus point. So tacit programming is possible at the expense of some shuffling. The linguistic tradeoff is
stack swapping to avoid explicit value specification. (Why not just use local variables to solve this problem?)

__
meta::note('permutation', <<'__');
Stack permutation.
What is the most concise, systematic way to permute the stack? Having a series of operators dedicated for the purpose seems like a reasonable solution if a solid basis exists, but I get the
sense that no such basis exists at the moment. Maybe I'm wrong about this. But it probably varies widely across implementations; Forth and Joy wouldn't use the same primitives.

  Stashing.
  It needs to be possible to grab values from the data stack, ignore them, and restore them later on. The initial Canard implementation uses 'stash' to do this; 'stash [f]' executes 'f' on the
  tail of the stack, restoring the head afterwards. This concept could be generalized to stash multiple stack entries rather than just one.

  Shuffling.
  All forms of shuffling, dropping, and duplication can be generalized into a permutation vector. Permutation could be implemented like this:

  | permute n [i1 i2 ... ik]

  The idea is that the top n items would be dropped, then replaced by items at i1, i2, ..., ik in the original stack. For instance, swap would be defined as 'permute 2 [1 0]'. Drop is 'permute
  1 []'. Dup is 'permute 1 [0 0]'. Get is 'permute 0 cons []'.

A better idea.
There is no reason to make permutation general-purpose, since arguably the stack is used with fixed arity. Therefore, we can abbreviate by providing a series of stack transformations up-front,
akin to the usual dup, swap, drop, etc. These are more compact, however:

| %0     <- identity (not provided)
  %0a    <- dup
  %0b    <- nip
  %0c    <- nip2
  %1     <- drop
  %1a    <- identity (not provided)
  %2ab   <- identity (not provided)
  %2ba   <- swap
  %3cba  <- swap around middle item
  %4badc <- swap two pairs, within each
  %4cdab <- swap two pairs, each intact
  ...

Up to four stack items can be rearranged into any order. This requires about 300 predefined functions, but these functions can be assembled into a small algebra. Stashing also works by using
predefined functions for up to four levels:

| ^1 [f] x y z     = x f y z
  ^2 [f] x y z     = x y f z
  ^3 [f] x y z t   = x y z f t
  ^4 [f] x y z t u = x y z t f u

__
meta::note('prefused-conses', <<'__');
Prefused conses.
Cons cells are immutable, so there isn't a real reason to fragment them prematurely. Instead, we can prefuse them; runs of sequential atoms can be represented in a linear string. This
completes the CPS-conversion and inlines things in the process. For example:

| = 'foo [bar bif baz]

Here, the definitions of bar, bif, and baz can be inlined into a single mega-cons:

| [baz definition] [bif definition] [bar definition] 0f1f80 00000000 c3

The only difficulty is that we need to know where each sub-definition begins and ends. It should be possible to do this by inserting three-byte nop instructions and using the ModR/M byte to
encode the length of the current 'instruction'. For example:

| 0f1f 09 [baz definition: 9 bytes] 0f1f 0b [bif definition: 11 bytes] 0f1f 08 [bar definition: 8 bytes] 0f1f 80 00000000 c3
  ^                                 ^                                  ^                                 ^

The jump targets are marked with carets. It's important to refer to the nop instructions because these encode the length of the next list entry.

Update: function definitions can't be inlined due to the structural inspection problem. Instead, each defined symbol needs to have an identity (probably a memory address; these identities can
be opaque), and this identity needs to be the referent of the head of a cons. Inlining should happen inside the compiler, which is defined in user-space.

Allocating prefused data.
In a case like the map function, we can allocate a prefused cons easily enough by having the allocator hand us memory towards the end, not the beginning, of the heap. We can then request more
chunks and see whether they are contiguous. This means that the allocator needs to know how we're representing cons cells, and must be aware of the implicit sequencing going on. The GC must be
able to do the same thing in order to collect prefused segments that are no longer in use:

| 0f1f 05 ... 0f1f 08 ... (live set ->) 0f1f 03 ... 0f1f 80 00000000 c3
  |---------------------|
   this needs to be GC'd
                                <---- |
       future conses onto the same tail

__
meta::note('primitives', <<'__');
Primitives.
Canard needs to provide a few primitives in order to do anything at all. These are baked into any ELF images generated by the compiler and then encoded as symbol targets.

__
meta::note('queue', <<'__');
Queue.
The machine pushes a return address when you jump using e8. If you treat the
return address as a continuation (which it is), then you have a form of CPS
going on. So the roles of the data and return stacks become blurred.

Forth, for obvious and good reasons, separates the two stacks by their intended
use, but we don't have to do this. We can give the user a double stack instead:

| | <- stack 1 ----> |  ....  | <---- stack 2 -> |
                   rdi        rsp

It is straightforward to provide functions that move values from one stack to
the other:

| r<: popq %rax
      stosq

| r>: movq -8(%rdi), %rax
      lea -8(%rdi), %rdi
      pushq %rax

Doing it this way removes the need for the stash command, which is a good thing.
However, it may pose challenges when it comes to mixing return addresses and
data, depending on the granularity of continuations.

Doing it this way also more closely resembles a classical Turing machine, which
could prove useful (though I have no idea how at the moment).

Problems with data-stack CPS.
The biggest problem with this design is probably that r< and r> must work around
their own immediate continuations.

__
meta::note('quotation', <<'__');
Quotation.
There are some strange things happening around quoted symbols. Here are the specifics:

| 1. E[s] for some symbol s is the same as E[D[s]], where D[s] is the definition of s.
  2. The prefix ' returns a function which pushes the given symbol onto the data stack.
  3. E[:: x y] = E[x] I[y], not E[x] E[y].
  4. I[s] = E[s] for any symbol.
  5. I[:: x y] pushes :: x y onto the data stack.

The whole point behind the E/I distinction is that lists are quoted when in the head position. We want evaluation to distribute only across list tails, not heads. Therefore, we need to define
two separate functions to handle this case.

__
meta::note('return-stack-operators', <<'__');
Return stack operators.
Note: This design is incomplete; calling conventions need to deal with the
return continuation more explicitly than this.

Return stack values are manipulated using r< and r>. However, there is some
subtlety to think about here. The reason is that each one of these is a function
call; therefore, here's what happens when you use one:

| continuation r< x y ... =[1] (definition of r<) [continuation] x y ...
                          =[2] [continuation] y ...
                          =[3] continuation y ...

The transition from [1] to [2] above involved putting x onto the return stack.
Here's what r< looks like in assembly language:

| pop %rbx      <- continuation
  pop %rax      <- data to push onto return stack
  stosq         <- push onto return stack
  jmp *%rbx     <- invoke continuation

The definition of r> is similar:

| pop %rbx              <- continuation
  movq -8(%rdi), %rax   <- load value from return stack into %rax
  lea  -8(%rdi), %rdi
  pushq %rax            <- push onto data stack
  jmp *%rbx             <- invoke continuation

So far so good. The problem is that the enclosing function has its own
continuation that needs to be dealt with.

__
meta::note('self-defining-symbols', <<'__');
Self-defining symbols.
It's tempting to have symbols be self-defining; that is, no quotation form is
used during definitions:

| foo [bar]             <- if 'foo' is unbound, binds 'foo' to [bar]
  foo                   <- since 'foo' is now bound, evaluates to [bar]

The problem with this approach is that it makes analysis difficult, but it's
unclear how much of a problem this is considering that analysis is difficult
with the usual quote-define model as well.

Caveat: Undetectable library collision.
This is bad. Suppose you have two libraries that attempt to define the same
symbol. Then you'll end up executing code that looks something like this:

| x [definition 2]
  ...
  x [definition 1]

The problem here is that x [definition 2] will use the existing definition of x,
as if this had happened:

| definition 1 [definition 2]
  ...
  x [definition 1]

This happens because symbol definition syntax is identical to usage syntax, so
there is no opportunity to throw an error. I'm not convinced that this is a
problem, outside of making Canard irrepressibly hostile to collaboration.

__
meta::note('self-hosting', <<'__');
Self-hosting.
The execution model as implemented in the bootstrap compiler is too high-level. Here's the definition of the evaluation function, assuming two functions r< and r> from Forth:

| . :: x y -> .i y r< [. x]   .i :: x y -> :: x y
  . []     -> . r>            .i []     -> []
  . _      -> _               .i _      -> . D[_]

This isn't quite right, but it is the right idea. The r< function doesn't make sense in Canard because of the explicitness of composition.

__
meta::note('stack-representation', <<'__');
Stack representation.
Canard uses multiple stacks to execute a program. The central one is the data stack; this is the only stack that is implicitly accessed by primitive functions, and this stack maintains
pointers to the others. The other primary stack is used for return addresses.

Every stack is encoded as an immutable linked list and can be manipulated as such. In fact, the data stack can be accessed in a first-class way as well.

Function calls.
Canard doesn't provide a native calling convention; as such, stack commands aren't really functions. The function call abstraction is a by-product of the way the evaluation function (.) works.
Here are the relevant expansions:

| . :: x y -> . @ y r< [. x]
  . []     -> . r>

Here, the recursive definition is really a way to encode a jump operation since all calls are tail calls. The "current continuation" can be pushed onto the data stack as a list using @cc. The
return stack is used only in the explicit context implied by r< and r>; the interpreter itself doesn't do anything particularly interesting with it.

Note: This evaluation strategy imposes a significant amount of GC overhead. It may be worth reconsidering. However, I think there are allocation heuristics that can be used to ameliorate the
effect.

__
meta::note('symbol-resolution', <<'__');
Symbol resolution.
The biggest reason to dynamically inline symbols is to allow the dictionary to
use a linear-time lookup strategy without negatively impacting invocation
performance. We can't do eager compilation like Forth because Canard supports
self-reference inside sublists. (Forth doesn't have lists, so this wouldn't make
sense there.)

No dynamic rewriting needs to happen at all if we can avoid a linear-time
lookup. I don't mind using one extra jump per function call; this is a constant
overhead and is relatively trivial. We just can't search the symbol table on
every occurrence.

__
meta::note('symbol-rewriting', <<'__');
Symbol rewriting.
Now that all symbols within a list share a calling convention, we can look again
at dynamic symbol-resolution rewriting. Specifically, can we reliably identify
monomorphic call sites and rewrite them?

A monomorphic call site is defined as one that, regardless of inputs, always
calls the same block of code (or, in this case, symbol). We don't want to
complexify the base layer too much, but anything goes if it makes the difference
between tail call optimization and stack overflows.

We can't just rewrite the location five bytes before the return address, since
the return address might be a tail call proxy. Instead, we need to explicitly
invoke a patchup function that fixes the invocation site.

__
meta::note('symbols', <<'__');
Symbols.
A symbol is a mutable (!) key/value mapping. On x86 it is encoded as an optional 32-bit nop tag (the string data) followed by a 32-bit relative jump. The jump target is changed to reflect
changes to the symbol's definition. Symbols don't themselves add a return address to the stack because their calling context will generally be a list. The only case when it isn't is when the
symbol is quoted:

| = 'foo 'bar

In this case, the jump address of 'foo is assigned to be the code address of 'bar. This works since the symbol's string data is encoded as a nop and will therefore be ignored by the processor.
So technically, each 'inlined' = operation ends up adding two instructions of overhead -- but does not use any additional stack frames, making it a function alias from a space perspective.

Quoting.
Is quoting native to the syntax? It doesn't need to be; we can get a quoted symbol by taking the head of a single-element list: :h [foo] is equivalent to 'foo, for example. Maybe quotation is
some form of prefix macro implemented within Canard itself.

__
meta::note('why-continuations', <<'__');
Why implement continuations.
It may not be necessary to implement any sort of CPS natively. The reason is that concatenative programs are much easier to transform than applicative ones. The program is arguably already
CPS-converted; the evaluation function can be easily modified to maintain a heap-allocated return stack.

Cases where continuations are useful.
There are two cases where continuations are particularly compelling. One is to implement coroutines, and the other is to implement backtracking search algorithms.

__
meta::parent('binary', <<'__');
function::compile-binary  15c3a0dcde65f6244f8f474c1c6ce95c
meta::type::binary        3a80e9982dedb950aa1a9ae301670dc4
parent::vim-highlighters  8078e5ca5df7d57111c89bd271da2be3
retriever::bin            24b2382d3f002ee325963a5c652c53ff
vim_highlighter::binary   8603da089ca7db891109715911bfe0d1

__
meta::parent('canard-object', <<'__');
function::canard-pack   1baa1b17104517b0670946e937df3e78
meta::type::canard      ee0b958db0f8b728c95edf7a27132ef2
parent::binary          e850caa55334c3a62f8f9fc6843dea4a
parent::preprocessor    2567b838746513aebb0157d34f3ca461
parent::sdoc            cc6d4d782f4baa6303bf278e3f5c40f8
parent::text            2144c9c5c3fed3d2968d2c4880bfb825
retriever::canard-pack  0752d53db63bb0fc6df5bfc16c3eac10

__
meta::parent('git-integration', <<'__');
function::gU    f15ab8170ea981dd7b216c75af5d3f63
function::ga    505b3d9a22ca7cf04c60bda01ff3f140
function::gc    0378d3a25fad4fa0feff9cb50c0c5d89
function::gd    cff1e868c7c69780a2263c8c7fd75f90
function::gl    492e2750409588f8b61a8b8e339e42c1
function::gs    4ea8aeccb36ab83702062e4359e8600b
function::gu    fdd2e61e0ea981dda6d407df63c0e47e
parent::object  3dc7a5b337ee134dc2212bfd380760f0

__
meta::parent('notes', <<'__');
function::note    c6d52ffe73cd48cd95fdc561c59d9f63
function::notes   7229b326ac8686b2db6de98496bc7527
meta::type::note  f81bea58841a438e4ee34608ab4f54c0
parent::object    3dc7a5b337ee134dc2212bfd380760f0

__
meta::parent('object', <<'__');
bootstrap::html                         f44dd03cb0c904b3a5f69fbda5f018d0
bootstrap::initialization               170e6ce82d2db886e908918cb132bb4e
bootstrap::perldoc                      5793df44bdd2526bb461272924abfd4b
function::ad                            9220b9dc131f8f79878a6209adfe8ef2
function::alias                         8eeeeb4e064ef3aba7edf8f254427bc2
function::cat                           f684de6c8776617a437b76009114f52e
function::cc                            12ea9176e388400704d823433c209b7a
function::ccc                           d151a9793edd83f80fb880b7f0ab9b34
function::child                         957c1bd528bbe7046442ec15ad9e2095
function::clone                         bb42e04e10a8e54e88786b6fbc4fb213
function::cp                            3fe69d1b58d90045ad520048977538c4
function::create                        d65deb895a848b32d3d7ed92e81e8cb0
function::current-state                 6f03f86f1901e9ef07fdb5d4079a914c
function::cwd                           fd9b58e76c474a8fe93dc3abdccb8857
function::disable                       53b449708cc2ffdefa352e53bb7d847d
function::edit                          6e5bd5f35ff9cf66edd2d2d9943a7b4e
function::edit-self                     71790df00f941ed9b56e17f789b93871
function::enable                        7de1cedc36841f5de8f9fdfbc3b65097
function::expanded-bootstrap            7ea5eb3e6a715cddcdfd85ae688286e1
function::export                        2374cd1dbf7616cb38cafba4e171075d
function::extern                        1290a5223e2824763eecfb3a54961eff
function::grep                          55c3cea8ff4ec2403be2a9d948e59f14
function::hash                          6ee131d093e95b80039b4df9c7c84a02
function::hook                          675cdb98b5dd8567bdd5a02ead6184b5
function::hooks                         3d989899c616f7440429a2d9bf1cc44b
function::identity                      6523885762fcc2f354fc25cf6ed126ce
function::import                        5d0f0634cbd01274f2237717507198a2
function::initial-state                 03d8ed608855a723124e79ca184d8e73
function::is                            41564c8f21b12ab80824ac825266d805
function::load-state                    b6cf278a1f351f316fa6e070359b6081
function::lock                          5d8db258704e6a8623fac796f62fac02
function::ls                            01a23d51d5b529e03943bd57e33f92df
function::metadata-from                 51f238bfe3d4a0e98df376da46f1f70e
function::mv                            ccd000960db4cf627d9246c43d87ba4c
function::name                          955ba2d1fe1d67cd78651a4042283b00
function::parents                       3da9e63b5aae9e2f5dcc946a86d166aa
function::perl                          9f9fd744f0ed225ad8fb3b79fa53dd9a
function::rd                            2adb16d7e819d2e87a27201744a581e7
function::reload                        1589f4cf8374e0011991cb8907afca3e
function::rm                            6f6fd7a6c25558eb469d78ea888f8551
function::rmparent                      fc2884910a6939a47898a778f277332c
function::save                          3cbe5c3735ee4ff99cb60ccf68bc8b91
function::save-state                    5af59ebc4ad8965767e4dc106d3b557e
function::serialize                     a6513c3e0724f9a1d85847d7002910f1
function::serialize-single              8bac97e94a1162947d274421053387b0
function::sh                            1b2f542ca9dd63ad437058b7f6f61aac
function::shb                           21139548efb79500d9c999dba024ab32
function::shell                         a87f389b94713e5855e62241d649d01d
function::size                          69f6ab4a100c6ef05d4d41510004d645
function::snapshot                      56939a47f2758421669641e15ebd66eb
function::state                         ef2051d9fe0684044d0f3df752e0c949
function::touch                         3991b1b7c7187566f50e5e58ce01fa06
function::unlock                        b4aac02f7f3fb700acf4acfd9b180ceb
function::update                        ac391dc90e507e7586c81850e7c2ecdd
function::update-from                   6d72dd26078dd6ef11dbb021bd3d4997
function::usage                         5bdd370f5a56cfbf199e08d398091444
function::verify                        0c0cc1dfeab7d705919df122f7850a4f
indicator::cc                           3db7509c521ee6abfedd33d5f0148ed3
indicator::locked                       fc2b4f4ca0d6a334b9ac423d06c8f18c
indicator::path                         b5e2cb524caa0283f713a0ddf9f4c162
internal_function::around_hook          129aaec0550d3de6c00208104c0fdcef
internal_function::associate            55f202ffdbc6b9005e53d3e82f5f9bfe
internal_function::attribute            dd6f010f9688977464783f60f5b6d3dd
internal_function::attribute_is         d28ac825b3937029386372c560a65775
internal_function::cache                eb9da45580a9ac0882baf98acd2ecd60
internal_function::chmod_self           2035e861eedab55ba0a9f6f5a068ca70
internal_function::dangerous            46c4baaa214ab3d05af43e28083d5141
internal_function::debug_trace          0faf9d9f4159d72dfe4481f6f3607ce1
internal_function::execute              f0924e087d978ff2ab1e117124db3042
internal_function::exported             ae35afef7d4762f2818aee5872c75be0
internal_function::extension_for        9de8261d69cc93e9b92072b89c89befd
internal_function::fast_hash            ee5eba48f837fda0fe472645fdd8899a
internal_function::file::read           e647752332c8e05e81646a3ff98f9a8e
internal_function::file::write          460e2343283eb9fd0e1815389f4e07e6
internal_function::fnv_hash             c36d56f1e13a60ae427afc43ba025afc
internal_function::hypothetically       b83e3f894a6df8623ccd370515dfd976
internal_function::internal::main       4bd4381e1e63689984066485ae399f91
internal_function::invoke_editor_on     5eb976796f0ec172d6ec036116a2f41e
internal_function::is_locked            da12ced6aa38295251f7e748ffd22925
internal_function::namespace            784d2e96003550681a4ae02b8d6d0a27
internal_function::parent_attributes    f6ccfaa982ab1a4d066043981aaca277
internal_function::parent_ordering      57b6da88f76b59f3fed9abfa61280e5e
internal_function::retrieve             721a6800f328da05047fd7392758f55d
internal_function::retrieve_with_hooks  0f1b0220ccd973d57a2e96ff00458cf2
internal_function::select_keys          a5e3532ec6d58151d0ee24416ea1e2b5
internal_function::separate_options     2dd1026a0f157c7c65bb9f3d18936206
internal_function::strip                14f490b10ebd519e829d8ae20ea4d536
internal_function::table_display        d575f4dc873b2e0be5bd7352047fd904
internal_function::temporary_name       6f548d101fc68356515ffd0fc9ae0c93
internal_function::translate_backtrace  d77a56d608473b3cd8a3c6cb84185e10
internal_function::with_cwd             928bae9caa3cb212f0c5c977ba55166c
internal_function::with_exported        df345d5095d5ed13328ddd07ea922b36
internal_function::with_fork            b252464d1efd12dc4a5ee6890076b6a9
library::process                        9fe4e2320eae9f6661a6eb6e777fb6ca
library::shell                          f561500cf223df1bf6daf43af93577a5
library::terminal                       7e2d045782405934a9614fe04bcfe559
message_color::cc                       2218ef0f7425de5c717762ffb100eb43
message_color::state                    03621cd6ac0b1a40d703f41e26c5807f
message_color::states                   ac66eeeff487b5f43f88a78ea18b3d56
meta::configure                         69c2e727c124521d074fde21f8bbc4db
meta::externalize                       aa44e27e0bbee6f0ca4de25d603a1fc7
meta::functor::editable                 48246c608f363de66511400e00b26164
meta::type::alias                       889d26d2df385e9ff8e2da7de4e48374
meta::type::bootstrap                   51108ab2ddb8d966e927c8f62d9ef3e5
meta::type::cache                       9267171f2eace476f64a1a670eaaf2c7
meta::type::data                        120e1649a468d3b3fd3fb783b4168499
meta::type::function                    8ea626198861dc59dd7f303eecb5ff88
meta::type::hook                        ff92aef328b6bdc6f87ddd0821f3e42f
meta::type::inc                         78e0375b6725487cb1f0deca41e96bbe
meta::type::indicator                   feb54a2624e6983617685047c717427f
meta::type::internal_function           eff3cf31e2635f51c83836f116c99d2f
meta::type::library                     7622e8d65e03066668bade74715d65ad
meta::type::message_color               557a1b44979cbf77a7251fbdc4c5b82c
meta::type::meta                        c6250056816b58a9608dd1b2614246f8
meta::type::parent                      09d1d03379e4e0b262e06939f4e00464
meta::type::retriever                   71a29050bf9f20f6c71afddff83addc9
meta::type::state                       84da7d5220471307f1f990c5057d3319
retriever::file                         3bbc9d8a887a536044bafff1d54def7e
retriever::global                       4fe8df0cca548075169968772843a156
retriever::id                           4da6080168d32445150cc4200af7af6e
retriever::object                       c7633990b4e01bdc783da7e545799f4f
retriever::perl                         f41938e6dbad317f62abffc1e4d28cca

__
meta::parent('preprocessor', <<'__');
function::preprocess           ab5526a02ff417d4c162357dc327e7c4
meta::type::template           bc4b0c80b5efc716b19e99b832c22bf3
parent::object                 3dc7a5b337ee134dc2212bfd380760f0
retriever::pp                  3b5f5c5d30c5a04f72056dedaacfe7b7
template::comment              dfe273d2dad3d8159b847545e4e5c309
template::eval                 1a0e2124a05056be4abc11803883c294
template::failing_conditional  e3a4523110dd859e828f342185de7c62
template::include              47b5552d609d97fe7f2522d5c1027014
template::pinclude             c07ff79bf8d642cceaa9ef844bfcb189

__
meta::parent('sdoc', <<'__');
function::sdoc            71fa4ee3ae6283a87706e74f9de1de40
function::sdoc-html       b23152b3f5be696e5bae842ec43fc5a4
function::sdoc-markdown   a35a6441dd750466f2d0e636bee2b382
function::sdoc-packed     8ec4975fca7228708baae6ccd241bdbf
function::sdocp           c3d738d982ba87418a298ff58478a85b
meta::type::sdoc          22cd7315641d38c9d536344e83c36bed
meta::type::slibrary      95474943c4a5f8ff17d3cf66ddb7c386
parent::object            3dc7a5b337ee134dc2212bfd380760f0
retriever::code-sdoc      03b87ff8d1ecf7594db9ca0669fc69a1
retriever::html-sdoc      8ab7705d03276945b23a71677153233c
retriever::markdown-sdoc  67c34ba8223ec36a3ae018e411354db2
retriever::sdoc           75181c270d3a3de6500e5ccdb8208f65
retriever::sdoc-packed    f7116f96adf2c748ac1991f4d7c1792b
retriever::sdocp          fcfcf3a7de79d7d863402b9ccfcac3c4

__
meta::parent('text', <<'__');
function::wrapped-near   b34731b33db1a4b56c724b1aa5c97f6d
parent::object           3dc7a5b337ee134dc2212bfd380760f0
retriever::wrapped-near  1b00aeef9dbd19633a1fedc443b846e8

__
meta::parent('vim-highlighters', <<'__');
function::vim                cf9e37026f6cd1499a6dd258fbbcd060
meta::type::vim_highlighter  27990fddb6d7bd383b55dbdfee0d148d
parent::object               3dc7a5b337ee134dc2212bfd380760f0

__
meta::retriever('bin', <<'__');
# Compiles a binary text file.
my $name = $_[0];
return undef unless $name =~ s/^bin::/binary::/ && defined retrieve($name);
compile_binary($name);

__
meta::retriever('canard-pack', <<'__');
return undef unless $_[0] =~ /^canard-pack::(.*)$/;
defined retrieve($1) ? canard_pack($1) : undef;

__
meta::retriever('code-sdoc', <<'__');
# Lets you specify the SDoc extension manually. For instance:
# code.js::sdoc::foo causes sdoc::foo to be SDoc-rendered using Javascript comments.
my ($name) = @_;
return undef unless $name =~ s/^code\.(\w+)::// and defined retrieve($name);
sdoc($name, $1);

__
meta::retriever('file', '-f $_[0] ? file::read($_[0]) : undef;');
meta::retriever('global', <<'__');
# Returns the global data stashed at the end of this perl object
$_[0] eq 'self' ? $global_data : undef;

__
meta::retriever('html-sdoc', <<'__');
my ($attribute) = @_;
return undef unless $attribute =~ s/^html::/sdoc::/ and defined retrieve($attribute) || $attribute =~ s/^sdoc::// && defined retrieve($attribute);
sdoc_html($attribute);

__
meta::retriever('id', '$_[0] =~ /^id::/ ? substr($_[0], 4) : undef;');
meta::retriever('markdown-sdoc', <<'__');
my ($attribute) = @_;
return undef unless $attribute =~ s/^markdown::/sdoc::/ and defined retrieve($attribute) || $attribute =~ s/^sdoc::// && defined retrieve($attribute);
sdoc_markdown($attribute);

__
meta::retriever('object', <<'__');
# Fetch a property from another Perl object. This uses the 'cat' function.
return undef unless $_[0] =~ /^object::(.*?)::(.*)$/ && -x $1 && qx|$1 is '$2'|;
join '', qx|$1 cat '$2'|;

__
meta::retriever('perl', <<'__');
# Lets you use the result of evaluating some Perl expression
return undef unless $_[0] =~ /^perl::(.*)$/;
eval $1;

__
meta::retriever('pp', <<'__');
return undef unless namespace($_[0]) eq 'pp';
my $attr = retrieve(attribute($_[0]));
defined $attr ? preprocess($attr) : undef;
__
meta::retriever('sdoc', <<'__');
exists $data{"sdoc::$_[0]"} ? sdoc("sdoc::$_[0]", extension_for($_[0])) : undef;

__
meta::retriever('sdoc-packed', <<'__');
return undef unless $_[0] =~ /^sdoc-packed::(.*)$/;
exists $data{"sdoc::$1"} ? sdoc_packed("sdoc::$1") : undef;

__
meta::retriever('sdocp', <<'__');
return undef unless $_[0] =~ /^sdocp::(.*)$/;
exists $data{"sdoc::$1"} ? sdocp("sdoc::$1") : undef;

__
meta::retriever('wrapped-near', <<'__');
return undef unless $_[0] =~ /^wrapped-near\.(\d+)::(.*)$/;
defined retrieve($2) ? wrapped_near(retrieve($2), $1) : undef;

__
meta::sdoc('binary::boot', <<'__');
Canard bootstrap interpreter | Spencer Tipping
Licensed under the terms of the MIT source code license

Introduction.
This file defines a binary ELF image that contains a bootstrap canard
interpreter. The implementation is heavily influenced by jonesforth, though the
compiler uses a different output format. Like jonesforth, however, %rsp is used
for the data stack and %rbp is used for the return stack.

Basic syntax used in this file is:

| 1. Address assertion: @!address. Dies unless the next byte will be emitted at
     the given address. I use these to verify/document the code.
  2. Address displacement: @address. Inserts null bytes until the given address
     is reached.
  3. /n/byte - byte repeated n times.

That's about it. The rest is just binary data written verbatim in hex (no
prefix), octal (o prefix), or binary (- prefix).

ELF header.
See elf(5) for details about what this is made of.

# Elf64_Ehdr                    # e_ident
@!00 7f 'ELF                    #   ELF magic
@!04 02                         #   64-bit binary
@!05 01                         #   Two's complement little-endian
@!06 01                         #   Current ELF version
@!07 00                         #   System V UNIX ABI

@!08 00                         #   ABI version
@!09 /7/00                      # padding; end

@!10 02 00                      # e_type    = Executable file
@!12 3e 00                      # e_machine = x86-64
@!14 01 00 00 00                # e_version = current version
@!18 78 00 40 00 /4/00          # e_entry

@!20 40 00 00 00 /4/00          # e_phoff
@!28 00 00 00 00 /4/00          # e_shoff

@!30 /4/00                      # e_flags
@!34 40 00                      # e_ehsize
@!36 38 00                      # e_phentsize
@!38 01 00                      # e_phnum

@!3a 0000                       # e_shentsize
@!3c 0000                       # e_shnum
@!3e 0000                       # e_shstrndx

@!40
# end

# Elf64_Phdr (rwx image -- this contains code and definitions)
@!40 01 00 00 00                # p_type  = PT_LOAD
     07 00 00 00                # p_flags = PT_R | PT_W | PT_X

     00 00 00 00 /4/00          # p_offset (includes ELF header)
     00 00 40 00 /4/00          # p_vaddr
     00 00 00 00 /4/00          # p_paddr
     00 04 00 00 /4/00          # p_filesz
     00 04 00 00 /4/00          # p_memsz
     00 10 00 00 /4/00          # p_align

@!78
# end

@!78 4831 o300 b03c             # syscall = 60 (exit)
     4831 o355                  # status  = 0
     0f05

__
meta::sdoc('canard::lib/canard-linux-x64', <<'__');
Linux/x86-64 Canard compiler | Spencer Tipping
Licensed under the terms of the MIT source code license

Introduction.
This library implements the Canard compiler for Linux on x86-64. The compiler is written in machine language and is self-hosting. It also provides a set of primitives that allow the language
to operate, as well as a core memory image that you can use to create an interpreter instance.

Primitive functions.
Primitives are defined in terms of their machine-language equivalents. The following functions are considered to be primitive:

__
meta::sdoc('canard::lib/comments', <<'__');
Canard standard library: comments | Spencer Tipping
Licensed under the terms of the MIT source code license

Introduction.
This library allows you to use nb[] to write comments. You should include it before including anything else. It also enables shebang-line syntax if you elect to use /usr/bin/env. If you want
to refer to a specific canard interpreter with an absolute path, you'll need to define the interpreter:

| =interpreter '#!/usr/bin/my-canard

= '=interpreter [= %2ba []]
= '#!/usr/bin/env [nb]
= 'nb [%1]

__
meta::sdoc('canard::lib/functional', <<'__');
Canard standard library: function manipulation | Spencer Tipping
Licensed under the terms of the MIT source code license

Piecewise construction.
This serves the purpose of something like 'where' in functional languages. The idea is to provide a series of local definitions that will be inlined into the form in question. This is done
first by defining a substitution function, then deriving a recursive variant from that.

| @/ symbol replacement -> [? :: replacement '%1 [] $= 'symbol %0a]
  %2ba $:                      symbol replacement                       = replacement 'symbol
  :: %2ba ''%1                 replacement 'symbol                      = (:: replacement '%1) 'symbol
  ^1 [:: %2ba '%0a :: [[] $=]] (:: replacement '%1) 'symbol             = (:: replacement '%1) [[] $= 'symbol %0a]
  :+ [?] :+ :: []              (:: replacement '%1) [[] $= 'symbol %0a] = [? (:: replacement '%1) [] $= 'symbol %0a]

The @/ function constructs a closure, but does not actually perform substitution. To do that, you would use :*, :~, :**, or :~*.

= '@/ [:+ [?] :+ :: [] ^1 [:: %2ba '%0a :: [[] $=]] :: %2ba '%1 %2ba $:]

Composition.
Functions can be composed by appending their list forms. . @o f g x is the same as f g x.

= '@o [:+ @: ^1 [@:]]

Objectification.
Functions can be objectified (converted to anonymous list form) by using @ on any symbols that are present. Lists pass through unmodified, since they are already functions.

= '@: [? [] [@] :? %0a]

__
meta::sdoc('canard::lib/iteration', <<'__');
Canard iteration library | Spencer Tipping
Licensed under the terms of the MIT source code license

Introduction.
This library provides trivial functions to iterate over numeric quantities.

= '#* [? [#* ^2 [.] %2abba - 01] [%2] %0a]

| #* n [f] x -> #* (n-1) [f] f (n-1) x
  %2abba - 1 n [f] x               = (n-1) [f] [f] (n-1) x
  #* ^2 [.]  (n-1) [f] [f] (n-1) x = #* (n-1) [f] f (n-1) x

| #* 0 [f] x -> x
  %2 0 [f] x = x

__
meta::sdoc('canard::lib/lexical', <<'__');
Canard standard library: lexical scope | Spencer Tipping
Licensed under the terms of the MIT source code license

Introduction.
Writing concatenative code is interesting, but sometimes it's useful to have the usual lexical scoping with destructuring binds. Canard supports this via quotation and compiles the lexical
forms into concatenative ones. Right now it does not support applicative destructuring; the only thing you can destructure is the stack itself.

Implementation.
The implementation combs through the given code and performs beta-rewriting, doing nothing to avoid collision cases. This means that you should be very careful about lexical closures, as they
may exhibit incorrect identifier collisions. The most obvious case is defining the constant function k:

| = 'k fn [x] [fn [y] [x]]
  = 'return-y k 'y
  return-y 5                    <- returns 5, not y

This happens because fn is not aware of the global fn[] binding when it compiles the block into stack code; the second fn[] binding won't be compiled until the first function is run. In
general, it is unsafe to use lexical closures at all because of this problem; however, this can be fixed by replacing 'y' with a gensym at compile-time. Another option is to compile the inner
fn[] first, yielding concatenative code that invokes the 'x' function:

| = 'k fn [x] fn [y] [x]

This will force fn [y] [x] to be compiled ahead of time, yielding [x %% 1 []].

__
meta::sdoc('canard::lib/lists', <<'__');
Canard standard library: list functions | Spencer Tipping
Licensed under the terms of the MIT source code license

Introduction.
This library defines useful list functions, including map, flatmap, filter, append, etc. All traversal goes from right to left, as per the natural cons cell ordering.

Recursive flatmap definition.
This is the :** equivalent of flat-map. It gives you the flexibility to replace one item with many, even within a sublist. Behavior is this:

| :~* [f] :: x y -> :: [] :~ [:~* [f]] :: x y   (lists are singly-mapped)
  :~* [f] _      -> :! f _                      (item results are coerced into lists if not already)

= ':~* [? [:: [] :~ :: [:~*]] [:! .] :? %0b]

List fold.
This function folds up the elements of a list, passing them to a binary function. The function, presumably, returns one value for every two it consumes; but it is free to do other things as
well.

| :/ n [f] :: x y -> f :/ n [f] x y
| :/ n [f] []     -> n

= ':/ [? [. ^1 [:/] %0b ^2 [:^]] [^1 [%2]] :? %0b]

List filter.
Expects a conditional argument for each element; this result is then given to ? to decide whether to keep or discard the element in question. The filter function should consume the element.

| :% [f] :: x y -> ? [:: :% [f] x y] [:% [f] x] (f y)
  ^1 [:^]             [f] :: x y         = [f] x y
  %3aba ^2 [%0aa]     [f] x y            = [f] x [f] y y
  :% ^2 [.]           [f] x [f] y y      = (:% [f] x) (f y) y
  ? [:: %2ba] [] %2ba (:% [f] x) (f y) y = ? [:: (:% [f] x) y] [(:% [f] x)] (f y)

| :% [f] []     -> []

= ':% [? [? [:: %2ba] [] %2ba :% ^2 [.] %3aba ^2 [%0aa] ^1 [:^]] [%1] :? %0b]

Flatmap definition.
Flat-map is structured just like map. The only difference is that the intermediate results are appended rather than consed. Also, it needs to make a recursive call to itself rather than to the
map function.

= ':~ :** @o @/ ':* [':~] @/ ':: [':+] @ ':*

Recursive map.
Like the regular map function, but distributes over sub-lists recursively. This is primarily useful for editing functions in their list form.

| :** [f] :: x y -> :* [:** [f]] :: x y
  :** [f] _      -> f _

You can use it like this: :** [+ 1] [1 2 [3 4] 5], yielding [2 3 [4 5] 6]. Note that you cannot use this function until map (:*) has been defined.

= ':** [? [:* :: [:**]] [.] :? %0b]

Map-function template.
Here is the derivation for flatmap:

| :~ [f] :: x y -> :+ :~ [f] x f y
  ^1 [:^] [f] :: x y  = [f] x y
  %2aba   [f] x y     = [f] x [f] y
  ^2 [.]  [f] x [f] y = [f] x f y
  :+ :~   [f] x f y   = :+ :~ [f] x f y

Notice, however, that a number of functions here can be replaced to do other things. For instance, the :+ invocation in flatmap can be replaced with ::, at which point the function will be a
regular map. What we really have is a 'map template' that can be specialized in different ways. To leverage this, we first define the map function, then we write the map template, then we
write flatmap as a substitution over the definition of 'map'.

= ':* [? [:: :* ^2 [.] %2aba ^1 [:^]] [%1] :? %0b]

List append.
Appends each element from the second list to the first. The head of :+ x y is the head of y. Here are the cases:

| :+ _ :: t h -> :: :+ _ t h
  :+ x []     -> x

= ':+ [? [:: :+ ^1 [:^]] [%1 %2ba] :? %0b]

List length.
This is the usual recursive length function over lists.

= ':# [? [+ 01 :# :t] [00 %1] :? %0a]

List access.
This function gives you the nth element, where 0 is the head (last element) of the list. If you request something beyond the end of the list, an error occurs.

= ':@ [:h #* %2ba [:t %1]]

Cons accessors.
These retrieve the individual pieces of a cons cell. :! conses an object to nil if it is not already a cons. : is a unary 'return' function for the list monad.

= ':! [? [] [:] :? %0a]
= ':h [%1 :^]
= ':t [%2a :^]

= ': [:: []]

__
meta::sdoc('canard::stdlib', <<'__');
- include sdoc-packed::canard::lib/lexical
- include sdoc-packed::canard::lib/lists
- include sdoc-packed::canard::lib/iteration
- include sdoc-packed::canard::lib/functional
- include sdoc-packed::canard::lib/comments

__
meta::template('comment', '\'\';     # A mechanism for line or block comments.');
meta::template('eval', <<'__');
my $result = eval $_[0];
terminal::warning("Error during template evaluation: $@") if $@;
$result;
__
meta::template('failing_conditional', <<'__');
my ($commands)    = @_;
my $should_return = $commands =~ / if (.*)$/ && ! eval $1;
terminal::warning("eval of template condition failed: $@") if $@;
$should_return;
__
meta::template('include', <<'__');
my ($commands) = @_;
return '' if template::failing_conditional($commands);
join "\n", map retrieve($_), split /\s+/, $commands;
__
meta::template('pinclude', <<'__');
# Just like the regular include, but makes sure to insert paragraph boundaries
# (this is required for SDoc to function properly).

my ($commands) = @_;
return '' if template::failing_conditional($commands);
my $text = join "\n\n", map retrieve($_), split /\s+/, $commands;
"\n\n$text\n\n";
__
meta::vim_highlighter('binary', <<'__');
" Language: Binary text
" Creator:  Spencer Tipping <spencer@spencertipping.com>
" License:  MIT source code license

syn case match

syn match bt_line_comment       /#.*/
syn match bt_binary_octet       /-[01]\{8\}/
syn match bt_octal_byte         /o[0-3][0-7]\{2\}/
syn match bt_hex_octet          /[0-9a-f]\{2\}/
syn match bt_repetition_prefix  -/\d\+/-
syn match bt_address            -@[0-9a-f]\+-
syn match bt_place              -@![0-9a-f]\+-
syn match bt_debug              -@?\w\+-
syn match bt_ascii              -'\S\+-

hi link bt_line_comment      Comment
hi link bt_binary_octet      Keyword
hi link bt_octal_byte        Keyword
hi link bt_hex_octet         Type
hi link bt_repetition_prefix Preproc
hi link bt_address           Preproc
hi link bt_place             Identifier
hi link bt_debug             Comment
hi link bt_ascii             String

__
meta::vim_highlighter('canard', <<'__');
" Canard language highlighter | Spencer Tipping
" Licensed under the terms of the MIT source code license

if !exists("main_syntax")
  if version < 600
    syntax clear
  elseif exists("b:current_syntax")
    finish
  endif
  let main_syntax = "canard"
endif

syn case match
setlocal iskeyword=33-90,92,94-127

syn region  canard_bracketed_region     matchgroup=canard_comment           start=/\[/ end=/]/ contained transparent
syn region  canard_comment              matchgroup=canard_comment_delimiter start=/nb\s*\[/ end=/]/ contains=canard_bracketed_region
syn region  canard_quoted_symbol        start=/\<'/ end=/[ \n\t\r\[\]]\@=\|$/
syn match   canard_bracket              /:\?\[/
syn match   canard_bracket              /]/
syn match   canard_number               /\<[0-9a-f][0-9a-f]\>/

syn match   canard_stack_intrinsic      /\<%[01234][a-d]\{0,4\}\>/
syn match   canard_stack_intrinsic      /\<^[1234]\>/

syn keyword canard_def                  =
syn keyword canard_intrinsic            $< $\| $# $ $^ $+ $: $. $= ? :? /? :: :^ . @ !
syn keyword canard_arithmetic           + - * / % << >> >>> \| & ^ < > <= >= == != === !==

hi link canard_comment                  Comment
hi link canard_comment_delimiter        Special
hi link canard_quoted_symbol            Identifier
hi link canard_def                      Keyword
hi link canard_bracket                  Special
hi link canard_number                   Number
hi link canard_intrinsic                Type
hi link canard_arithmetic               Type
hi link canard_stack_intrinsic          Operator

__
internal::main();

__DATA__
