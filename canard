#!/usr/bin/perl
# 99aeabc9ec7fe80b1b39f5e53dc7e49e      <- self-modifying Perl magic
# state:  90074f9587187dfbd7764b3edd66f6fe
# istate: 77e5405b73f003c53735d5ae63d61ad9
# id:     a91f89c1b23f2df1762a7d9a838bcf20

# This is a self-modifying Perl file. I'm sorry you're viewing the source (it's
# really gnarly). If you're curious what it's made of, I recommend reading
# http://github.com/spencertipping/writing-self-modifying-perl.
#
# If you got one of these from someone and don't know what to do with it, send
# it to spencer@spencertipping.com and I'll see if I can figure out what it
# does.

# For the benefit of HTML viewers (this is a hack):
# <div id='cover' style='position: absolute; left: 0; top: 0; width: 10000px; height: 10000px; background: white'></div>

$|++;

my %data;
my %transient;
my %externalized_functions;
my %datatypes;

my %locations;          # Maps eval-numbers to attribute names

my $global_data = join '', <DATA>;

sub meta::define_form {
  my ($namespace, $delegate) = @_;
  $datatypes{$namespace} = $delegate;
  *{"meta::${namespace}::implementation"} = $delegate;
  *{"meta::$namespace"} = sub {
    my ($name, $value, %options) = @_;
    chomp $value;
    $data{"${namespace}::$name"} = $value unless $options{no_binding};
    &$delegate($name, $value) unless $options{no_delegate}}}

sub meta::eval_in {
  my ($what, $where) = @_;

  # Obtain next eval-number and alias it to the designated location
  @locations{eval('__FILE__') =~ /\(eval (\d+)\)/} = ($where);

  my $result = eval $what;
  $@ =~ s/\(eval \d+\)/$where/ if $@;
  warn $@ if $@;
  $result}

meta::define_form 'meta', sub {
  my ($name, $value) = @_;
  meta::eval_in($value, "meta::$name")};

meta::meta('configure', <<'__');
# A function to configure transients. Transients can be used to store any number of
# different things, but one of the more common usages is type descriptors.

sub meta::configure {
  my ($datatype, %options) = @_;
  $transient{$_}{$datatype} = $options{$_} for keys %options;
}
__
meta::meta('externalize', <<'__');
# Function externalization. Data types should call this method when defining a function
# that has an external interface.

sub meta::externalize {
  my ($name, $attribute, $implementation) = @_;
  my $escaped = $name;
  $escaped =~ s/[^A-Za-z0-9:]/_/go;
  $externalized_functions{$name} = $externalized_functions{$escaped} = $attribute;
  *{"::$name"} = *{"::$escaped"} = $implementation || $attribute;
}

__
meta::meta('functor::editable', <<'__');
# An editable type. This creates a type whose default action is to open an editor
# on whichever value is mentioned. This can be changed using different flags.

sub meta::functor::editable {
  my ($typename, %options) = @_;

  meta::configure $typename, %options;
  meta::define_form $typename, sub {
    my ($name, $value) = @_;

    $options{on_bind} && &{$options{on_bind}}($name, $value);

    meta::externalize $options{prefix} . $name, "${typename}::$name", sub {
      my $attribute             = "${typename}::$name";
      my ($command, @new_value) = @_;

      return &{$options{default}}(retrieve($attribute)) if ref $options{default} eq 'CODE' and not defined $command;
      return edit($attribute) if $command eq 'edit' or $options{default} eq 'edit' and not defined $command;
      return associate($attribute, @new_value ? join(' ', @new_value) : join('', <STDIN>)) if $command eq '=' or $command eq 'import' or $options{default} eq 'import' and not defined $command;
      return retrieve($attribute)}}}
__
meta::meta('type::alias', <<'__');
meta::configure 'alias', inherit => 0;
meta::define_form 'alias', sub {
  my ($name, $value) = @_;
  meta::externalize $name, "alias::$name", sub {
    # Can't pre-tokenize because shell::tokenize doesn't exist until the library::
    # namespace has been evaluated (which will be after alias::).
    shell::run(shell::tokenize($value), shell::tokenize(@_));
  };
};
__
meta::meta('type::binary', <<'__');
meta::functor::editable 'binary', extension => '.binary', default => 'edit', inherit => 0;

__
meta::meta('type::bootstrap', <<'__');
# Bootstrap attributes don't get executed. The reason for this is that because
# they are serialized directly into the header of the file (and later duplicated
# as regular data attributes), they will have already been executed when the
# file is loaded.

meta::configure 'bootstrap', extension => '.pl', inherit => 1;
meta::define_form 'bootstrap', sub {};
__
meta::meta('type::cache', <<'__');
meta::configure 'cache', inherit => 0;
meta::define_form 'cache', \&meta::bootstrap::implementation;
__
meta::meta('type::data', 'meta::functor::editable \'data\', extension => \'\', inherit => 0, default => \'cat\';');
meta::meta('type::function', <<'__');
meta::configure 'function', extension => '.pl', inherit => 1;
meta::define_form 'function', sub {
  my ($name, $value) = @_;
  meta::externalize $name, "function::$name", meta::eval_in("sub {\n$value\n}", "function::$name");
};
__
meta::meta('type::gdb', <<'__');
meta::configure 'gdb', extension => '.gdb', inherit => 1;
meta::define_form 'gdb', \&meta::bootstrap::implementation;

__
meta::meta('type::hook', <<'__');
meta::configure 'hook', extension => '.pl', inherit => 0;
meta::define_form 'hook', sub {
  my ($name, $value) = @_;
  *{"hook::$name"} = meta::eval_in("sub {\n$value\n}", "hook::$name");
};
__
meta::meta('type::inc', <<'__');
meta::configure 'inc', inherit => 1, extension => '.pl';
meta::define_form 'inc', sub {
  use File::Path 'mkpath';
  use File::Basename qw/basename dirname/;

  my ($name, $value) = @_;
  my $tmpdir   = basename($0) . '-' . $$;
  my $filename = "/tmp/$tmpdir/$name";

  push @INC, "/tmp/$tmpdir" unless grep /^\/tmp\/$tmpdir$/, @INC;

  mkpath(dirname($filename));
  unless (-e $filename) {
    open my $fh, '>', $filename;
    print $fh $value;
    close $fh;
  }
};
__
meta::meta('type::indicator', <<'__');
# Shell indicator function. The output of each of these is automatically
# appended to the shell prompt.

meta::configure 'indicator', inherit => 1, extension => '.pl';
meta::define_form 'indicator', sub {
  my ($name, $value) = @_;
  *{"indicator::$name"} = meta::eval_in("sub {\n$value\n}", "indicator::$name");
};
__
meta::meta('type::internal_function', <<'__');
meta::configure 'internal_function', extension => '.pl', inherit => 1;
meta::define_form 'internal_function', sub {
  my ($name, $value) = @_;
  *{$name} = meta::eval_in("sub {\n$value\n}", "internal_function::$name");
};
__
meta::meta('type::library', <<'__');
meta::configure 'library', extension => '.pl', inherit => 1;
meta::define_form 'library', sub {
  my ($name, $value) = @_;
  meta::eval_in($value, "library::$name");
};
__
meta::meta('type::message_color', <<'__');
meta::configure 'message_color', extension => '', inherit => 1;
meta::define_form 'message_color', sub {
  my ($name, $value) = @_;
  terminal::color($name, $value);
};
__
meta::meta('type::meta', <<'__');
# This doesn't define a new type. It customizes the existing 'meta' type
# defined in bootstrap::initialization. Note that horrible things will
# happen if you redefine it using the editable functor.

meta::configure 'meta', extension => '.pl', inherit => 1;
__
meta::meta('type::note', 'meta::functor::editable \'note\', extension => \'.sdoc\', inherit => 0, default => \'edit\';');
meta::meta('type::parent', <<'__');
meta::define_form 'parent', \&meta::bootstrap::implementation;
meta::configure 'parent', extension => '', inherit => 1;
__
meta::meta('type::retriever', <<'__');
meta::configure 'retriever', extension => '.pl', inherit => 1;
meta::define_form 'retriever', sub {
  my ($name, $value) = @_;
  $transient{retrievers}{$name} = meta::eval_in("sub {\n$value\n}", "retriever::$name");
};
__
meta::meta('type::sdoc', <<'__');
# A meta-type for other types. So retrieve('js::main') will work if you have
# the attribute 'sdoc::js::main'. The filename will be main.js.sdoc.

meta::functor::editable 'sdoc', inherit => 1, extension => sub {
  extension_for(attribute($_[0])) . '.sdoc';
};
__
meta::meta('type::slibrary', <<'__');
meta::configure 'slibrary', extension => '.pl.sdoc', inherit => 1;
meta::define_form 'slibrary', sub {
  my ($name, $value) = @_;
  meta::eval_in(sdoc("slibrary::$name"), "slibrary::$name");
};

__
meta::meta('type::state', <<'__');
# Allows temporary or long-term storage of states. Nothing particularly insightful
# is done about compression, so storing alternative states will cause a large
# increase in size. Also, states don't contain other states -- otherwise the size
# increase would be exponential.

# States are created with the save-state function.

meta::configure 'state', inherit => 0, extension => '.pl';
meta::define_form 'state', \&meta::bootstrap::implementation;
__
meta::meta('type::template', <<'__');
meta::configure 'template', extension => '.pl', inherit => 1;
meta::define_form 'template', sub {
  my ($name, $value) = @_;
  meta::externalize "template::$name", "template::$name", meta::eval_in("sub {\n$value\n}", "template::$name");
};
__
meta::meta('type::vim_highlighter', <<'__');
# Vim highlighters don't need to be inherited. The reason is that they are most
# often configured from the parent object using the 'vim' function. They are
# rarely sent to anyone else and configured after the fact.

meta::configure 'vim_highlighter', extension => '.vim', inherit => 0;
meta::define_form 'vim_highlighter', \&meta::bootstrap::implementation;

__
meta::alias('eb', 'edit sdoc::binary::boot');
meta::alias('ed', 'edit sdoc::gdb::boot-debug');
meta::alias('erf', 'edit function::render');
meta::alias('ev', 'edit vim_highlighter::canard');
meta::alias('repl', 'sh boot/interpreter');
meta::bootstrap('html', <<'__');
<html>
  <head>
  <meta http-equiv='content-type' content='text/html; charset=UTF-8' />
  <link rel='stylesheet' href='http://spencertipping.com/perl-objects/web/style.css'/>

  <script src='http://ajax.googleapis.com/ajax/libs/jquery/1.5.2/jquery.min.js'></script>
  <script src='http://spencertipping.com/caterwaul/caterwaul.all.min.js'></script>
  <script src='http://spencertipping.com/montenegro/montenegro.client.js'></script>
  <script src='http://spencertipping.com/perl-objects/web/attribute-parser.js'></script>
  <script src='http://spencertipping.com/perl-objects/web/interface.js'></script>
  </head>
  <body></body>
</html>

__
meta::bootstrap('initialization', <<'__');
#!/usr/bin/perl
# 99aeabc9ec7fe80b1b39f5e53dc7e49e      <- self-modifying Perl magic
# state:  __state
# istate: __istate
# id:     __id

# This is a self-modifying Perl file. I'm sorry you're viewing the source (it's
# really gnarly). If you're curious what it's made of, I recommend reading
# http://github.com/spencertipping/writing-self-modifying-perl.
#
# If you got one of these from someone and don't know what to do with it, send
# it to spencer@spencertipping.com and I'll see if I can figure out what it
# does.

# For the benefit of HTML viewers (this is a hack):
# <div id='cover' style='position: absolute; left: 0; top: 0; width: 10000px; height: 10000px; background: white'></div>

$|++;

my %data;
my %transient;
my %externalized_functions;
my %datatypes;

my %locations;          # Maps eval-numbers to attribute names

my $global_data = join '', <DATA>;

sub meta::define_form {
  my ($namespace, $delegate) = @_;
  $datatypes{$namespace} = $delegate;
  *{"meta::${namespace}::implementation"} = $delegate;
  *{"meta::$namespace"} = sub {
    my ($name, $value, %options) = @_;
    chomp $value;
    $data{"${namespace}::$name"} = $value unless $options{no_binding};
    &$delegate($name, $value) unless $options{no_delegate}}}

sub meta::eval_in {
  my ($what, $where) = @_;

  # Obtain next eval-number and alias it to the designated location
  @locations{eval('__FILE__') =~ /\(eval (\d+)\)/} = ($where);

  my $result = eval $what;
  $@ =~ s/\(eval \d+\)/$where/ if $@;
  warn $@ if $@;
  $result}

meta::define_form 'meta', sub {
  my ($name, $value) = @_;
  meta::eval_in($value, "meta::$name")};

__
meta::bootstrap('perldoc', <<'__');
=head1 Self-modifying Perl script

=head2 Original implementation by Spencer Tipping L<http://spencertipping.com>

The prototype for this script is licensed under the terms of the MIT source code license.
However, this script in particular may be under different licensing terms. To find out how
this script is licensed, please contact whoever sent it to you. Alternatively, you may
run it with the 'license' argument if they have specified a license that way.

You should not edit this file directly. For information about how it was constructed, go
to L<http://spencertipping.com/writing-self-modifying-perl>. For quick usage guidelines,
run this script with the 'usage' argument.

=cut

__
meta::cache('parent-identification', <<'__');
/home/spencertipping/bin/object 99aeabc9ec7fe80b1b39f5e53dc7e49e
/home/spencertipping/bin/waul-object 4e04fdb8e560f4dd2ca4880b91a8e2ea
/home/spencertipping/conjectures/perl-objects/js 246bc56c88e8e8daae3737dbb16a2a2c
/home/spencertipping/conjectures/perl-objects/sdoc a1e8480e579614c01dabeecf0f963bcc
binary 93194ecf50e38f2adb6e273909e007b5
c 8118b5c1b0aa08bce7e839df4ab80199
canard-object 3d87f1a4b0694cfebcbfd589fa5ed5dd
gdb-object 0991d4c4fa56bb2f5e1df44104e0c63f
git-integration 9fabb9b6f2f374c35ddcc26549ac2b65
notes a9e5975593ed5d90d943ad98405c71e5
object 99aeabc9ec7fe80b1b39f5e53dc7e49e
preprocessor 70dae4b46eb4e06798ec6f38d17d4c7b
sdoc a1e8480e579614c01dabeecf0f963bcc
text ffe5790f4c605b3bd73283f7c5e57dc5
vim-highlighters 902333a0bd6ed90ff919fe8477cb4e69
__
meta::cache('parent-state', <<'__');
0991d4c4fa56bb2f5e1df44104e0c63f 7cb3eb1528cd4cebd387899d594eae30
3d87f1a4b0694cfebcbfd589fa5ed5dd 18d86397c52aeb07c61f70b50fb20703
70dae4b46eb4e06798ec6f38d17d4c7b e25c4729aff094da49d7b9903452bcea
902333a0bd6ed90ff919fe8477cb4e69 5bb14b94b33b7e5f476e5ce905d81e6f
93194ecf50e38f2adb6e273909e007b5 72357050e5a4792419569e6e8c61b3b3
99aeabc9ec7fe80b1b39f5e53dc7e49e 20cbfd8b1bd09b6a60c0eea0f9ca525d
9fabb9b6f2f374c35ddcc26549ac2b65 63765c7bc2addea974ed38cb6c2733b2
a1e8480e579614c01dabeecf0f963bcc dc33b10238e896bad155335a5e119e2e
a9e5975593ed5d90d943ad98405c71e5 d892ffa1342e024c3e8957940bbffbfe
ffe5790f4c605b3bd73283f7c5e57dc5 f9de507ed237ef8eab194127348de26d
__
meta::data('author', 'Spencer Tipping');
meta::data('default-action', 'shell');
meta::data('license', <<'__');
MIT License
Copyright (c) 2010 Spencer Tipping

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
__
meta::data('permanent-identity', 'a91f89c1b23f2df1762a7d9a838bcf20');
meta::function('ad', <<'__');
my ($options, @paths) = separate_options(@_);
@{$transient{path}} = () if $$options{-c};
return @{$transient{path}} = () unless @paths;
push @{$transient{path}}, @paths;

__
meta::function('alias', <<'__');
my ($name, @stuff) = @_;
@_ ? @stuff ? around_hook('alias', @_, sub {associate("alias::$name", join(' ', @stuff), execute => 1)})
            : retrieve("alias::$name") // "Undefined alias $name"
   : table_display([select_keys('--namespace' => 'alias')], [map retrieve($_), select_keys('--namespace' => 'alias')]);

__
meta::function('cat', 'join "\\n", retrieve(@_);');
meta::function('cc', <<'__');
# Stashes a quick one-line continuation. (Used to remind me what I was doing.)
@_ ? associate('data::current-continuation', hook('set-cc', join(' ', @_))) : retrieve('data::current-continuation');
__
meta::function('ccc', 'rm(\'data::current-continuation\');');
meta::function('child', <<'__');
around_hook('child', @_, sub {
  my ($child_name) = @_;
  clone($child_name);
  enable();
  qx($child_name update-from $0);
  terminal::info("$child_name\'s identity is " . join '', qx($child_name identity));
  disable()});

__
meta::function('clone', <<'__');
my ($options, @files) = separate_options(@_);
for my $file (@files) {
  around_hook('clone', $file, sub {
    hypothetically(sub {
      # Assign a new object identity.
      rm('data::permanent-identity');
      identity();

      file::write($file, serialize(), noclobber => 1);
      chmod(0700, $file)})})}

__
meta::function('compile-binary', <<'__');
# Compiles binary-text to binary output. The binary-text is tokenized and then
# compiled, where each token is one of the following:
#
# Literal:
# /[0-9a-f]{2}/         <- single byte in hex
# /o[0-3][0-7]{2}/      <- single byte in octal
# /-[01]{8}/            <- single byte in binary
# /'\S+/                <- bytes in ASCII
#
# Placement (low-level):
# /@![0-9a-f]+/         <- place assertion (die unless next byte is at place)
# /@[0-9a-f]+/          <- place seek (emit null bytes until next byte is place)
# /@\?(\w\+)/           <- debugging: print \1 followed by its location
#
# Repetition:
# /\/(\d+)\//           <- repeat next byte \1 times
#
# Assembler:
# /::([^' ]\+)/         <- create label \1 pointing to next byte offset
# /:\d*\[([^\]]+)\]/    <- insert bytes resulting from expression evaluation
#
# The assembler gives you a language you can use to evaluate expressions. It's
# ultimately a preprocessor transform to Perl; that is, a few string
# substitutions are made and then Perl evaluates the result, dropping that into
# the generated image. The assembler dies unless the expression's byte size
# matches the number before the open bracket. Here are the preprocessor
# transformations:
#
# s/:</$o/g                             <- offset at beginning of expression
# s/:>/($o + $e{size})/g                <- offset at end of expression
# s/::?([^' ]+)/$places{'\1'}/g         <- label references
# s/L(\d)?(.*)/&$le(\1, \2)/g           <- little-endian integer encoding
# s/B(\d)?(.*)/&$be(\1, \2)/g           <- big-endian integer encoding
#
# Little-endian and big-endian encoders take a numeric argument indicating how
# many bytes should be encoded. This number is limited only by Perl's numerical
# precision, and by the fact that you have only one digit to specify it. Results
# are sign-extended to the requested byte width.
#
# You can use 0 width to evaluate an expression with no output; that is, some
# form of side-effect. In this case, the bracketed expression's value is ignored
# and no length check occurs.
#
# Note that all expressions are evaluated after the basic image has been
# generated. This allows you to use forward references to labels.

my $text = join ' ', map split(/\s+/), split /(?:\s|^)#.*/m, retrieve($_[0]);
my $hex_letters = '0123456789abcdef';

my %places;
my %expressions;
my @output;

my $offset     = 0;
my $next       = 1;
my $repeat     = sub {$next = $_[0]; ''};                       # Repeaters have no output
my $repetition = sub {my $count = $next; $next = 1; $count};
my $ascii      = sub {$_[0]};
my $binary     = sub {my $total = 0; $total = ($total << 1) + substr($_[0], $_, 1)                      for 0 .. 7; chr($total) x &$repetition()};
my $octal      = sub {my $total = 0; $total = ($total << 3) + index($hex_letters, substr($_[0], $_, 1)) for 0 .. 2; chr($total) x &$repetition()};
my $hex        = sub {my $total = 0; $total = ($total << 4) + index($hex_letters, substr($_[0], $_, 1)) for 0 .. 1; chr($total) x &$repetition()};
my $until      = sub {my $address = hex $_[0]; "\0" x ($address - $offset)};
my $debug      = sub {printf STDERR "%s: 0x%x\n", $_[0], $offset; ''};
my $place      = sub {die sprintf "incorrect address at place %x (actual is %x)", hex $_[0], $offset unless $offset == hex $_[0]; ''};
my $label      = sub {die sprintf "label %s is defined twice" if exists $places{$_[0]}; $places{$_[0]} = $offset; ''};
my $expression = sub {push @{$expressions{$offset} ||= []}, {size => $_[0], e => $_[1]}; 'E' x $_[0]};

my $emit       = sub {my ($s) = @_; $offset += length $s; push @output, $s};

my @tokens = split m#('\S+ | -[01]{8} | o[0-3][0-7]{2} | [0-9a-f]{2} | @\?\S+ |
                      @!?[0-9a-f]+ | /\d+/ | ::\S+ | :\d*\[[^\]]+\])#x, $text;

&$emit(/^'(\S+)/        ? &$ascii($1)  : /^@\?(\S+)/          ? &$debug($1) :
       /^-([01]{8})/    ? &$binary($1) : /^o([0-3][0-7]{2})/  ? &$octal($1) :
       /^@!([0-9a-f]+)/ ? &$place($1)  : /^@([0-9a-f]+)/      ? &$until($1) :
       /^\/(\d+)\//     ? &$repeat($1) : /^[0-9a-f]{2}/       ? &$hex($_)   :

       /^::(\S+)/            ? &$label($1)          :
       /^:(\d*)\[([^\]]+)\]/ ? &$expression($1, $2) : '') for @tokens;

# Now go through and evaluate every expression. Right now the spaces for the
# results contain repetitions of the byte 'E'.
my $concatenated = join '', @output;

my $le = sub {join '', map chr($_[1] >> $_ * 8 & 255),         0 .. $_[0] - 1};
my $be = sub {join '', map chr($_[1] >> $_ * 8 & 255), reverse 0 .. $_[0] - 1};

for my $o (sort {$a <=> $b} keys %expressions) {
  for my $e (@{$expressions{$o}}) {
    my $expression = $$e{e};
    my $size       = $$e{size};

    $_ = $expression;

    s/:</$o/g, s/:>/($o + $size)/g;

    # :: is unchecked, : is checked
    s/::([^' ]+)/\$places{'$1'}/g;
    s-:([^' ]+)-(\$places{'$1'} // die '$1 is not a defined label')-g;

    s/L([1-9])?(.+)/&\$le(($1) || $size, $2)/g;
    s/B([1-9])?(.+)/&\$be(($1) || $size, $2)/g;

    my $result = eval;
    die "error evaluating $_ as $expression: $@" if $@;

    if ($size) {
      die "result of $_ as $expression is " . length($result) .
          " bytes; expected $size"
          if length($result) != $size;

      substr($concatenated, $o, $size) = $result;
    }
  }
}

$concatenated;

__
meta::function('cp', <<'__');
my $from = shift @_;
my $value = retrieve($from);
associate($_, $value) for @_;
__
meta::function('create', <<'__');
my ($name, $value) = @_;
around_hook('create', $name, $value, sub {
  return edit($name) if exists $data{$name};
  associate($name, defined $value ? $value : '');
  edit($name) unless defined $value});

__
meta::function('current-state', 'serialize(\'-pS\');');
meta::function('cwd', <<'__');
use Cwd qw/getcwd/;
getcwd();

__
meta::function('disable', 'hook(\'disable\', chmod_self(sub {$_[0] & 0666}));');
meta::function('edit', <<'__');
my ($options, @names) = separate_options(@_);
@names = select_keys('--criteria' => "^$$options{'--prefix'}.*" . join('.*', @names), %$options) if $$options{'--prefix'};

my ($name, @others) = @names;
die "cannot edit multiple attributes simultaneously (others are @others)" if @others;
die "$name is virtual or does not exist" unless exists $data{$name};
die "$name is inherited; use 'edit $name -f' to edit anyway" unless is($name, '-u') || is($name, '-d') || exists $$options{'-f'};

my $extension = extension_for($name);
around_hook('edit', @_, sub {
  associate($name, invoke_editor_on($data{$name} // '', %$options, attribute => $name, extension => $extension), execute => 1)});

save() unless $data{'data::edit::no-save'} or state() eq $transient{initial};
'';

__
meta::function('edit-self', <<'__');
$global_data = invoke_editor_on($global_data);
save();

__
meta::function('enable', 'hook(\'enable\', chmod_self(sub {$_[0] | $_[0] >> 2}));');
meta::function('expanded-bootstrap', <<'__');
# Write headers into the bootstrap section. There is some subtle stuff going on
# here with the istate header. The idea is to provide other objects a very quick
# way to see whether our state has changed, but we don't want false positives.
# We would get a false positive if, for instance, we included the contents of
# parent:: attributes in the istate hash. The reason is that the parent::
# attribute contains a hash of every attribute provided by that parent, so any
# change in the parent would impact the istate of the child.
#
# The best way to deal with this is to treat parent:: attributes as being
# opaque; we record their existence or nonexistence, but we don't record their
# contents. We also look only at inheritable and unique attributes and fail to
# consider global state.

my $bootstrap_text = retrieve('bootstrap::initialization');
my $state          = state();
my $istate         = state('-iGP');
my $object_id      = identity();

$bootstrap_text =~ s/__state/$state/g;
$bootstrap_text =~ s/__istate/$istate/g;
$bootstrap_text =~ s/__id/$object_id/g;

$bootstrap_text;

__
meta::function('export', <<'__');
# Exports data into a text file.
#   export attr1 attr2 attr3 ... file.txt
my $name = pop @_;
@_ or die 'Expected filename';
file::write($name, join "\n", retrieve(@_));
__
meta::function('extern', '&{$_[0]}(retrieve(@_[1 .. $#_]));');
meta::function('gU', <<'__');
sh("git push @_");

__
meta::function('ga', <<'__');
sh("git add @_");

__
meta::function('gc', <<'__');
around_hook('git-commit', @_, sub {
  my $message = join ' ', @_;
  $message =~ s/'/\\'/g;
  enable();
  sh("git commit -a -m '$message'");
  disable()});

__
meta::function('gd', <<'__');
sh('git diff');

__
meta::function('gl', <<'__');
sh("git log @_");

__
meta::function('grep', <<'__');
# Looks through attributes for a pattern. Usage is grep pattern [options], where
# [options] is the format as provided to select_keys.

my ($pattern, @args)     = @_;
my ($options, @criteria) = separate_options(@args);
my @attributes           = select_keys(%$options, '--criteria' => join('|', @criteria));

$pattern = qr/$pattern/;

my @m_attributes;
my @m_line_numbers;
my @m_lines;

for my $k (@attributes) {
  next unless length $k;
  my @lines = split /\n/, retrieve($k);
  for (0 .. $#lines) {
    next unless $lines[$_] =~ $pattern;
    push @m_attributes,   $k;
    push @m_line_numbers, $_ + 1;
    push @m_lines,        '' . ($lines[$_] // '')}}

unless ($$options{'-C'}) {
  s/($pattern)/\033[1;31m\1\033[0;0m/g for @m_lines;
  s/^/\033[1;34m/o for @m_attributes;
  s/^/\033[1;32m/o && s/$/\033[0;0m/o for @m_line_numbers}

table_display([@m_attributes], [@m_line_numbers], [@m_lines]);
__
meta::function('gs', <<'__');
sh('git status');

__
meta::function('gu', <<'__');
sh("git pull @_");

__
meta::function('hash', 'fast_hash(@_);');
meta::function('hook', <<'__');
my ($hook, @args) = @_;
$transient{active_hooks}{$hook} = 1;
dangerous('', sub {&$_(@args)}) for grep /^hook::${hook}::/, sort keys %data;
@args;
__
meta::function('hooks', 'join "\\n", sort keys %{$transient{active_hooks}};');
meta::function('identity', <<'__');
retrieve('data::permanent-identity') or
associate('data::permanent-identity', fast_hash(join '|', map rand(), 1 .. 32));

__
meta::function('import', <<'__');
my $name = pop @_;
associate($name, @_ ? join('', map(file::read($_), @_)) : join('', <STDIN>)); 
__
meta::function('initial-state', '$transient{initial};');
meta::function('is', <<'__');
my ($attribute, @criteria) = @_;
my ($options, @stuff) = separate_options(@criteria);
exists $data{$attribute} and attribute_is($attribute, %$options);

__
meta::function('load-state', <<'__');
around_hook('load-state', @_, sub {
  my ($state_name) = @_;
  my $state = retrieve("state::$state_name");

  terminal::state('saving current state into _...');
  save_state('_');

  delete $data{$_} for grep ! /^state::/, keys %data;
  %externalized_functions = ();

  terminal::state("restoring state $state_name...");
  meta::eval_in($state, "state::$state_name");
  terminal::error(hook('load-state-failed', $@)) if $@;
  reload();
  verify()});

__
meta::function('lock', 'hook(\'lock\', chmod_self(sub {$_[0] & 0555}));');
meta::function('ls', <<'__');
my ($options, @criteria) = separate_options(@_);
my ($external, $shadows, $sizes, $flags, $long, $hashes, $parent_hashes) = @$options{qw(-e -s -z -f -l -h -p)};
$sizes = $flags = $hashes = $parent_hashes = 1 if $long;

return table_display([grep ! exists $data{$externalized_functions{$_}}, sort keys %externalized_functions]) if $shadows;

my $criteria    = join('|', @criteria);
my @definitions = select_keys('--criteria' => $criteria, '--path' => $transient{path}, %$options);

my %inverses  = map {$externalized_functions{$_} => $_} keys %externalized_functions;
my @externals = map $inverses{$_}, grep length, @definitions;
my @internals = grep length $inverses{$_}, @definitions;
my @sizes     = map sprintf('%6d %6d', length(serialize_single($_)), length(retrieve($_))), @{$external ? \@internals : \@definitions} if $sizes;

my @flags     = map {my $k = $_; join '', map(is($k, "-$_") ? $_ : '-', qw(d i m u))} @definitions if $flags;
my @hashes    = map fast_hash(retrieve($_)), @definitions if $hashes;

my %inherited     = parent_attributes(grep /^parent::/o, keys %data) if $parent_hashes;
my @parent_hashes = map $inherited{$_} || '-', @definitions if $parent_hashes;

join "\n", map strip($_), split /\n/, table_display($external ? [grep length, @externals] : [@definitions],
                                                    $sizes ? ([@sizes]) : (), $flags ? ([@flags]) : (), $hashes ? ([@hashes]) : (), $parent_hashes ? ([@parent_hashes]) : ());

__
meta::function('metadata-from', <<'__');
my ($filename) = @_;
my %metadata;

# Not using file::read because we only need the first few lines.
open my($fh), '<', $filename or return {};
while (<$fh>) {
  /^#\s*(\w+):\s*(.*)$/ and $metadata{$1} = $2;
  last unless /^#/;
}
close $fh;

\%metadata;

__
meta::function('mv', <<'__');
my ($from, $to) = @_;
die "'$from' does not exist" unless exists $data{$from};
associate($to, retrieve($from), execute => 1);
rm($from);

__
meta::function('name', <<'__');
my $name = $0;
$name =~ s/^.*\///;
$name;
__
meta::function('note', <<'__');
# Creates a note with a given name, useful for jotting things down.
my $name = join('-', @_);
create("note::$name");

__
meta::function('notes', 'ls(\'-a\', \'^note::\');');
meta::function('parents', 'join "\\n", grep s/^parent:://o, sort keys %data;');
meta::function('perl', <<'__');
my @result = eval(join ' ', @_);
$@ ? terminal::error($@) : wantarray ? @result : $result[0];

__
meta::function('preprocess', <<'__');
# Implements a simple preprocessing language.
# Syntax follows two forms. One is the 'line form', which gives you a way to specify arguments inline
# but not spanning multiple lines. The other is 'block form', which gives you access to both one-line
# arguments and a block of lines. The line parameters are passed in verbatim, and the block is
# indentation-adjusted and then passed in as a second parameter. (Indentation is adjusted to align
# with the name of the command.)
#
# Here are the forms:
#
# - line arguments to function
#
# - block line arguments << eof
#   block contents
#   block contents
#   ...
# - eof

my ($string, %options) = @_;
my $expansions         = 0;
my $old_string         = '';
my $limit              = $options{expansion_limit} || 100;
my @pieces             = ();

sub adjust_spaces {
  my ($spaces, $string) = @_;
  $string =~ s/^$spaces  //mg;
  chomp $string;
  $string;
}

while ($old_string ne $string and $expansions++ < $limit) {
  $old_string = $string;

  while ((my @pieces = split  /(^(\h*)-\h \S+ \h* \V* <<\h*(\w+)$ \n .*?  ^\2-\h\3$)/xms, $string) > 1 and $expansions++ < $limit) {
    $pieces[1 + ($_ << 2)] =~ /^ (\h*)-\h(\S+)\h*(\V*)<<\h*(\w+)$ \n(.*?) ^\1-\h\4 $/xms && $externalized_functions{"template::$2"} and
      $pieces[1 + ($_ << 2)] = &{"template::$2"}($3, adjust_spaces($1, $5))
      for 0 .. $#pieces / 4;

    @pieces[2 + ($_ << 2), 3 + ($_ << 2)] = '' for 0 .. $#pieces / 4;
    $string = join '', @pieces;
  }

  if ((my @pieces = split     /^(\h*-\h \S+ \h* .*)$/xom, $string) > 1) {
    $pieces[1 + ($_ << 1)] =~ /^ \h*-\h(\S+)\h*(.*)$/xom && $externalized_functions{"template::$1"} and
      $pieces[1 + ($_ << 1)] = &{"template::$1"}($2)
      for 0 .. $#pieces >> 1;

    $string = join '', @pieces;
  }
}

$string;
__
meta::function('rd', <<'__');
if (@_) {my $pattern = join '|', @_;
         @{$transient{path}} = grep $_ !~ /^$pattern$/, @{$transient{path}}}
else    {pop @{$transient{path}}}

__
meta::function('reload', 'around_hook(\'reload\', sub {execute($_) for grep ! /^bootstrap::/, keys %data});');
meta::function('render', <<'__');
my ($options, @stuff) = separate_options(@_);

# Commented out until I write an accurate readme
# file::write('README.md', retrieve('markdown::readme'));

file::write('bin/canard',    compile_binary('pp::binary::boot'), mkpath => 1);
file::write('bin/canard.md', retrieve('markdown::binary::boot'));
terminal::info('image size is ' . length(compile_binary('pp::binary::boot')));

chmod 0700, 'bin/canard';

file::write('doc/canard.vim', retrieve('vim_highlighter::canard'), mkpath => 1);

file::write("doc/$_.md", retrieve("markdown::note::$_"), mkpath => 1)
for grep s/^note:://, sort keys %data;

__
meta::function('rm', <<'__');
around_hook('rm', @_, sub {
  exists $data{$_} or terminal::warning("$_ does not exist") for @_;
  delete @data{@_}});
__
meta::function('rmparent', <<'__');
# Removes one or more parents.
my ($options, @parents) = separate_options(@_);
my $clobber_divergent = $$options{'-D'} || $$options{'--clobber-divergent'};

my %parents = map {$_ => 1} @parents;
my @other_parents = grep !$parents{$_}, grep s/^parent:://, select_keys('--namespace' => 'parent');
my %kept_by_another_parent;

$kept_by_another_parent{$_} = 1 for grep s/^(\S+)\s.*$/\1/, split /\n/o, cat(@other_parents);

for my $parent (@parents) {
  my $keep_parent_around = 0;

  for my $line (split /\n/, retrieve("parent::$parent")) {
    my ($name, $hash) = split /\s+/, $line;
    next unless exists $data{$name};

    my $local_hash = fast_hash(retrieve($name));
    if ($clobber_divergent or $hash eq $local_hash or ! defined $hash) {rm($name) unless $kept_by_another_parent{$name}}
    else {terminal::info("local attribute $name exists and is divergent; use rmparent -D $parent to delete it");
          $keep_parent_around = 1}}

  $keep_parent_around ? terminal::info("not deleting parent::$parent so that you can run", "rmparent -D $parent if you want to nuke divergent attributes too")
                      : rm("parent::$parent")}

__
meta::function('save', <<'__');
around_hook('save', sub {dangerous('', sub {file::write($0, serialize('-V')); $transient{initial} = state()}) if verify()});

__
meta::function('save-state', <<'__');
# Creates a named copy of the current state and stores it.
my ($state_name) = @_;
around_hook('save-state', $state_name, sub {
  associate("state::$state_name", current_state(), execute => 1)});

__
meta::function('sdoc', <<'__');
# Applies SDoc processing to a file or attribute. Takes the file or attribute
# name as the first argument and returns the processed text.

my %comments_for_extension = 
  qw|c     /*,*/  cpp   //    cc   //    h    //    java //  py  #    rb   #    pl  #   pm   #         ml   (*,*)  js  //
     hs    --     sh    #     lisp ;;;   lsp  ;;;   s    #   scm ;;;  sc   ;;;  as  //  html <!--,-->  mli  (*,*)  cs  //
     vim   "      elisp ;     bas  '     ada  --    asm  ;   awk #    bc   #    boo #   tex  %         fss  (*,*)  erl %
     scala //     hx    //    io   //    j    NB.   lua  --  n   //   m    %    php //  sql  --        pov  //     pro %
     r     #      self  ","   tcl  #     texi @c    tk   #   csh #    vala //   vbs '   v    /*,*/     vhdl --     ss  ;;;
     haml  -#     sass  /*,*/ scss /*,*/ css  /*,*/ fig  /   waul #   canard nb[,]|;

# No extension suggests a shebang line, which generally requires # to denote a comment.
$comments_for_extension{''} = '#';

my $generated_string = 'Generated by SDoc';

sub is_code    {map /^\s*[^A-Z\|\s]/o, @_}
sub is_blank   {map /^\n/o, @_}
sub comment    {my ($text, $s, $e) = @_; join "\n", map("$s $_" . (length $e ? " $e" : ''), split /\n/, $text)}

sub paragraphs {map split(/(\n(?:\h*\n)+)/, $_), @_}

my ($filename, $specified_extension) = @_;
my $logical_filename = $filename =~ /^sdoc::(.*)$/ ? $1 : $filename;

# Two possibilities here. One is that the filename is an attribute, in which case
# we want to look up the extension in the transients table. The other is that
# it's a real filename.
my $extension = $specified_extension || extension_for($logical_filename) || ($filename =~ /\.sdoc$/io ? $filename =~ /\.(\w+)\.sdoc$/igo : $filename =~ /\.(\w+)$/igo)[0];
$extension =~ s/^\.//o;

my ($start, $end) = split /,/o, $comments_for_extension{lc $extension} // $comments_for_extension{''} // '#';

join '', map(is_code($_) || is_blank($_) ? ($_ =~ /^\s*c\n(.*)$/so ? $1 : $_) : comment($_, $start, $end), paragraphs retrieve($filename)),
         "\n" . comment($generated_string, $start, $end) . "\n";

__
meta::function('sdoc-html', <<'__');
# Converts SDoc to logically-structured HTML. Sections end up being nested,
# and code sections and examples are marked as such. For instance, here is some
# sample output:

# <div class='section level1'>
#   <h1 class='title'>Foo</h1>
#   <p>This is a paragraph...</p>
#   <p>This is another paragraph...</p>
#   <pre class='code'>int main () {return 0;}</pre>
#   <pre class='quoted'>int main () {return 0} // Won't compile</pre>
#   <div class='section level2'>
#     <h2 class='title'>Bar</h2>
#     ...
#   </div>
# </div>

# It is generally good about escaping things that would interfere with HTML,
# but within text paragraphs it lets you write literal HTML. The heuristic is
# that known tags that are reasonably well-formed are allowed, but unknown ones
# are escaped.

my ($attribute)   = @_;
my @paragraphs    = split /\n(?:\s*\n)+/, retrieve($attribute);

my $known_tags    = join '|', qw[html head body meta script style link title div a span input button textarea option select form label iframe blockquote code caption
                                 table tbody tr td th thead tfoot img h1 h2 h3 h4 h5 h6 li ol ul noscript p pre samp sub sup var canvas audio video strong em];
my $section_level = 0;
my @markup;

my $indent        = sub {'  ' x ($_[0] || $section_level)};
my $unindent      = sub {my $spaces = '  ' x ($section_level - 1); s/^$spaces//gm};

my $escape_all    = sub {s/&/&amp;/g; s/</&lt;/g; s/>/&gt;/g};
my $escape_some   = sub {s/&/&amp;/g; s/<(?!\/|($known_tags)[^>]*>.*<\/\1>)/&lt;/gs};

my $code          = sub {&$escape_all(); &$unindent(); s/^c\n//;                   push @markup, &$indent() . "<pre class='code'>$_</pre>"};
my $quoted        = sub {&$escape_all(); &$unindent(); s/^\|(\s?)/ \1/; s/^  //mg; push @markup, &$indent() . "<pre class='quoted'>$_</pre>"};

my $paragraph     = sub {&$escape_some(); push @markup, &$indent() . "<p>$_</p>"};

my $section       = sub {my $h = $_[0] > 6 ? 6 : $_[0]; push @markup, &$indent($_[0] - 1) . "<div class='section level$_[0]'>", &$indent($_[0]) . "<h$h>$2</h$h>"};
my $close_section = sub {push @markup, &$indent($_[0]) . "</div>"};

my $title = sub {
  my $indentation = (length($1) >> 1) + 1;
  &$close_section($section_level) while $section_level-- >= $indentation;
  &$section($indentation);
  $section_level = $indentation;
};

for (@paragraphs) {
  &$code(),   next unless /^\h*[A-Z|]/;
  &$quoted(), next if     /^\h*\|/;

  &$title(), s/^.*\n// if /^(\s*)(\S.*)\.\n([^\n]+)/ and length("$1$2") < 60 and length("$1$2") - 10 < length($3);
  &$paragraph();
}

&$close_section($section_level) while $section_level--;

join "\n", @markup;

__
meta::function('sdoc-markdown', <<'__');
# Renders a chunk of SDoc as Markdown. This involves converting quoted and
# unquoted code and section headings, but not numbered lists.

my ($attribute)   = @_;
my @paragraphs    = split /\n(?:\s*\n)+/, retrieve($attribute);

my $section_level = 0;
my @markup;

my $indent        = sub {'  ' x ($_[0] || $section_level)};
my $unindent      = sub {my $spaces = '  ' x ($section_level - 1); s/^$spaces//gm; $_};

my $code          = sub {&$unindent(); s/^c\n//;                   push @markup, join("\n", map &$indent(2) . $_, split /\n/)};
my $quoted        = sub {&$unindent(); s/^\|(\s?)/ \1/; s/^  //mg; push @markup, join("\n", map &$indent(2) . $_, split /\n/)};

my $heading       = sub {'#' x $_[0]};
my $section       = sub {&$unindent(); push @markup, &$heading($_[0]) . ' ' . $2};

my $title = sub {
  my $indentation = (length($1) >> 1) + 1;
  &$section($indentation);
  $section_level = $indentation;
};

for (@paragraphs) {
  &$code(),   next unless /^\h*[A-Z|]/;
  &$quoted(), next if     /^\h*\|/;

  &$title(), s/^.*\n// if /^(\s*)(\S.*)\.\n([^\n]+)/ and length("$1$2") < 60 and length("$1$2") - 10 < length($3);
  push @markup, join "\n", map &$unindent(), split /\n/;
}

join "\n\n", @markup;

__
meta::function('sdoc-packed', <<'__');
# An SDoc preprocessor that removes all comment paragraphs. Paragraph breaks
# are preserved, and no "generated by SDoc" string is added.
join "\n", grep /^\s*[^A-Z| ]/, split /\n(?:\s*\n)+/, retrieve(@_);

__
meta::function('sdocp', <<'__');
# Renders an attribute as SDocP. This logic was taken directly from the sdoc script.
my $attribute = retrieve($_[0]);
sub escape {my @results = map {s/\\/\\\\/go; s/\n/\\n/go; s/'/\\'/go; $_} @_; wantarray ? @results : $results[0]}
"sdocp('" . escape($_[0]) . "', '" . escape($attribute) . "');";
__
meta::function('serialize', <<'__');
my ($options, @criteria) = separate_options(@_);
delete $$options{'-P'};

my $partial     = delete $$options{'-p'};
my $criteria    = join '|', @criteria;
my @attributes  = map serialize_single($_), select_keys(%$options, '-m' => 1, '--criteria' => $criteria), select_keys(%$options, '-M' => 1, '--criteria' => $criteria);
my @final_array = @{$partial ? \@attributes : [expanded_bootstrap(), @attributes, 'internal::main();', '', '__DATA__', $global_data]};
join "\n", @final_array;

__
meta::function('serialize-single', <<'__');
# Serializes a single attribute and optimizes for content.

my $name          = $_[0] || $_;
my $contents      = $data{$name};
my $meta_function = 'meta::' . namespace($name);
my $invocation    = attribute($name);
my $escaped       = $contents;
$escaped =~ s/\\/\\\\/go;
$escaped =~ s/'/\\'/go;

return "$meta_function('$invocation', '$escaped');" unless $escaped =~ /\v/;

my $delimiter = '__' . fast_hash($contents);
my $chars     = 2;

++$chars until $chars >= length($delimiter) || index("\n$contents", "\n" . substr($delimiter, 0, $chars)) == -1;
$delimiter = substr($delimiter, 0, $chars);

"$meta_function('$invocation', <<'$delimiter');\n$contents\n$delimiter";

__
meta::function('sh', 'system(@_);');
meta::function('shb', <<'__');
# Backgrounded shell.
with_fork(@_, \&::sh);

__
meta::function('shell', <<'__');
my ($options, @arguments) = separate_options(@_);
$transient{repl_prefix} = $$options{'--repl-prefix'};

terminal::cc(retrieve('data::current-continuation')) if length $data{'data::current-continuation'};
around_hook('shell', sub {shell::repl(%$options)});

__
meta::function('size', <<'__');
my $size = 0;
$size += length $data{$_} for keys %data;
sprintf "   full logical  unique    self\n% 7d % 7d % 7d % 7d", length(serialize()), $size, length(serialize('-up')), length $global_data;

__
meta::function('snapshot', <<'__');
my ($name) = @_;
file::write(my $finalname = temporary_name($name), serialize(), noclobber => 1);
chmod 0700, $finalname;
hook('snapshot', $finalname);
__
meta::function('snapshot-if-necessary', <<'__');
snapshot() if state() ne $transient{initial};

__
meta::function('state', <<'__');
my ($options, @attributes) = separate_options(@_);
@attributes = grep !is($_, '-v'), sort keys %data unless @attributes;
@attributes = grep is($_, '-iu'), @attributes if $$options{'-i'};
@attributes = grep is($_, '-P'),  @attributes if $$options{'-P'};

my $hash = fast_hash(fast_hash(scalar @attributes) . join '|', @attributes);
$hash = fast_hash("$data{$_}|$hash") for @attributes;

$hash = fast_hash(join '|', $hash, grep s/^parent:://, sort keys %data)
if $$options{'-P'};

$$options{'-G'} ? $hash : fast_hash("$global_data|$hash");

__
meta::function('touch', 'associate($_, \'\') for @_;');
meta::function('unlock', 'hook(\'unlock\', chmod_self(sub {$_[0] | 0200}));');
meta::function('update', <<'__');
update_from(@_, grep s/^parent:://o, sort keys %data);

__
meta::function('update-from', <<'__');
# Upgrade all attributes that aren't customized. Customization is defined when the data type is created,
# and we determine it here by checking for $transient{inherit}{$type}.

# Note that this assumes you trust the remote script. If you don't, then you shouldn't update from it.

around_hook('update-from-invocation', separate_options(@_), sub {
  my ($options, @targets) = @_;
  my %parent_id_cache    = cache('parent-identification');
  my %parent_state_cache = cache('parent-state');
  my %already_seen;

  @targets or return;

  my @known_targets     = grep s/^parent:://, parent_ordering(map "parent::$_", grep exists $data{"parent::$_"}, @targets);
  my @unknown_targets   = grep ! exists $data{"parent::$_"}, @targets;
  @targets = (@known_targets, @unknown_targets);

  my $save_state        = $$options{'-s'} || $$options{'--save'};
  my $no_state          = $$options{'-S'} || $$options{'--no-state'};
  my $no_verify         = $$options{'-V'} || $$options{'--no-verify'};
  my $no_parents        = $$options{'-P'} || $$options{'--no-parent'} || $$options{'--no-parents'};
  my $force             = $$options{'-f'} || $$options{'--force'};
  my $clobber_divergent = $$options{'-D'} || $$options{'--clobber-divergent'};

  my $can_skip_already_seen = !($$options{'-K'} || $$options{'--no-skip'}) &&
                              !$force && !$clobber_divergent;

  save_state('before-update') unless $no_state;

  for my $target (@targets) {
    dangerous("updating from $target", sub {
    around_hook('update-from', $target, sub {
      my $target_filename = strip(qx(which $target)) || $target;
      my %parent_metadata = %{metadata_from($target_filename)};
      terminal::warning("$target_filename has no externally visible metadata (makes updating slower)") unless $parent_metadata{id};

      my $identity = $parent_id_cache{$target} ||= $parent_metadata{id} || join '', qx($target identity);
      next if $can_skip_already_seen and
              exists $data{"parent::$target"} and
              $already_seen{$identity} || $parent_state_cache{$identity} eq $parent_metadata{istate};

      my $attributes = join '', qx($target ls -ahiu);
      my %divergent;
      die "skipping unreachable $target" unless $attributes;

      # These need to come after the reachability check so that we retry against
      # other copies in case something fails.
      ++$already_seen{$identity};
      $parent_state_cache{$identity} = $parent_metadata{istate} || join '', qx($target state -iPG);

      for my $to_rm (split /\n/, retrieve("parent::$target")) {
        my ($name, $hash) = split(/\s+/, $to_rm);
        next unless exists $data{$name};

        my $local_hash = fast_hash(retrieve($name));
        if ($clobber_divergent or $hash eq $local_hash or ! defined $hash) {rm($name)}
        else {terminal::info("preserving local version of divergent attribute $name (use update -D to clobber it)");
              $divergent{$name} = retrieve($name)}}

      associate("parent::$target", $attributes) unless $no_parents;

      dangerous('', sub {eval qx($target serialize -ipmu)});
      dangerous('', sub {eval qx($target serialize -ipMu)});

      map associate($_, $divergent{$_}), keys %divergent unless $clobber_divergent;

      reload()})})}

  cache('parent-identification', %parent_id_cache);
  cache('parent-state',          %parent_state_cache);

  if ($no_verify) {hook('update-from-presumably-succeeded', $options, @targets);
                   rm('state::before-update') unless $no_state || $save_state}
  elsif (verify()) {hook('update-from-succeeded', $options, @targets);
                    terminal::info("Successfully updated. Run 'load-state before-update' to undo this change.") if $save_state;
                    rm('state::before-update') unless $no_state || $save_state}
  elsif ($force || $no_state) {hook('update-from-failed', $options, @targets);
                               terminal::warning('Failed to verify: at this point your object will not save properly, though backup copies will be created.',
                                                 $no_state ? 'You should attempt to repair this object since no prior state was saved.'
                                                           : 'Run "load-state before-update" to undo the update and return to a working state.')}
  else {hook('update-from-failed', $options, @targets);
        terminal::error('Verification failed after the upgrade was complete.');
        terminal::info("$0 has been reverted to its pre-upgrade state.", "If you want to upgrade and keep the failure state, then run 'update-from $target --force'.");
        load_state('before-update');
        rm('state::before-update')}});

__
meta::function('usage', '"Usage: $0 action [arguments]\\nUnique actions (run \'$0 ls\' to see all actions):" . ls(\'-u\');');
meta::function('verify', <<'__');
file::write(my $other = $transient{temporary_filename} = temporary_name(), my $serialized_data = serialize());
chomp(my $observed = join '', qx|perl '$other' state|);

unlink $other if my $result = $observed eq (my $state = state());
terminal::error("Verification failed; expected $state but got $observed from $other") unless $result;
hook('after-verify', $result, observed => $observed, expected => $state);
$result;
__
meta::function('vim', <<'__');
# Installs VIM highlighters.
file::write("$ENV{'HOME'}/.vim/syntax/$_.vim", retrieve("vim_highlighter::$_")) for grep s/^vim_highlighter:://o, keys %data;
__
meta::hook('before-save::render', <<'__');
render();

__
meta::hook('before-shell::ad', <<'__');
ad('note::');

__
meta::indicator('cc', 'length ::retrieve(\'data::current-continuation\') ? "\\033[1;36mcc\\033[0;0m" : \'\';');
meta::indicator('locked', 'is_locked() ? "\\033[1;31mlocked\\033[0;0m" : \'\';');
meta::indicator('path', <<'__');
my @highlighted = map join("\033[1;30m|\033[0;0m", split /\|/, $_), @{$transient{path}};
join "\033[1;30m/\033[0;0m", @highlighted;

__
meta::internal_function('around_hook', <<'__');
# around_hook('hookname', @args, sub {
#   stuff;
# });

# Invokes 'before-hookname' on @args before the sub runs, invokes the
# sub on @args, then invokes 'after-hookname' on @args afterwards.
# The after-hook is not invoked if the sub calls 'die' or otherwise
# unwinds the stack.

my $hook = shift @_;
my $f    = pop @_;

hook("before-$hook", @_);
my @result = &$f(@_);
hook("after-$hook", @_);
wantarray ? @result : $result[0];

__
meta::internal_function('associate', <<'__');
my ($name, $value, %options) = @_;
die "Namespace does not exist" unless exists $datatypes{namespace($name)};
$data{$name} = $value;
execute($name) if $options{execute};
$value;

__
meta::internal_function('attribute', <<'__');
my ($name) = @_;
$name =~ s/^[^:]*:://;
$name;
__
meta::internal_function('attribute_is', <<'__');
my ($a, %options) = @_;
my %inherited     = parent_attributes(grep /^parent::/o, sort keys %data) if grep exists $options{$_}, qw/-u -U -d -D/;
my $criteria      = $options{'--criteria'} || $options{'--namespace'} && "^$options{'--namespace'}::" || '.';

my %tests = ('-u' => sub {! $inherited{$a}},
             '-d' => sub {$inherited{$a} && fast_hash(retrieve($a)) ne $inherited{$a}},
             '-i' => sub {$transient{inherit}{namespace($a)}},
             '-v' => sub {$transient{virtual}{namespace($a)}},
             '-p' => sub {$a =~ /^parent::/o},
             '-s' => sub {$a =~ /^state::/o},
             '-m' => sub {$a =~ /^meta::/o});

return 0 unless scalar keys %tests == scalar grep ! exists $options{$_}    ||   &{$tests{$_}}(), keys %tests;
return 0 unless scalar keys %tests == scalar grep ! exists $options{uc $_} || ! &{$tests{$_}}(), keys %tests;

$a =~ /$_/ || return 0 for @{$options{'--path'}};
$a =~ /$criteria/;

__
meta::internal_function('cache', <<'__');
my ($name, %pairs) = @_;
if (%pairs) {associate("cache::$name", join "\n", map {$pairs{$_} =~ s/\n//g; "$_ $pairs{$_}"} sort keys %pairs)}
else        {map split(/\s/, $_, 2), split /\n/, retrieve("cache::$name")}
__
meta::internal_function('chmod_self', <<'__');
my ($mode_function)      = @_;
my (undef, undef, $mode) = stat $0;
chmod &$mode_function($mode), $0;
__
meta::internal_function('dangerous', <<'__');
# Wraps a computation that may produce an error.
my ($message, $computation) = @_;
terminal::info($message) if $message;
my @result = eval {&$computation()};
terminal::warning(translate_backtrace($@)), return undef if $@;
wantarray ? @result : $result[0];
__
meta::internal_function('debug_trace', <<'__');
terminal::debug(join ', ', @_);
wantarray ? @_ : $_[0];
__
meta::internal_function('execute', <<'__');
my ($name, %options) = @_;
my $namespace = namespace($name);
eval {&{$datatypes{$namespace}}(attribute($name), retrieve($name))};
warn $@ if $@ && $options{'carp'};

__
meta::internal_function('exported', <<'__');
# Allocates a temporary file containing the concatenation of attributes you specify,
# and returns the filename. The filename will be safe for deletion anytime.
my $filename = temporary_name();
file::write($filename, cat(@_));
$filename;

__
meta::internal_function('extension_for', <<'__');
my $extension = $transient{extension}{namespace($_[0])};
$extension = &$extension($_[0]) if ref $extension eq 'CODE';
$extension || '';
__
meta::internal_function('fast_hash', <<'__');
my ($data)     = @_;
my $piece_size = length($data) >> 3;

my @pieces     = (substr($data, $piece_size * 8) . length($data), map(substr($data, $piece_size * $_, $piece_size), 0 .. 7));
my @hashes     = (fnv_hash($pieces[0]));

push @hashes, fnv_hash($pieces[$_ + 1] . $hashes[$_]) for 0 .. 7;

$hashes[$_] ^= $hashes[$_ + 4] >> 16 | ($hashes[$_ + 4] & 0xffff) << 16 for 0 .. 3;
$hashes[0]  ^= $hashes[8];

sprintf '%08x' x 4, @hashes[0 .. 3];
__
meta::internal_function('file::read', <<'__');
my $name = shift;
open my($handle), "<", $name;
my $result = join "", <$handle>;
close $handle;
$result;
__
meta::internal_function('file::write', <<'__');
use File::Path     'mkpath';
use File::Basename 'dirname';

my ($name, $contents, %options) = @_;
die "Choosing not to overwrite file $name" if $options{noclobber} and -f $name;
mkpath(dirname($name)) if $options{mkpath};

my $open_name = $name =~ /^[>|]/ ? $name : $options{append} ? ">> $name" : "> $name";
open my($handle), $open_name or die "Can't open $name for writing";
print $handle $contents;
close $handle;

__
meta::internal_function('fnv_hash', <<'__');
# A rough approximation to the Fowler-No Voll hash. It's been 32-bit vectorized
# for efficiency, which may compromise its effectiveness for short strings.

my ($data) = @_;

my ($fnv_prime, $fnv_offset) = (16777619, 2166136261);
my $hash                     = $fnv_offset;
my $modulus                  = 2 ** 32;

$hash = ($hash ^ ($_ & 0xffff) ^ ($_ >> 16)) * $fnv_prime % $modulus for unpack 'L*', $data . substr($data, -4) x 8;
$hash;
__
meta::internal_function('hypothetically', <<'__');
# Allows you to make changes to the data without committing them.
# Usage:
#
# hypothetically(sub {
#   ...
# });
#
# Changes to %data made inside the sub {} are discarded.

my %data_backup   = %data;
my ($side_effect) = @_;
my @result        = eval {&$side_effect()};
%data = %data_backup;

die $@ if $@;
wantarray ? @result : $result[0];

__
meta::internal_function('internal::main', <<'__');
disable();

$SIG{'INT'}              = sub {snapshot_if_necessary(); exit 1};
$transient{initial}      = state();
chomp(my $default_action = retrieve('data::default-action'));

my $function_name = shift(@ARGV) || $default_action;
my @effective_argv = @ARGV;

unshift @effective_argv, $function_name and $function_name = 'method_missing'
unless exists $externalized_functions{$function_name};

around_hook('main-function', $function_name, @effective_argv, sub {
  dangerous('', sub {
    chomp(my @result = &$function_name(@effective_argv));
    print join("\n", @result), "\n" if @result})});

save() unless state() eq $transient{initial};

END {enable()}

__
meta::internal_function('invoke_editor_on', <<'__');
my ($data, %options) = @_;
my $editor    = $options{editor} || $ENV{VISUAL} || $ENV{EDITOR} || die 'Either the $VISUAL or $EDITOR environment variable should be set to a valid editor';
my $options   = $options{options} || $ENV{VISUAL_OPTS} || $ENV{EDITOR_OPTS} || '';
my $attribute = $options{attribute};
$attribute =~ s/\//-/g;
my $filename  = temporary_name() . "-$attribute$options{extension}";

file::write($filename, $data);
system("$editor $options '$filename'");

my $result = file::read($filename);
unlink $filename;
$result;
__
meta::internal_function('is_locked', '!((stat($0))[2] & 0222);');
meta::internal_function('namespace', <<'__');
my ($name) = @_;
$name =~ s/::.*$//;
$name;
__
meta::internal_function('parent_attributes', <<'__');
my $attributes = sub {my ($name, $value) = split /\s+/o, $_; $name => ($value || 1)};
map &$attributes(), split /\n/o, join("\n", retrieve(@_));
__
meta::internal_function('parent_ordering', <<'__');
# Topsorts the parents by dependency chain. The simplest way to do this is to
# transitively compute the number of parents referred to by each parent.

my @parents = @_;
my %all_parents = map {$_ => 1} @parents;

my %parents_of = map {
  my $t = $_;
  my %attributes = parent_attributes($_);
  $t => [grep /^parent::/, keys %attributes]} @parents;

my %parent_count;
my $parent_count;
$parent_count = sub {
  my ($key) = @_;
  return $parent_count{$key} if exists $parent_count{$key};
  my $count = 0;
  $count += $parent_count->($_) + exists $data{$_} for @{$parents_of{$key}};
  $parent_count{$key} = $count};

my %inverses;
push @{$inverses{$parent_count->($_)} ||= []}, $_ for @parents;
grep exists $all_parents{$_}, map @{$inverses{$_}}, sort keys %inverses;
__
meta::internal_function('retrieve', <<'__');
my @results = map defined $data{$_} ? $data{$_} : retrieve_with_hooks($_), @_;
wantarray ? @results : $results[0];

__
meta::internal_function('retrieve_with_hooks', <<'__');
# Uses the hooks defined in $transient{retrievers}, and returns undef if none work.
my ($attribute) = @_;
my $result      = undef;

defined($result = &$_($attribute)) and return $result for map $transient{retrievers}{$_}, sort keys %{$transient{retrievers}};
return undef;
__
meta::internal_function('select_keys', <<'__');
my %options = @_;
grep attribute_is($_, %options), sort keys %data;
__
meta::internal_function('separate_options', <<'__');
# Things with one dash are short-form options, two dashes are long-form.
# Characters after short-form are combined; so -auv4 becomes -a -u -v -4.
# Also finds equivalences; so --foo=bar separates into $$options{'--foo'} eq 'bar'.
# Stops processing at the -- option, and removes it. Everything after that
# is considered to be an 'other' argument.

# The only form not supported by this function is the short-form with argument.
# To pass keyed arguments, you need to use long-form options.

my @parseable;
push @parseable, shift @_ until ! @_ or $_[0] eq '--';

my @singles = grep /^-[^-]/, @parseable;
my @longs   = grep /^--/,    @parseable;
my @others  = grep ! /^-/,   @parseable;

my @singles = map /-(.{2,})/ ? map("-$_", split(//, $1)) : $_, @singles;

my %options;
/^([^=]+)=(.*)$/ and $options{$1} = $2 for @longs;
++$options{$_} for grep ! /=/, @singles, @longs;

({%options}, grep length, @others, @_);

__
meta::internal_function('strip', 'wantarray ? map {s/^\\s*|\\s*$//g; $_} @_ : $_[0] =~ /^\\s*(.*?)\\s*$/ && $1;');
meta::internal_function('table_display', <<'__');
# Displays an array of arrays as a table; that is, with alignment. Arrays are
# expected to be in column-major order.

sub maximum_length_in {
  my $maximum = 0;
  length > $maximum and $maximum = length for @_;
  $maximum;
}

my @arrays    = @_;
my @lengths   = map maximum_length_in(@$_), @arrays;
my @row_major = map {my $i = $_; [map $$_[$i], @arrays]} 0 .. $#{$arrays[0]};
my $format    = join '  ', map "%-${_}s", @lengths;

join "\n", map strip(sprintf($format, @$_)), @row_major;
__
meta::internal_function('temporary_name', <<'__');
use File::Temp 'tempfile';
my (undef, $temporary_filename) = tempfile("$0." . 'X' x 4, OPEN => 0);
$temporary_filename;
__
meta::internal_function('translate_backtrace', <<'__');
my ($trace) = @_;
$trace =~ s/\(eval (\d+)\)/$locations{$1 - 1}/g;
$trace;
__
meta::internal_function('with_cwd', <<'__');
my ($dir, $f) = @_;
my $cwd = cwd();

my @result = eval {chdir $dir && &$f()};
chdir $cwd;
die $@ if $@;
wantarray ? @result : $result[0];

__
meta::internal_function('with_exported', <<'__');
# Like exported(), but removes the file after running some function.
# Usage is with_exported(@files, sub {...});
my $f      = pop @_;
my $name   = exported(@_);
my $result = eval {&$f($name)};
terminal::warning("$@ when running with_exported()") if $@;
unlink $name;
$result;
__
meta::internal_function('with_fork', <<'__');
my (@args) = @_;
my $f = pop @args;

return process->new($child_pid) if my $child_pid = fork;

# This is the child process. Disable saving to prevent contention, and then
# exit with the given status code.
*::save = sub {};
exit &$f(@args);

__
meta::library('process', <<'__');
package process;

sub new  {my ($class, $pid) = @_; bless \$pid, $class}
sub kill {my ($self, $signal) = @_; ::kill $signal // 'KILL', $$self; $self->wait()}
sub term {my ($self) = @_; $self->kill('TERM')}
sub int  {my ($self) = @_; $self->kill('INT')}
sub stop {my ($self) = @_; $self->kill('STOP')}
sub cont {my ($self) = @_; $self->kill('CONT')}

sub wait {my ($self) = @_; ::wait($$self)}

__
meta::library('shell', <<'__');
# Functions for shell parsing and execution.
package shell;
use Term::ReadLine;

sub tokenize {grep length, split /\s+|("[^"\\]*(?:\\.)?")/o, join ' ', @_};

sub parse {
  my ($fn, @args) = @_;
  s/^"(.*)"$/\1/o, s/\\\\"/"/go for @args;
  {function => $fn, args => [@args]}}

sub execute {
  my %command = %{$_[0]};
  die "undefined command: $command{function}" unless exists $externalized_functions{$command{function}};
  &{"::$command{function}"}(@{$command{args}})}

sub run {execute(parse(tokenize(@_)))}

sub prompt {
  my %options = @_;
  my $name    = $options{name} // ::name();

  my $indicators = join '', map &{"::$_"}(), ::select_keys('--namespace' => 'indicator');
  my $prefix     = $transient{repl_prefix} // '';

  "$prefix\033[1;32m$name\033[0;0m$indicators "}

sub repl {
  my %options = @_;

  my $term = new Term::ReadLine "$0 shell";
  $term->ornaments(0);
  my $attribs = $term->Attribs;
  $attribs->{completion_entry_function} = $attribs->{list_completion_function};

  my $autocomplete = $options{autocomplete} || sub {[sort(keys %data), grep !/-/, sort keys %externalized_functions]};
  my $prompt       = $options{prompt}       || \&prompt;
  my $parse        = $options{parse}        || sub {parse(tokenize(@_))};
  my $output       = $options{output}       || sub {print join("\n", @_), "\n"};
  my $command      = $options{command}      || sub {my ($command) = @_; ::around_hook('shell-command', $command, sub {&$output(::dangerous('', sub {execute($command)}))})};

  length $_ && &$command(&$parse($_)) while ($attribs->{completion_word} = &$autocomplete(), defined($_ = $term->readline(&$prompt())))}

__
meta::library('terminal', <<'__');
# Functions for nice-looking terminal output.
package terminal;

my $process = ::name();

sub message {print STDERR "[$_[0]] $_[1]\n"}
sub color {
  my ($name, $color) = @_;
  *{"terminal::$name"} = sub {chomp($_), print STDERR "\033[1;30m$process(\033[1;${color}m$name\033[1;30m)\033[0;0m $_\n" for map join('', $_), @_}}

my %preloaded = (info => 32, progress => 32, state => 34, debug => 34, warning => 33, error => 31);
color $_, $preloaded{$_} for keys %preloaded;
__
meta::message_color('cc', '36');
meta::message_color('state', 'purple');
meta::message_color('states', 'yellow');
meta::note('bootstrapping', <<'__');
Bootstrapping.
There isn't much need to write a binary Canard image in itself. The reason is
that this will be just as platform-specific as the original bootstrap
interpreter. The interpreter allows you to inspect all of its internals, so you
could conceivably create a copy of it at another location in memory.

__
meta::note('cons-cell-allocator', <<'__');
Cons cell allocator.
Allocating cons cells efficiently should be straightforward. I think this
algorithm will work:

| dpop %rbx                     <- tail element pointer
  dpop %rcx                     <- head element pointer
  cmpq %rbx, %rsi               <- are we consing onto the last cell?
  je after_tail                 <- if so, don't cons the tail
    subq %rsi, %rbx             <- absolute to relative address
    # address size optimization goes here
    movl %ebx, -4(%rsi)         <- copy 32-bit displacement into place
    lea -5(%rsi), %rsi          <- subtract to finish the tail allocation
    movb $0xe9, (%rsi)          <- encode JMP instruction
  after_tail:
    subq %rsi, %rcx             <- absolute to relative address
    movl %ecx, -4(%rsi)         <- copy 32-bit displacement into place
    lea -5(%rsi), %rsi          <- allocate head of cons cell
    movb $0xe8, (%rsi)          <- encode CALL instruction
    dpush %rsi                  <- push resulting cons cell
  ret                           <- invoke continuation

Notice that we use %rsi as the heap allocation pointer (and that it grows
downwards). This means that %rsi must be preserved across things like syscalls.

Here are the cases (... indicates the original position of %rsi):

| cons [] x             %rsi -> | e8 xx xx xx xx | c3 | ...
  cons y x              %rsi -> | e8 xx xx xx xx | e9 yy yy yy yy | ...
  cons cons y z x       %rsi -> | e8 xx xx xx xx | e8 yy yy yy yy |
                                                   e9 zz zz zz zz | ...

Cons cells are more structural than they are referential. This is mostly because
the single byte c3 is more efficient to encode than a jmp instruction that
points to c3.

__
meta::note('cps-and-the-return-stack', <<'__');
CPS and the return stack.
The reader should leverage implicit CPS if possible; this would allow it to be
resumable across system I/O, for example, allowing for inversion of control.
However, there are a couple of good reasons this doesn't necessarily make sense:

| 1. What does it mean to reuse or alias a previous parse state? If this is
     allowed, then it imposes considerable GC overhead.
  2. The return stack is linear, not in a tree form. This means that proper
     continuations can't be stored without copying the return stack, which at
     this point is not possible.

Given this, it may be simpler to have the reader hard-wired to call a
buffer-fill function and use the jonesforth strategy.

__
meta::note('dynamic-tail-call-optimization', <<'__');
Dynamic tail call optimization.
Now that tail calls are not automatically generated, we have the flexibility to
rewrite all calling addresses (except those used with call/cc, but that is a
different matter). Here's the code:

| popq %rax                     <- continuation
  testb (%rax), $0xc3           <- is the continuation opcode RET?
  jne preserve_caller
  testb -5(%rax), $0xe8         <- is the call site using a CALL?
  jne preserve_caller
    movb $0xe9, -5(%rax)        <- rewrite CALL to JMP
  preserve_caller:
  ...

__
meta::note('extensible-symbol-table', <<'__');
Extensible symbol table.
The symbol table is a linked list of partial functions, not of symbols verbatim.
Each partial function responds to a symbol and determines whether that symbol is
within its domain. If so, it returns a pointer to a definition that should be
used for that symbol; otherwise, it searches the rest of the symbol table.

Matcher functions can be generated from symbols easily enough; we just map each
byte into a string comparison function. For example, here's the string we want
to match:

| 06000000 43 61 6e 61 72 64    <- six bytes long, string is 'Canard'

And here's the resulting code:

| dpop %rbx                     <- pop the string to be tested
  cmpl (%rbx), $0x00000006      <- check length
  jne nope
    cmpb 4(%rbx), $0x43         <- length is ok, check bytes
    jne nope                    <- lack of vectorization is lame ...
    cmpb 5(%rbx), $0x61         <- ... but probably acceptable
    jne nope
    cmpb 6(%rbx), $0x6e
    jne nope
    cmpb 7(%rbx), $0x61
    jne nope
    cmpb 8(%rbx), $0x72
    jne nope
    cmpb 9(%rbx), $0x64
    jne nope
    dpush $0xXXXXXXXX           <- match was successful; push the binding
  ret
  nope:
    dpush $0                    <- match failed; push 0
  ret

However, this model generalizes nicely to non-matcher functions. For example, we
could write a function that supported wildcard characters (denoted here by .) by
simply skipping some byte comparisons. So you could write a matcher for
hexadecimal bytes:

| 0x..

The first two characters are literal, the last two are wildcards that accept any
values. The length must still match for this symbol pattern to be used.

Given this pattern, bootstrapping Canard involves constructing the image of a
symbol table with enough stuff to be useful.

__
meta::note('frequency-vs-cost', <<'__');
Frequency vs cost.
Machine-coded lists are expensive to inspect but cheap to execute. Canard is
primarily about execution (I'll explain further in a moment), so it makes
perfect sense to use a machine encoding.

Why primarily about execution? Because most of the heavy lifting will not
involve lists at all. You don't generally use linked lists in
performance-critical situations. Instead, you allocate memory and use vectors or
some such. Most list-oriented code is probably something to do with
metaprogramming or non-performance-critical symbolic manipulation.

I think that means this issue is closed: executable data structures are a win
here. (The performance win comes from delegating dispatch to the processor's
decoder rather than using soft decoding, which would be necessary provided that
we also need RTTI and polymorphism.)

__
meta::note('gc', <<'__');
Garbage collection.
Trivially, we can implement a conservative GC by going through the data stack
and marking all things which satisfy:

| 1. The thing points to allocated memory.
  2. The thing is an x86 instruction whose relative offset refers to allocated
     memory.

Maybe it should be possible to add new GC traversal strategies. GC involves some
knowledge about the objects being traced, so maybe it's appropriate to use some
sort of stronger type information.

The simplest way to do this is to use the symbol table as the root (along with
any stack entries that point to valid ranges of memory), and decode the x86
instructions to determine the things they reference. Most references will be of
these forms:

| 1. Relative jump (possibly conditional)
  2. Memory access
  3. Closure value (48b8 ... 48ab)

Of the three, closure values are probably the hardest to deal with because it is
very unclear what the value means. In the worst case, the value could be a
series of bytes that will be executed as code; determining what it refers to in
this case is impossible because we don't know where it will be placed.

Because of all this, we may need to figure out a simpler way to mark objects as
being in use. A great way is just to use the heuristic that objects referred to
by the data stack or return stack, or bound in the global symbol table, are
marked. This places a burden on the programmer: any value you care about needs
to have a solid reference.

__
meta::note('left-associative-consing', <<'__');
Left-associative consing.
The main reason I want to cons from the left has to do with notational familiarity. I find it more natural to write things like 'f 3 4' than '4 3 f', just because it looks more like
applicative notation (though it is fundamentally different). However, it creates a few problems for lower-level notation. In particular:

| a b c d -> (((nil :: a) :: b) :: c) :: d) -> e8 d e8 c e8 b e8 a c3

So ultimately, the only stage at which the cons tree is reversed is in the initial parse phase -- this is a little counterintuitive, but otherwise fine. Trees are probably also serialized in
reverse, so that the parser can be treated as a projection into list-space. For now, the reverse-consing notation is fine.

__
meta::note('matchers', <<'__');
Matchers.
The global symbol table is a first-class function that resolves symbols by
composing matchers. Because cons is composition, you can manipulate the symbol
table as a list. Therefore:

| symbol-table = :: ... :: :: :: [] m1 m2 m3 ... mn

Each matcher function takes two continuations on the return stack. The top
continuation takes the original symbol and indicates that no match occurred; the
next continuation takes the resolved value and returns immediately to the symbol
table caller.

__
meta::note('minimal-allocation', <<'__');
Minimal allocation.
Intel JMP instructions can be encoded in two widths, and CALL instructions can
be encoded in one on 64-bit machines. CALL is always e8; JMP is any one of:

| eb xx                 <- 8-bit relative jump
  e9 xxxxxxxx           <- 32-bit relative jump

Three bytes of memory can be saved if we pack a jump, which could easily be
worth it to compensate for things like tightly-paired cons cells.

__
meta::note('minimal-symbol-table', <<'__');
Minimal symbol table.
A minimal Canard image needs the following from a symbol table:

| 1. A way to parse input. We can't just assume this is taken care of, since we
     might want to load more input or inspect the bootstrap parser.
  2. A way to construct, inspect, and execute lists.
  3. A way to manipulate the stack pointer and read/write arbitrary memory.
  4. A way to define more symbols.
  5. A way to write new machine code from within Canard source.

The simplest way to do all of this, most likely, is to just provide a few
functions to manipulate the stack and deal with lists, and to then provide one
macro-definition that allows the user to type hexadecimal numbers. This macro
definition can be used to write the machine code necessary to write new
symbol-definition functions.

__
meta::note('parser-role-in-compilation', <<'__');
The parser's role in compilation.
I've been overlooking an important opportunity here. The parser has the option
to generate list code that modifies itself -- for instance, looking up symbols.
Therefore, we can let the symbol table simply act as a partial function from
symbol to address (defaulting to a cons for the symbol table). The parser can
generate code that uses it. For example, here's the output of parsing '[foo bar]
bif':

| call invoke_symbol_bif_anon   <- anonymous function for 'bif'
  call invoke_list_anon         <- anonymous function to push [foo bar]
  ret                           <- nil
  invoke_symbol_foo_anon:
    dpush xx(%rip)              <- push 'bif' onto stack
    jmp invoke_symbol           <- invoke and rewrite calling address
  invoke_list_anon:
    dpush yy(%rip)              <- push [foo bar] onto the stack
    ret                         <- invoke continuation

Here's the interpreter core support code that does the rewriting:

| invoke_symbol:
    call resolve_symbol         <- convert symbol to address
    dpop %rax                   <- symbol definition address
    movq %rax, %rcx             <- save into another register... [1]
    subq (%rsp), %rax           <- relative to absolute
    movq (%rsp), %rbx           <- continuation address of caller
    movl %eax, -4(%rbx)         <- overwrite calling address
  jmp *%rcx                     <- [1] ...tail-call symbol definition

__
meta::note('partial-cells', <<'__');
Partial cells.
Cons cells are encoded in increments of five bytes. This is an unfortunate
number because while it fits inside a 64-bit stack cell, it also requires at
least two separate instructions to generate a functioning machine code command
(unless prefixed by a 3-byte nop, in which case the cell can be copied and
executed verbatim).

I think this is acceptable. We can have separate instructions for writing
various sizes of memory; the limit case is that everything happens in terms of
bytes, but this creates a significant performance overhead. We can have several
instructions, one for each integer size:

| =q    move all eight cell bytes
  =d    move lower four cell bytes
  =w    move lower two cell bytes
  =b    move lower byte

These instructions are impacted by the endianness of the processor; so for Intel
x64, you would have this (the value on the top of the stack is
8877665544332211):

| 11 22 33 44 55 66 77 88
  --------- =q ----------
  --- =d ----
  -=w--
  =b

__
meta::note('prefused-cons-nop-tagging', <<'__');
Prefused cons nop tagging.
I claimed earlier that memory allocation should not use the cons heap because
cons cells are strictly by-value. But this isn't actually true; we can just
intersperse allocations onto the cons heap:

| cons [] x             %rsi ->                                   | e8 x ...
  allocate 8            %rsi ->                             | <8> | e8 x ...
  cons swap             %rsi -> | e8 05000000 | e9 08000000 | <8> | e8 x ...
                                      |             |          ^    ^
                                      +-------------+----------+    |
                                                    +---------------+

We don't want to use nop tagging here because cons cells ultimately should be
references. It would be difficult to express more than 64 bits of data in any
case; you'd have to refer to it, at which point you have what is logically a
reference anyway. (Giving the destination of the reference by-value semantics
would be misleading.)

So cons really is a way to compose functions, not to allocate arbitrary chunks
of memory.

__
meta::note('structure', <<'__');
Interpreter structure.
The interpreter should itself be a data structure. This will make it much easier
to parse and generate images that can be executable. The ELF header contains a
single program header entry (to refer to the heap), and its eh_entry field is
used to point to a closure consisting of the main symbol and the symbol table.
Here's what this would look like:

| elf header data...
  eh_entry: 0x7fff0000ffffff10
  ...
  program_header_1:
    ph_vaddr: 0x7fff0000ffffff10
    ph_filesz: 0xNNN            <- this + ph_vaddr should be 0x7fff000100000000
    ph_offset: 0xff10           <- must == ph_vaddr % page size (usually 0x1000)
  ...
  0xff10:
    48b8 SS...SS 48ab           <- push initial symbol
    e8 XXXXXXXX                 <- invoke symbol table to resolve
    488b o107f8                 <- stack top -> %rax
    4883 o357 08                <- %rdi -= 8 (pop entry)
    ff o350                     <- jump to %rax

The symbol table is itself a cons structure that checks symbol mappings.
However, in order for it to support introspection it can't just be an arbitrary
cons of partial functions. If it did, we would see this:

| [fn ... f2 f1]                <- each fx is opaque

In actuality, each fx is, most likely, itself a cons representing some closure
over a matcher. So we would see this:

| [... [@?k kv1 ks1]]

We could then invoke the kv1 and ks1 functions to determine the values they
hold. We know that the other function corresponds to @?k because we have a
similar entry for it in the symbol table:

| [... [@?k @?k '@?k] ...]

We can assume that an entry using its own matcher as its value will be a
constant entry. The reason is that you would most likely never bind a wildcard
matcher under a non-constant name since the structure would be different. For
instance:

| [... [@<x @<x '???] ...]      <- you wouldn't write this

__
meta::note('symbol-encoding', <<'__');
Symbol encoding.
Symbols are encoded as length-prefixed byte strings. The length is the number of
bytes occupied by the symbol's string data, so the total space is one greater.
For example, here is how 'hello' is encoded:

| 05 68 65 6c 6c 6f

Symbols are deliberately minimalistic; you should use blobs of memory if you
want more general-purpose strings.

__
meta::note('symbol-resolution', <<'__');
Symbol resolution.
The biggest reason to dynamically inline symbols is to allow the dictionary to
use a linear-time lookup strategy without negatively impacting invocation
performance. We can't do eager compilation like Forth because Canard supports
self-reference inside sublists. (Forth doesn't have lists, so this wouldn't make
sense there.)

No dynamic rewriting needs to happen at all if we can avoid a linear-time
lookup. I don't mind using one extra jump per function call; this is a constant
overhead and is relatively trivial. We just can't search the symbol table on
every occurrence.

__
meta::note('symbol-rewriter', <<'__');
Symbol rewriter.
The symbol rewriter is an odd duck. It is a closure over a definition list that
rewrites callers to

__
meta::note('symbol-table-structure', <<'__');
Symbol table structure.
The symbol table should ideally be a cons-based structure so that you can
inspect it using normal list functions. Ultimately I think it's just a big
composition of matchers with these properties:

| :h symbol-table       -> the most recent matcher
  :t symbol-table       -> the symbol table prior to the last definition

Each matcher takes two continuations on the return stack, and should invoke
whichever one makes more sense:

| %rsp -> | next-matcher | return | ...

If the match is successful, it can skip the next-matcher continuation and send
its result directly to the return continuation. To do this:

| pop %rax              <- discard next-matcher continuation
  pushd result          <- push result onto data stack (important!)
  ret                   <- use return continuation

If the match is unsuccessful, the matcher should invoke the next-matcher
continuation with the string to be matched:

| pushd the-string      <- push the input string back onto the data stack
  ret                   <- use next-matcher continuation

None of this logic needs to be particularly efficient because the symbol table
will be used at most once for each symbol.

__
meta::note('type-closure', <<'__');
Type closure.
Canard doesn't really have types, but garbage collection makes it crucial to
preserve a certain degree of information about objects. Currently, the following
is assumed:

| 1. Data and return stack entries are absolute addresses.
  2. Heap (and therefore symbol table) entries are instruction-encoded data.

This will generally be the case in practical situations, but it makes it easy
from a GC perspective too.

__
meta::parent('/home/spencertipping/conjectures/perl-objects/object', <<'__');
bootstrap::html                         f44dd03cb0c904b3a5f69fbda5f018d0
bootstrap::initialization               170e6ce82d2db886e908918cb132bb4e
bootstrap::perldoc                      5793df44bdd2526bb461272924abfd4b
function::ad                            9220b9dc131f8f79878a6209adfe8ef2
function::alias                         8eeeeb4e064ef3aba7edf8f254427bc2
function::cat                           f684de6c8776617a437b76009114f52e
function::cc                            12ea9176e388400704d823433c209b7a
function::ccc                           d151a9793edd83f80fb880b7f0ab9b34
function::child                         957c1bd528bbe7046442ec15ad9e2095
function::clone                         d03e474252c7283e184f2ecddde33137
function::cp                            3fe69d1b58d90045ad520048977538c4
function::create                        d65deb895a848b32d3d7ed92e81e8cb0
function::current-state                 6f03f86f1901e9ef07fdb5d4079a914c
function::cwd                           fd9b58e76c474a8fe93dc3abdccb8857
function::disable                       53b449708cc2ffdefa352e53bb7d847d
function::edit                          6e5bd5f35ff9cf66edd2d2d9943a7b4e
function::edit-self                     71790df00f941ed9b56e17f789b93871
function::enable                        7de1cedc36841f5de8f9fdfbc3b65097
function::expanded-bootstrap            bd76713aa911d4a92936824dac06caf5
function::export                        2374cd1dbf7616cb38cafba4e171075d
function::extern                        1290a5223e2824763eecfb3a54961eff
function::grep                          55c3cea8ff4ec2403be2a9d948e59f14
function::hash                          6ee131d093e95b80039b4df9c7c84a02
function::hook                          675cdb98b5dd8567bdd5a02ead6184b5
function::hooks                         3d989899c616f7440429a2d9bf1cc44b
function::identity                      94041fcf04989fccfe1b8e54171bf603
function::import                        5d0f0634cbd01274f2237717507198a2
function::initial-state                 03d8ed608855a723124e79ca184d8e73
function::is                            41564c8f21b12ab80824ac825266d805
function::load-state                    b6cf278a1f351f316fa6e070359b6081
function::lock                          5d8db258704e6a8623fac796f62fac02
function::ls                            01a23d51d5b529e03943bd57e33f92df
function::metadata-from                 51f238bfe3d4a0e98df376da46f1f70e
function::mv                            ccd000960db4cf627d9246c43d87ba4c
function::name                          955ba2d1fe1d67cd78651a4042283b00
function::parents                       3da9e63b5aae9e2f5dcc946a86d166aa
function::perl                          9f9fd744f0ed225ad8fb3b79fa53dd9a
function::rd                            2adb16d7e819d2e87a27201744a581e7
function::reload                        1589f4cf8374e0011991cb8907afca3e
function::rm                            6f6fd7a6c25558eb469d78ea888f8551
function::rmparent                      fc2884910a6939a47898a778f277332c
function::save                          3cbe5c3735ee4ff99cb60ccf68bc8b91
function::save-state                    5af59ebc4ad8965767e4dc106d3b557e
function::serialize                     b43eb453b21c03b062efc37441bc2bf0
function::serialize-single              8bac97e94a1162947d274421053387b0
function::sh                            1b2f542ca9dd63ad437058b7f6f61aac
function::shb                           21139548efb79500d9c999dba024ab32
function::shell                         a87f389b94713e5855e62241d649d01d
function::size                          69f6ab4a100c6ef05d4d41510004d645
function::snapshot                      56939a47f2758421669641e15ebd66eb
function::snapshot-if-necessary         1287f82135efdcc94af76dfa88029e4d
function::state                         cf8a6613eaca36c2e80139508d0d86c5
function::touch                         3991b1b7c7187566f50e5e58ce01fa06
function::unlock                        b4aac02f7f3fb700acf4acfd9b180ceb
function::update                        ac391dc90e507e7586c81850e7c2ecdd
function::update-from                   57d565d7ba8f5a196b6aa35a102f71f4
function::usage                         5bdd370f5a56cfbf199e08d398091444
function::verify                        0c0cc1dfeab7d705919df122f7850a4f
indicator::cc                           3db7509c521ee6abfedd33d5f0148ed3
indicator::locked                       fc2b4f4ca0d6a334b9ac423d06c8f18c
indicator::path                         b5e2cb524caa0283f713a0ddf9f4c162
internal_function::around_hook          129aaec0550d3de6c00208104c0fdcef
internal_function::associate            55f202ffdbc6b9005e53d3e82f5f9bfe
internal_function::attribute            dd6f010f9688977464783f60f5b6d3dd
internal_function::attribute_is         218083f309e9d94af11f8059f4c03ba7
internal_function::cache                eb9da45580a9ac0882baf98acd2ecd60
internal_function::chmod_self           2035e861eedab55ba0a9f6f5a068ca70
internal_function::dangerous            46c4baaa214ab3d05af43e28083d5141
internal_function::debug_trace          0faf9d9f4159d72dfe4481f6f3607ce1
internal_function::execute              f0924e087d978ff2ab1e117124db3042
internal_function::exported             ae35afef7d4762f2818aee5872c75be0
internal_function::extension_for        9de8261d69cc93e9b92072b89c89befd
internal_function::fast_hash            ee5eba48f837fda0fe472645fdd8899a
internal_function::file::read           e647752332c8e05e81646a3ff98f9a8e
internal_function::file::write          460e2343283eb9fd0e1815389f4e07e6
internal_function::fnv_hash             c36d56f1e13a60ae427afc43ba025afc
internal_function::hypothetically       1ce03d85e21d0e97f650ffdf46bbac53
internal_function::internal::main       6635b98bd1cc44c0dd4b2f2f2b5f05e6
internal_function::invoke_editor_on     5eb976796f0ec172d6ec036116a2f41e
internal_function::is_locked            da12ced6aa38295251f7e748ffd22925
internal_function::namespace            784d2e96003550681a4ae02b8d6d0a27
internal_function::parent_attributes    f6ccfaa982ab1a4d066043981aaca277
internal_function::parent_ordering      57b6da88f76b59f3fed9abfa61280e5e
internal_function::retrieve             721a6800f328da05047fd7392758f55d
internal_function::retrieve_with_hooks  0f1b0220ccd973d57a2e96ff00458cf2
internal_function::select_keys          a5e3532ec6d58151d0ee24416ea1e2b5
internal_function::separate_options     2dd1026a0f157c7c65bb9f3d18936206
internal_function::strip                14f490b10ebd519e829d8ae20ea4d536
internal_function::table_display        d575f4dc873b2e0be5bd7352047fd904
internal_function::temporary_name       6f548d101fc68356515ffd0fc9ae0c93
internal_function::translate_backtrace  d77a56d608473b3cd8a3c6cb84185e10
internal_function::with_cwd             928bae9caa3cb212f0c5c977ba55166c
internal_function::with_exported        df345d5095d5ed13328ddd07ea922b36
internal_function::with_fork            b252464d1efd12dc4a5ee6890076b6a9
library::process                        9fe4e2320eae9f6661a6eb6e777fb6ca
library::shell                          f561500cf223df1bf6daf43af93577a5
library::terminal                       7e2d045782405934a9614fe04bcfe559
message_color::cc                       2218ef0f7425de5c717762ffb100eb43
message_color::state                    03621cd6ac0b1a40d703f41e26c5807f
message_color::states                   ac66eeeff487b5f43f88a78ea18b3d56
meta::configure                         69c2e727c124521d074fde21f8bbc4db
meta::externalize                       aa44e27e0bbee6f0ca4de25d603a1fc7
meta::functor::editable                 48246c608f363de66511400e00b26164
meta::type::alias                       889d26d2df385e9ff8e2da7de4e48374
meta::type::bootstrap                   51108ab2ddb8d966e927c8f62d9ef3e5
meta::type::cache                       9267171f2eace476f64a1a670eaaf2c7
meta::type::data                        120e1649a468d3b3fd3fb783b4168499
meta::type::function                    8ea626198861dc59dd7f303eecb5ff88
meta::type::hook                        ff92aef328b6bdc6f87ddd0821f3e42f
meta::type::inc                         78e0375b6725487cb1f0deca41e96bbe
meta::type::indicator                   feb54a2624e6983617685047c717427f
meta::type::internal_function           eff3cf31e2635f51c83836f116c99d2f
meta::type::library                     7622e8d65e03066668bade74715d65ad
meta::type::message_color               557a1b44979cbf77a7251fbdc4c5b82c
meta::type::meta                        c6250056816b58a9608dd1b2614246f8
meta::type::parent                      09d1d03379e4e0b262e06939f4e00464
meta::type::retriever                   71a29050bf9f20f6c71afddff83addc9
meta::type::state                       84da7d5220471307f1f990c5057d3319
retriever::file                         3bbc9d8a887a536044bafff1d54def7e
retriever::global                       4fe8df0cca548075169968772843a156
retriever::id                           4da6080168d32445150cc4200af7af6e
retriever::object                       c7633990b4e01bdc783da7e545799f4f
retriever::perl                         f41938e6dbad317f62abffc1e4d28cca

__
meta::parent('binary', <<'__');
function::compile-binary  fcb22854d34d5fc4f098e823c8fbf865
meta::type::binary        3a80e9982dedb950aa1a9ae301670dc4
parent::vim-highlighters  98dc835e12038ddcd04630e62175fa90
retriever::bin            24b2382d3f002ee325963a5c652c53ff

__
meta::parent('gdb-object', <<'__');
meta::type::gdb                                               d11b5bb7fbf55c7455faceae52048d83
parent::/home/spencertipping/conjectures/perl-objects/object  4426dd6f4aebae284447047265132c82

__
meta::parent('git-integration', <<'__');
function::gU    f15ab8170ea981dd7b216c75af5d3f63
function::ga    505b3d9a22ca7cf04c60bda01ff3f140
function::gc    0378d3a25fad4fa0feff9cb50c0c5d89
function::gd    cff1e868c7c69780a2263c8c7fd75f90
function::gl    492e2750409588f8b61a8b8e339e42c1
function::gs    4ea8aeccb36ab83702062e4359e8600b
function::gu    fdd2e61e0ea981dda6d407df63c0e47e
parent::object  4426dd6f4aebae284447047265132c82

__
meta::parent('notes', <<'__');
function::note    c6d52ffe73cd48cd95fdc561c59d9f63
function::notes   7229b326ac8686b2db6de98496bc7527
meta::type::note  f81bea58841a438e4ee34608ab4f54c0
parent::object    4426dd6f4aebae284447047265132c82

__
meta::parent('object', <<'__');
bootstrap::html                         f44dd03cb0c904b3a5f69fbda5f018d0
bootstrap::initialization               170e6ce82d2db886e908918cb132bb4e
bootstrap::perldoc                      5793df44bdd2526bb461272924abfd4b
function::ad                            9220b9dc131f8f79878a6209adfe8ef2
function::alias                         8eeeeb4e064ef3aba7edf8f254427bc2
function::cat                           f684de6c8776617a437b76009114f52e
function::cc                            12ea9176e388400704d823433c209b7a
function::ccc                           d151a9793edd83f80fb880b7f0ab9b34
function::child                         957c1bd528bbe7046442ec15ad9e2095
function::clone                         d03e474252c7283e184f2ecddde33137
function::cp                            3fe69d1b58d90045ad520048977538c4
function::create                        d65deb895a848b32d3d7ed92e81e8cb0
function::current-state                 6f03f86f1901e9ef07fdb5d4079a914c
function::cwd                           fd9b58e76c474a8fe93dc3abdccb8857
function::disable                       53b449708cc2ffdefa352e53bb7d847d
function::edit                          6e5bd5f35ff9cf66edd2d2d9943a7b4e
function::edit-self                     71790df00f941ed9b56e17f789b93871
function::enable                        7de1cedc36841f5de8f9fdfbc3b65097
function::expanded-bootstrap            bd76713aa911d4a92936824dac06caf5
function::export                        2374cd1dbf7616cb38cafba4e171075d
function::extern                        1290a5223e2824763eecfb3a54961eff
function::grep                          55c3cea8ff4ec2403be2a9d948e59f14
function::hash                          6ee131d093e95b80039b4df9c7c84a02
function::hook                          675cdb98b5dd8567bdd5a02ead6184b5
function::hooks                         3d989899c616f7440429a2d9bf1cc44b
function::identity                      94041fcf04989fccfe1b8e54171bf603
function::import                        5d0f0634cbd01274f2237717507198a2
function::initial-state                 03d8ed608855a723124e79ca184d8e73
function::is                            41564c8f21b12ab80824ac825266d805
function::load-state                    b6cf278a1f351f316fa6e070359b6081
function::lock                          5d8db258704e6a8623fac796f62fac02
function::ls                            01a23d51d5b529e03943bd57e33f92df
function::metadata-from                 51f238bfe3d4a0e98df376da46f1f70e
function::mv                            ccd000960db4cf627d9246c43d87ba4c
function::name                          955ba2d1fe1d67cd78651a4042283b00
function::parents                       3da9e63b5aae9e2f5dcc946a86d166aa
function::perl                          9f9fd744f0ed225ad8fb3b79fa53dd9a
function::rd                            2adb16d7e819d2e87a27201744a581e7
function::reload                        1589f4cf8374e0011991cb8907afca3e
function::rm                            6f6fd7a6c25558eb469d78ea888f8551
function::rmparent                      fc2884910a6939a47898a778f277332c
function::save                          3cbe5c3735ee4ff99cb60ccf68bc8b91
function::save-state                    5af59ebc4ad8965767e4dc106d3b557e
function::serialize                     b43eb453b21c03b062efc37441bc2bf0
function::serialize-single              8bac97e94a1162947d274421053387b0
function::sh                            1b2f542ca9dd63ad437058b7f6f61aac
function::shb                           21139548efb79500d9c999dba024ab32
function::shell                         a87f389b94713e5855e62241d649d01d
function::size                          69f6ab4a100c6ef05d4d41510004d645
function::snapshot                      56939a47f2758421669641e15ebd66eb
function::snapshot-if-necessary         1287f82135efdcc94af76dfa88029e4d
function::state                         cf8a6613eaca36c2e80139508d0d86c5
function::touch                         3991b1b7c7187566f50e5e58ce01fa06
function::unlock                        b4aac02f7f3fb700acf4acfd9b180ceb
function::update                        ac391dc90e507e7586c81850e7c2ecdd
function::update-from                   57d565d7ba8f5a196b6aa35a102f71f4
function::usage                         5bdd370f5a56cfbf199e08d398091444
function::verify                        0c0cc1dfeab7d705919df122f7850a4f
indicator::cc                           3db7509c521ee6abfedd33d5f0148ed3
indicator::locked                       fc2b4f4ca0d6a334b9ac423d06c8f18c
indicator::path                         b5e2cb524caa0283f713a0ddf9f4c162
internal_function::around_hook          129aaec0550d3de6c00208104c0fdcef
internal_function::associate            55f202ffdbc6b9005e53d3e82f5f9bfe
internal_function::attribute            dd6f010f9688977464783f60f5b6d3dd
internal_function::attribute_is         218083f309e9d94af11f8059f4c03ba7
internal_function::cache                eb9da45580a9ac0882baf98acd2ecd60
internal_function::chmod_self           2035e861eedab55ba0a9f6f5a068ca70
internal_function::dangerous            46c4baaa214ab3d05af43e28083d5141
internal_function::debug_trace          0faf9d9f4159d72dfe4481f6f3607ce1
internal_function::execute              f0924e087d978ff2ab1e117124db3042
internal_function::exported             ae35afef7d4762f2818aee5872c75be0
internal_function::extension_for        9de8261d69cc93e9b92072b89c89befd
internal_function::fast_hash            ee5eba48f837fda0fe472645fdd8899a
internal_function::file::read           e647752332c8e05e81646a3ff98f9a8e
internal_function::file::write          460e2343283eb9fd0e1815389f4e07e6
internal_function::fnv_hash             c36d56f1e13a60ae427afc43ba025afc
internal_function::hypothetically       1ce03d85e21d0e97f650ffdf46bbac53
internal_function::internal::main       6635b98bd1cc44c0dd4b2f2f2b5f05e6
internal_function::invoke_editor_on     5eb976796f0ec172d6ec036116a2f41e
internal_function::is_locked            da12ced6aa38295251f7e748ffd22925
internal_function::namespace            784d2e96003550681a4ae02b8d6d0a27
internal_function::parent_attributes    f6ccfaa982ab1a4d066043981aaca277
internal_function::parent_ordering      57b6da88f76b59f3fed9abfa61280e5e
internal_function::retrieve             721a6800f328da05047fd7392758f55d
internal_function::retrieve_with_hooks  0f1b0220ccd973d57a2e96ff00458cf2
internal_function::select_keys          a5e3532ec6d58151d0ee24416ea1e2b5
internal_function::separate_options     2dd1026a0f157c7c65bb9f3d18936206
internal_function::strip                14f490b10ebd519e829d8ae20ea4d536
internal_function::table_display        d575f4dc873b2e0be5bd7352047fd904
internal_function::temporary_name       6f548d101fc68356515ffd0fc9ae0c93
internal_function::translate_backtrace  d77a56d608473b3cd8a3c6cb84185e10
internal_function::with_cwd             928bae9caa3cb212f0c5c977ba55166c
internal_function::with_exported        df345d5095d5ed13328ddd07ea922b36
internal_function::with_fork            b252464d1efd12dc4a5ee6890076b6a9
library::process                        9fe4e2320eae9f6661a6eb6e777fb6ca
library::shell                          f561500cf223df1bf6daf43af93577a5
library::terminal                       7e2d045782405934a9614fe04bcfe559
message_color::cc                       2218ef0f7425de5c717762ffb100eb43
message_color::state                    03621cd6ac0b1a40d703f41e26c5807f
message_color::states                   ac66eeeff487b5f43f88a78ea18b3d56
meta::configure                         69c2e727c124521d074fde21f8bbc4db
meta::externalize                       aa44e27e0bbee6f0ca4de25d603a1fc7
meta::functor::editable                 48246c608f363de66511400e00b26164
meta::type::alias                       889d26d2df385e9ff8e2da7de4e48374
meta::type::bootstrap                   51108ab2ddb8d966e927c8f62d9ef3e5
meta::type::cache                       9267171f2eace476f64a1a670eaaf2c7
meta::type::data                        120e1649a468d3b3fd3fb783b4168499
meta::type::function                    8ea626198861dc59dd7f303eecb5ff88
meta::type::hook                        ff92aef328b6bdc6f87ddd0821f3e42f
meta::type::inc                         78e0375b6725487cb1f0deca41e96bbe
meta::type::indicator                   feb54a2624e6983617685047c717427f
meta::type::internal_function           eff3cf31e2635f51c83836f116c99d2f
meta::type::library                     7622e8d65e03066668bade74715d65ad
meta::type::message_color               557a1b44979cbf77a7251fbdc4c5b82c
meta::type::meta                        c6250056816b58a9608dd1b2614246f8
meta::type::parent                      09d1d03379e4e0b262e06939f4e00464
meta::type::retriever                   71a29050bf9f20f6c71afddff83addc9
meta::type::state                       84da7d5220471307f1f990c5057d3319
retriever::file                         3bbc9d8a887a536044bafff1d54def7e
retriever::global                       4fe8df0cca548075169968772843a156
retriever::id                           4da6080168d32445150cc4200af7af6e
retriever::object                       c7633990b4e01bdc783da7e545799f4f
retriever::perl                         f41938e6dbad317f62abffc1e4d28cca

__
meta::parent('preprocessor', <<'__');
function::preprocess           ab5526a02ff417d4c162357dc327e7c4
meta::type::template           bc4b0c80b5efc716b19e99b832c22bf3
parent::object                 4426dd6f4aebae284447047265132c82
retriever::pp                  3b5f5c5d30c5a04f72056dedaacfe7b7
template::comment              dfe273d2dad3d8159b847545e4e5c309
template::def                  0575aedbacf922d77f3419b817b7d579
template::eval                 1a0e2124a05056be4abc11803883c294
template::failing_conditional  e3a4523110dd859e828f342185de7c62
template::include              47b5552d609d97fe7f2522d5c1027014
template::pinclude             c07ff79bf8d642cceaa9ef844bfcb189

__
meta::parent('sdoc', <<'__');
function::sdoc            71fa4ee3ae6283a87706e74f9de1de40
function::sdoc-html       b23152b3f5be696e5bae842ec43fc5a4
function::sdoc-markdown   a35a6441dd750466f2d0e636bee2b382
function::sdoc-packed     8ec4975fca7228708baae6ccd241bdbf
function::sdocp           c3d738d982ba87418a298ff58478a85b
meta::type::sdoc          22cd7315641d38c9d536344e83c36bed
meta::type::slibrary      95474943c4a5f8ff17d3cf66ddb7c386
parent::object            4426dd6f4aebae284447047265132c82
retriever::code-sdoc      03b87ff8d1ecf7594db9ca0669fc69a1
retriever::html-sdoc      8ab7705d03276945b23a71677153233c
retriever::markdown-sdoc  67c34ba8223ec36a3ae018e411354db2
retriever::sdoc           75181c270d3a3de6500e5ccdb8208f65
retriever::sdoc-packed    f7116f96adf2c748ac1991f4d7c1792b
retriever::sdocp          fcfcf3a7de79d7d863402b9ccfcac3c4

__
meta::parent('vim-highlighters', <<'__');
function::vim                cf9e37026f6cd1499a6dd258fbbcd060
meta::type::vim_highlighter  2a74673e7c2c9093acbbaa2a562eb905
parent::object               4426dd6f4aebae284447047265132c82

__
meta::retriever('bin', <<'__');
# Compiles a binary text file.
my $name = $_[0];
return undef unless $name =~ s/^bin::/binary::/ && defined retrieve($name);
compile_binary($name);

__
meta::retriever('code-sdoc', <<'__');
# Lets you specify the SDoc extension manually. For instance:
# code.js::sdoc::foo causes sdoc::foo to be SDoc-rendered using Javascript comments.
my ($name) = @_;
return undef unless $name =~ s/^code\.(\w+)::// and defined retrieve($name);
sdoc($name, $1);

__
meta::retriever('file', '-f $_[0] ? file::read($_[0]) : undef;');
meta::retriever('global', <<'__');
# Returns the global data stashed at the end of this perl object
$_[0] eq 'self' ? $global_data : undef;

__
meta::retriever('html-sdoc', <<'__');
my ($attribute) = @_;
return undef unless $attribute =~ s/^html::/sdoc::/ and defined retrieve($attribute) || $attribute =~ s/^sdoc::// && defined retrieve($attribute);
sdoc_html($attribute);

__
meta::retriever('id', '$_[0] =~ /^id::/ ? substr($_[0], 4) : undef;');
meta::retriever('markdown-sdoc', <<'__');
my ($attribute) = @_;
return undef unless $attribute =~ s/^markdown::/sdoc::/ and defined retrieve($attribute) || $attribute =~ s/^sdoc::// && defined retrieve($attribute);
sdoc_markdown($attribute);

__
meta::retriever('object', <<'__');
# Fetch a property from another Perl object. This uses the 'cat' function.
return undef unless $_[0] =~ /^object::(.*?)::(.*)$/ && -x $1 && qx|$1 is '$2'|;
join '', qx|$1 cat '$2'|;

__
meta::retriever('perl', <<'__');
# Lets you use the result of evaluating some Perl expression
return undef unless $_[0] =~ /^perl::(.*)$/;
eval $1;

__
meta::retriever('pp', <<'__');
return undef unless namespace($_[0]) eq 'pp';
my $attr = retrieve(attribute($_[0]));
defined $attr ? preprocess($attr) : undef;
__
meta::retriever('sdoc', <<'__');
exists $data{"sdoc::$_[0]"} ? sdoc("sdoc::$_[0]", extension_for($_[0])) : undef;

__
meta::retriever('sdoc-packed', <<'__');
return undef unless $_[0] =~ /^sdoc-packed::(.*)$/;
exists $data{"sdoc::$1"} ? sdoc_packed("sdoc::$1") : undef;

__
meta::retriever('sdocp', <<'__');
return undef unless $_[0] =~ /^sdocp::(.*)$/;
exists $data{"sdoc::$1"} ? sdocp("sdoc::$1") : undef;

__
meta::sdoc('binary::boot', <<'__');
Canard bootstrap interpreter | Spencer Tipping
Licensed under the terms of the MIT source code license

Introduction.
This file is written in preprocessed binary text, a format defined by the
'binary' and 'preprocessor' self-modifying Perl objects. You can get these
objects from http://github.com/spencertipping/perl-objects; the HTML files allow
you to inspect them online:

| http://spencertipping.com/perl-objects/binary.html
  http://spencertipping.com/perl-objects/preprocessor.html

  Conventions.
  The most consistent convention I use is encoding the ModR/M and SIB bytes in
  octal rather than hex. This better reflects their structure; so, for instance:

  | movq %rax, %rbx             # copy %rax into %rbx
    488b o330                   # clearer than 488b d8
     | |  |||
     | |  ||+-- r/m = 000, %rax
     | |  |+--- reg = 011, %rbx
     | |  +---- mod = 11, reg/reg
     | +------- opcode = 8b (move right -> left)
     +--------- REX.W prefix (0100 = REX, 1000 = WRXB)

  I avoid using any prefix aside from REX.W, which is encoded as 48 and is a
  fairly good giveaway that something is an opcode. (I also use 66 as needed.)

  Constants.
  These dictate where the image goes and how big it is in memory. This is
  related to virtual addressing.

  :[::image_base = 0x400000]
  :[::image_size = 0x100000]
  :[sub b { shift(@_) + :image_base }]

  :[::image_end  = b:image_size]

ELF header.
See elf(5) for details about what this is made of.

::bootstrap_begin

::elf_ehdr_begin                # e_ident array
  ::elf_e_ident    7f 'ELF      # ELF magic
  ::elf_ei_class   02           # 64-bit binary
  ::elf_ei_data    01           # Two's complement little-endian
  ::elf_ei_version 01           # Current ELF version
  ::elf_ei_osabi   00           # System V UNIX ABI

  ::elf_ei_abiversion 00        # ABI version
  ::elf_ei_padding /7/00        # padding; end of e_ident

  ::elf_e_type      :2[L 2]     # Executable file
  ::elf_e_machine   :2[L 0x3e]  # x86-64
  ::elf_e_version   :4[L 1]     # current version

  ::elf_e_entry     :8[L b:entry]

  ::elf_e_phoff     :8[L :phdr_begin]
  ::elf_e_shoff     :8[L 0]     # no section headers

  ::elf_e_flags     :4[L 0]
  ::elf_e_ehsize    :2[L :elf_ehdr_end - :elf_ehdr_begin]
  ::elf_e_phentsize :2[L :phdr_end     - :phdr_begin]
  ::elf_e_phnum     :2[L 1]

  ::elf_e_shentsize :2[L 0]
  ::elf_e_shnum     :2[L 0]
  ::elf_e_shstrndx  :2[L 0]
::elf_ehdr_end

Program header for main image.
This section is read/write/execute and contains the bootstrap code, data stack,
and heap. It doesn't contain the return stack since we use the OS-provided one.

:[::bootstrap_size = :bootstrap_end - :bootstrap_begin]

::phdr_begin
  ::phdr_p_type   :4[L 1]         # PT_LOAD
  ::phdr_p_flags  :4[L 4 | 2 | 1] # PT_R | PT_W | PT_X
  ::phdr_p_offset :8[L 0]
  ::phdr_p_vaddr  :8[L :image_base]
  ::phdr_p_paddr  :8[L 0]
  ::phdr_p_filesz :8[L :bootstrap_size]
  ::phdr_p_memsz  :8[L :image_size]
  ::phdr_p_align  :8[L 0x1000]
::phdr_end

Core image layout.
The core image consists of two stacks and a heap. The stacks go in opposite
directions; the return stack is provided by the host operating system and uses
the processor's native push/pop instructions. The data stack grows forwards from
the first free address mapped into the interpreter's address space. The commands
used to manipulate the data stack are inlined into use sites.

The heap grows downwards and is used for allocating cons cells and other
contiguous blocks of memory. Register mapping is:

| %rsp (register 4) return stack pointer (grows downwards)
  %rdi (register 7) data stack pointer (grows upwards towards %rsi)
  %rsi (register 6) heap pointer (grows downwards towards %rdi)

All other general-purpose registers are available for clobbering. The choices
for the above registers are not arbitrary; they are chosen to minimize the
number of spurious SIB bytes and displacements required to access memory. (See
the Intel Instruction Set Reference for the machine-level exception cases for
various registers.)

At the top (high addresses) of the heap is the symbol table, which consists of
heap-allocated cons cells as more definitions occur. When Canard boots up, it
immediately invokes the 'main' symbol; this function contains logic for the
interpreter/REPL. The original value of %rsp (the one that the OS provided) is
pushed onto the data stack prior to invoking 'main'.

  Global state.
  The interpreter has one global variable aside from the stack/heap registers.
  This variable is the symbol table, which is used by the bootstrap interpreter
  to resolve any symbols entered by the user.

  ::symbol_table :8[L 0]

  Symbol constants.
  We refer to some constants throughout the code below, most of which are
  symbols. The bootstrap image is smaller if we pull them out of the code
  itself, since this way we won't have to jump around them or write the
  constants as the immediate data of a mov instruction.

  This constant table is used two ways. The first way is as a space for us to
  use later on when grabbing symbol references -- for example, when we push the
  'main' symbol onto the stack in the toplevel code.

  The second way is as an initial binding table. The toplevel bootstrap code
  reads through this table and conses up bindings before executing main. All of
  these are offset-encoded from the beginning of the file to save space; this
  way we can get away with using only two bytes instead of three or four.

  Code labels are prefixed with a /; symbol labels are prefixed with @. This
  allows us to duplicate the names and factor the binding table generation into
  a preprocessor macro. (It also makes it more obvious when a label is used as a
  symbol binding.)

  ::binding_table
  - def -p binding << end
    :2[L:/$_] ::\@$_ @{[sprintf "%02x", length $_]}00'$_
  - end

  - binding main, /:k, @:k, @?k, @<, @>, r<, r>, @<x, @<o, !<
  - binding %x, %v, %0, %1
  - binding i+, i&, i|, i^, i<<, i>>, i>>>, i-, i~
  - binding ., ?
  - binding =1, =2, =4, =8, @1, @2, @4, @8, &0, &1, &2, &3
  - binding &read, &write, &open, &close, &stat

  The binary-text compiler can't handle a label called /:: -- the two colons
  make it think it's supposed to use a label reference. It also fails for things
  containing single-quotes.

  :2[L:/@<q]     ::@<q       0300'@<'
  :2[L:cons]     ::@cons     0200'::
  :2[L:swons]    ::@swons    0300':$:
  :2[L:allocate] ::@allocate 0200':v
  :2[L:uncons]   ::@uncons   0200':^

  /2/00         # end marker
  ::end_binding_table

  Register initialization.
  Set up these registers to point to useful places. %rsp is provided by the OS,
  so we don't need to do anything else with it. We set up %rdi and %rsi like
  this:

  | +-- 400000   +-- 0x4000c9     +-- 40xxxx            +-- 500000
    V            V                V                     V
    | ELF header | bootstrap code | data stack ... heap | .... | %rsp stack

  I'm leaving the data stack lower bound as a variable here because it depends
  on the amount of bootstrap code that we use. But the idea is the same either
  way; the data stack begins immediately after the bootstrap logic.

  :[::file_end = b:bootstrap_size]

  ::entry
  ::rdi_init 48c7 o307:4[L:file_end]
  ::rsi_init 48c7 o306:4[L:image_end]

  At this point the registers are initialized, so we can write to both stacks
  and to the heap. We need to set up a 'return' into the exit function so that
  when the main function exits (i.e. we hit a nil at the end of the main program
  list) it will die gracefully.

  Two things need to happen here. First, we need to put the system-provided %rsp
  value onto the data stack; this lets 'main' inspect argv and environment
  variables. Then we need to push 'exit' as the continuation for 'main'.

  ::push_rsp    488bo304 48ab
  ::init_return 68:4[Lb:/&exit]

Symbol table.
There are several pieces of machinery involved in creating the symbol table.
First, the symbol table is ultimately a function composition, which is
represented in Canard as a linked list of cons cells. So the general form is
something like this:

| symbol_table: 00000000ssssssss
  ssssssss: e8 xxxxxxxx | e8 yyyyyyyy | e9 zzzzzzzz
  zzzzzzzz: e8 qqqqqqqq | ... | c3

Specifically, when executed it will use an x86 CALL to each entry, and when
examined as a cons tree it will give you each symbol resolver directly. At the
very end is a RET instruction; the result of this is that if no resolver can
handle the symbol you pass in, the symbol table just hands you your symbol back.
In list form, this corresponds to a nil as the final tail.

e8:4[L:/nil - :>]

At this point, the heap looks like this:

| %rsi -> | c3 | :image_end

This is necessary for the initialization we're going to do below.

  Undefined symbol handlers.
  These handle undefined symbols and construct symbol-specific functions for
  quoted or literal constructs. These can go in basically any order.

  b8:4[Lb:/@<x] 48ab e8:4[L:cons - :>]  # Hexadecimal literals
  b8:4[Lb:/@<o] 48ab e8:4[L:cons - :>]  # Octal literals
  b8:4[Lb:/@<q] 48ab e8:4[L:cons - :>]  # Quoted literals

  Default bindings.
  Set up a few bindings by default. These comprise the bootstrap image. The
  definitions themselves are below.

  Right now the symbol table as such doesn't exist; we need to build it by
  consing up a bunch of symbol matchers, each of which is generated by one of
  the functions below. These functions will then be added to the symbol table
  and will be part of the image.

  Entries in the binding table are formatted like this:

  | [16-bit value] | [16-bit symbol length] | [symbol data]

  The last entry has a zero value and no following symbol. To parse this out, we
  read the values into %rbx and then point %rax at the symbol length. If we have
  a value, push the value and the symbol pointer (which is simply the integer
  value of %rax).

  ::read_binding_table
  48c7 o305:4[Lb:binding_table]

  ::rbt_loop
  480fb7 o13500                         # %rbx = Z< 16-byte (%rbp)
  488d   o10502                         # %rax = %rbp + 2
  480fb7 o010                           # %rcx = Z< 16-byte (%rax)
  6685   o311 74:1[L:rbt_loop_end - :>] # break if value == 0

  4893 05:4[L:image_base] 48ab          # push %rbx + image_base (value)
  4893 48ab                             # push %rax (= %rbp + 2)

  488d o154o015 02                      # %rbp += %rcx + 2
  55 e8:4[L:/@:k - :>]                  # stash %rbp
     e8:4[L:cons - :>] 5d               # restore %rbp

  eb:1[L:rbt_loop - :>]
  ::rbt_loop_end

  Now we have a complete symbol table. Bind it to the global address and start
  up the interpreter.

  488b o137f8                           # copy the symbol table to %rbx
  e8:4[L:/@< - :>]                      # and install it globally

  Push the 'main' function and use the symbol table to resolve it to a code
  address. Once we have it, tail-call into the 'main' function and let it return
  into 'exit'. (main needs to push an exit code for this to work.)

  ::push_main b8:4[Lb:@main] 48ab       # push symbol 'main'
  ff   o323                             # resolve 'main' (using table in %rbx)
  488b o107f8 4883 o357 08              # data-pop %rax (address of main)
  ff   o340                             # tail-jump into main

  And that concludes the bootstrap logic. Everything below here is a library
  function that is referenced statically from the above.

Internals.
Everything from here down is referenced or called by the above to build out the
image, but is not executed in the toplevel stream.

  Main function.
  This will end up tying together a number of pieces, but for the moment it just
  pushes a zero to return.

  ::/main
  4831o300 48ab                         # data-push 0
  c3                                    # return (to exit function)

Consing and memory allocation.
We need a way to allocate new cons cells without manually getting memory from
the heap. To do this, we define the cons function, which will ultimately be
stored in the symbol table as ::.

Right now we have some leftover stuff on the stack. The data stack top is the
symbol matcher for @:k, which we'll ultimately need to cons onto the nil we put
into a single byte on the heap.

  Nil.
  This is easy; it's just a single byte on the heap. We then push a pointer to
  that byte onto the data stack.

  ::/nil
  48ffo316                              # allocate one byte for nil
  c6  o006 c3                           # move the byte c3 to this address
  488bo306 48ab                         # push the c3 reference onto the stack
  c3                                    # return

  Cons definition.
  As described in the design documentation, cons has a few different cases that
  it knows how to deal with. If the tail matches the current heap pointer, we
  can omit the e9 jump and just rely on sequence to execute the tail as-is,
  saving five bytes. Otherwise we write the e9 jump.

  Cons takes the head on top of the stack and the tail beneath that. This is
  counterintuitive from code, as arguments appear to be in the wrong order:

  | :: 3 []             <- [3]
    :: [] 3             <- improper list

  However, generally it's more useful to access the head of a list than the
  tail, so we want it to be immediately available.

  There are cases where you want the other ordering; for that you can use
  'swons' ('swap cons'), which is identical to 'cons' except that its arguments
  are reversed:

  | :$: 3 []            <- improper list
    :$: [] 3            <- [3]

  Given all of that, here's the algorithm for both cons and swons (referred to
  as :: and :$: respectively):

  | swons:
      data-pop %rbx             <- tail
      data-pop %rax             <- head
      jmp cons_body             <- reuse logic below
    cons:
      data-pop %rax             <- head
      data-pop %rbx             <- tail
    cons_body:
      cmpq %rbx, %rsi           <- check for contiguous segment
    je cons_head                <- skip tail allocation if contiguous
      subq %rsi, %rbx           <- absolute->relative
      movl %ebx, -4(%rsi)       <- write address of e9 jump instruction
      subq $5, %rsi             <- reserve space
      movb $0xe9, (%rsi)        <- write e9 jmp opcode
    cons_head:
      subq %rsi, %rax           <- absolute->relative
      movl %eax, -4(%rsi)       <- write address of e8 call instruction
      subq $5, %rsi             <- reserve space
      movb $0xe8, (%rsi)        <- write e8 call opcode
    data-push %rsi              <- return reference to this cons cell
    ret

  Some optimization has been done around the stack parameters. In particular,
  since we end up pushing the result, we can just pop one instead of popping
  both; then we can write the result over the parameter that we didn't pop.

  ::swons
  488b o137f8                           # tail element
  488b o107f0                           # head element
  eb:1[L:cons_body - :>]                # reuse code below

  ::cons
  488b o107f8                           # head element
  488b o137f0                           # tail element

  ::cons_body
  4883 o357 08                          # pop one
  4839 o336 74:1[L:cons_head - :>]      # tail allocation check
  482b o336 89 o136fc                   # relative, write e9 jump offset
  4883 o356 05 c6 o006 e9               # allocate space, write e9 jump opcode

  ::cons_head
  482b o306 89 o106fc                   # relative, write e8 call offset
  4883 o356 05 c6 o006 e8               # allocate space, write e8 call opcode

  4889 o167f8 c3                        # return new cons cell

  Jump dereferencing.
  Cons tails are encoded as e9 jumps. This function follows an e9 jump until the
  destination is some other opcode. If a circular path of e9 jumps is
  constructed, this function will never return.

  ::/!<
  488b o107f8                           # load initial value into %rax

  ::/!<_loop
  80   o070 e9                          # is e9 the byte at that location?
  75:1[L:/!<_bail - :>]                 # it isn't, so we're done
  4863 o13701                           # sign-extend address into %rbx
  488d o104o00205                       # %rax += %rbx + 5
  eb:1[L:/!<_loop - :>]                 # dereference this pointer

  ::/!<_bail
  4889 o107f8 c3                        # %rax -> stack top; return

  Unconsing.
  This is quite straightforward; we just need to decode the relative addresses.
  Fortunately, as demonstrated above, this can be done in two instructions using
  movsx and lea.

  This function has the following behavior:

  | :^ :: a b = a b             <- :^ applied to cons cell
    :^ x      = [] x            <- :^ applied to some other value

  Note that this will be misleading for the nil value, since it will appear as
  though nil is infinitely nested in itself. It's written this way to reduce the
  number of cases in code dealing with lists, and to provide the equivalence
  that [:: :^] is a list monad 'return' function.

  ::uncons
  e8:4[L:/!< - :>]                      # dereference automatically
  488b o107f8                           # data-pop %rax

  80 o070 e8                            # do we have a real cons cell?
  75:1[L:uncons_nil - :>]               # if not, jump to the nil case

  4863 o13701                           # sign-extend address into %rbx
  4883 o300 05                          # %rax += 5    (move past e8 call)
  488d o034o002                         # %rbx += %rax (absolute -> relative)
  4889 o137f8                           # data-push %rbx (head)
  48ab                                  # data-push %rax (tail)
  c3

  ::uncons_nil                          # this section is a tail call
  e9:4[L:/nil - :>]                     # just push a nil as the tail

  Heap allocation.
  Allocates the given number of bytes onto the heap and returns a pointer to
  them. Use this carefully; if you allocate too much stuff you'll make the heap
  collide with the data stack and terrible things will happen.

  ::allocate
  482b o167f8                           # %rsi -= data-pop
  4889 o167f8 c3                        # data-push heap; ret

  Low-level memory access.
  This is necessary to define a number of things in the standard library. Memory
  can be read and written in a few different sizes, and the processor's
  endianness is used. (This is relevant since all stack values are the same
  width -- so for small reads/writes, you're working with a byte slice.)

  ::/@1 488b o137f8 480fb6 o003 4889 o107f8 c3
  ::/@2 488b o137f8 480fb7 o003 4889 o107f8 c3
  ::/@4 488b o137f8     8b o003 4889 o107f8 c3
  ::/@8 488b o137f8   488b o003 4889 o107f8 c3

  Writes take the value on the top of the stack, followed by the address. We use
  %rax for the value and %rbx for the address.

  ::/=1 488b o107f8 488b o137f0 4883 o357 10   88 o003 c3
  ::/=2 488b o107f8 488b o137f0 4883 o357 10 6689 o003 c3
  ::/=4 488b o107f8 488b o137f0 4883 o357 10   89 o003 c3
  ::/=8 488b o107f8 488b o137f0 4883 o357 10 4889 o003 c3

  Return stack manipulation.
  These two functions allow you to move values between the data and return
  stacks. r> pulls from the return stack, r< pushes onto it.

  Each of these uses a nonstandard return operator because it needs to ignore
  its own immediate return address. However, this doesn't impact the calling
  convention.

  ::/r> 59 58 48ab ff o051
  ::/r< 59 488b o107f8 4883 o357 08 50 ff o051

  Trivial stack permutation.
  I don't want to do too much here because it turns out that there is a nice way
  to encode stack permutation in terms of numerical digits; we're better off
  JIT-compiling the specific transformations we need rather than relying on
  compositions of basic ones like these.

  However, in the interests of getting a bootstrap compiler off the ground, here
  are a few:

  ::/%x                                 # Swap two entries
  488b o107f8                           # first entry -> %rax
  4887 o107f0                           # %rax <-> next entry
  4889 o107f8 c3                        # rewrite first entry

  ::/%v                                 # Drop one entry
  4883 o357 08 c3

  ::/%0                                 # Duplicate top entry
  488b o107f8 48ab c3

  ::/%1                                 # %1 a b ... = b a b ...
  488b o107f0 48ab c3

  ::/%r                                 # %r a b c ... = c a b ...
  488b o107f8                           # a -> %rax
  4887 o107f0                           # *b <-> %rax
  4887 o107e8                           # *c <-> %rax
  4889 o107f8 c3                        # rewrite *a; return

  ::/%R                                 # %R a b c ... = b c a ...
  488b o107e8                           # c -> %rax
  4887 o107f0                           # *b <-> %rax
  4887 o107f8                           # *a <-> %rax
  4889 o107e8 c3                        # rewrite *c; return

  Arithmetic.
  A few functions to make it possible to do basic arithmetic on stack entries.

  # Binary op: load %rax from stack, use entry below as lvalue
  ::/i+   488b o107f8 4801 o107f0 4883 o357 08 c3
  ::/i&   488b o107f8 4821 o107f0 4883 o357 08 c3
  ::/i|   488b o107f8 4809 o107f0 4883 o357 08 c3
  ::/i^   488b o107f8 4831 o107f0 4883 o357 08 c3

  # Shifts: load %rcx from stack (shift amount), entry below is lvalue
  ::/i<<  488b o117f8 48d3 o147f0 488c o357 08 c3
  ::/i>>  488b o117f8 48d3 o177f0 488c o357 08 c3
  ::/i>>> 488b o117f8 48d3 o157f0 488c o357 08 c3

  # Unary: operate on stack top in-place
  ::/i-   48f7 o137 f8 c3
  ::/i~   48f7 o127 f8 c3

  Evaluation.
  There are two ways to evaluate things. One is to use the . operator, which
  evaluates the thing on the top of the stack (and segfaults if the stack top
  doesn't point to a valid list). The other is to use the ? operator, which
  chooses between two conditions. Here are the equations:

  | . [x] y ...       = x y ...
    ? [t] [f] 0 x ... = f x ...
    ? [t] [f] N x ... = t x ...         <- N != 0

  First the . function. This is really simple: all we need to do is jump into
  the destination since lists are executable. This can be a tail call, so the
  'return' that we would expect to see inside the . function is actually
  provided by the function it's calling.

  ::/. 488b o107f8 4883 o357 08 ff o340

  Now the decisional function. This is a value-oriented form of if/then/else. We
  optimistically load the true-case into a register, then load the false case if
  the condition is zero. Like . above, this function also tail-calls the branch.

  ::/?
  488b o107f8                           # true branch -> %rax
  488b o137e8                           # condition -> %rbx
  4883 o357 18                          # pop three entries

  4885 o333 480f44 o10708               # false branch -> %rax if cond == 0
  ff   o340                             # jmp *%rax

Closures.
Canard doesn't have closures in the same sense that Lisp or Haskell does, but
you can construct functions that push specific values onto the stack so that the
next function has something to work with. For instance, consider something like
this:

| adder x y = x + y
  f = adder 5
  f 10                          <- returns 15

We can define adder like this in Canard:

| = [adder] [+ /:k]             <- quotation here; we want composition
  = [f] adder 5                 <- notice: no quotation!
  f 10                          <- returns 15

The key is the /:k function, which is analogous to the 'k' combinator in
functional programming. For any value, /:k returns a function that pushes that
value each time it is called.

  Constant function.
  This is fairly simple. Values are represented as 64-bit numbers internally, so
  we just need to write a function that pushes a fixed number onto the stack.
  The processor supports a 64-bit move-immediate into %rax using the 48b8
  operation, so the generated code will look something like this:

  | 48b8 xxxxxxxx xxxxxxxx      <- value to be pushed
    48ab c3                     <- push and return

  This requires 13 bytes of heap space, which we can obtain by subtracting
  directly from %rsi.

  :://:k
  488b o107f8                   # data-pop into %rax
  4883 o356 0d                  # allocate heap space
  66c7 o006 48b8                # write 48b8 instruction at (%rsi)
    c7 o10609 0048abc3          # write 48ab c3 sequence at 9(%rsi)
  4889 o10602                   # write value to be pushed
  4889 o167f8                   # data-push %rsi
  c3

  Notice that we're writing the end opcodes first. Doing it this way lets us use
  a wider 4-byte mov, which makes the code smaller and decreases the instruction
  count. However, in doing this we also overwrite the last byte of the value
  that we want to push; so we wait to write the value until after we've written
  all of the opcodes.

Definition and invocation.
This is the last piece of the symbol table. Remember from earlier that the
symbol table pointer is mutable and is stored at a fixed address. The simplest
way to deal with this value in memory is just to build two special-purpose
functions that read or write it.

  Symbol table getter.
  We refer to this as @> from now on. This function pushes the symbol table
  address onto the data stack.

  ::/@>
  488b o005:4[L:symbol_table - :>] 48ab c3      # st -> %rax; push; ret

  Symbol table setter.
  This function is only slightly more complex than @> due to the fact that we
  don't have a shortcut quite as nice as stosq. The setter is called @<.

  ::/@<
  488b o107f8 4883 o357 08                      # data-pop -> %rax;
  4889 o005:4[L:symbol_table - :>] c3           # %rax -> (symbol_table); ret

  Matchers and symbol resolution.
  Each function in the symbol table composition is a matcher. This means that it
  uses a calling convention that allows it to operate in conjunction with other
  matchers in the symbol table. The calling convention is a consequence of the
  way the symbol table works. For example, here's a matching process:

  | call resolve_symbol                 <- %rsp is now 'return'
    resolve_symbol:
      call first_matcher                <- %rsp is now 'next'
      call second_matcher               <- %rsp is now 'next'
      ...
      ret                               <- %rsp is now 'no match'

  Matchers are always run in order like this, and their return values are not
  checked by any conditional. It would appear as though we need to thread some
  sort of state through the rest of the calls to communicate when a matcher has
  succeeded. This is not the case, however. Matchers can elect to return early
  by popping a continuation off of %rsp and then using a RET instruction to
  return directly to the caller of resolve_symbol:

  | first_matcher:
      ...
      stosq                             <- push result onto data stack
      pop %rax                          <- discard 'next' continuation
      ret                               <- invoke 'return' continuation

  If a matcher fails, it should leave the data stack alone and invoke the 'next'
  continuation as if nothing had happened:

  | first_matcher:
      ...
      ret                               <- invoke 'next' continuation

  Philosophically this is sort of like having the functions take multiple
  continuations as parameters, with the convention that continuations are passed
  on the return stack instead of the data stack. [TODO: Figure out whether this
  is maintainable given that r> and r< are used to stash data items...]

  Constant symbol matcher generator.
  This function takes a symbol and an address on the stack and returns a pointer
  to a matcher that matches the symbol and returns the address. If the match
  fails, the matcher invokes the 'next' continuation as described above.

  It turns out that this is quite easy given that we've defined /:k already. All
  we need to do is construct two cons cells, one for each argument to @?k. We're
  basically building up this list:

  | :: (/:k value) :: (/:k symbol) [@?k]

  The symbol is on the top of the stack, the value beneath it. @:k consumes both
  and returns a single matcher function.

  Here's an initial implementation:

  | ::/@:k
    e8:4[L://:k  - :>]                  # symbol -> k symbol
    e8:4[L:/%x   - :>]                  # swap
    e8:4[L://:k  - :>]                  # value -> k value
    48c7 o300 :4[Lb:/@?k] 48ab          # push reference to @?k
    e8:4[L:swons - :>]                  # first composition
    e8:4[L:swons - :>]                  # final composition
    c3

  This implementation looks suspiciously similar to a list. The only exceptional
  piece is the reference to @?k, but conveniently can use /:k to do this for us.
  If we were going to build @:k in code, it would look roughly like this:

  | = [@:k] :++ :$: [:: /:k /%x :$:] /:k '@?k [/:k]

  Here's a preprocessor macro to help create code that consists only of function
  calls:

  - def -p composition << end
    e8:4[L:$_ - :>]
  - end

  The only thing is that you'll have to add the final return:

  | - composition /x, /y, /z
    c3                          <- don't forget this!

  Constant matcher definition.
  The constant matcher just compares bytes within a contiguous region of memory.
  It takes two symbols and a binding address as data stack arguments; the
  binding address will be sent to the second continuation if the two symbols
  match; otherwise the immediate continuation will be used and the binding
  address and one of the symbols will be popped from the data stack. (This is
  basically how it needs to work in order to adhere to the calling convention
  for symbol table matchers.)

  Here's the logic:

  | @?k:
      data-pop %rbp                     <- binding address
      data-pop %rax                     <- first symbol
      movq -8(%rdi), %rbx               <- second symbol (peek, not pop)
      xorq %rcx, %rcx                   <- clear high bits
      movw (%rax), %cx                  <- get length
      cmpw %cx, (%rbx)                  <- both same length?
      jne bail                          <- if not, bail
    length_ok:
      movb 2(%rbx,%rcx,1), %dl
      cmpb %dl, 2(%rax,%rcx,1)
      jne bail                          <- mismatched character
      loop                              <- else do the next one
    success:
      movq %rbp, -8(%rdi)               <- set data stack result
      pop %rax                          <- drop 'next' continuation
    bail:                               <- success falls through
      ret                               <- invoke 'return' continuation

  This function ends up being bound as @?k in the symbol table. We bind this
  once we've defined cons and bind below.

  ::/@?k
  488b o157f8                   # -8(%rdi) -> %rbp
  488b o107f0                   # -16(%rdi) -> %rax
  488b o137e8                   # -24(%rdi) -> %rbx
  4883 o357 10                  # %rdi -= 16 (pop two entries)

  4831o311 668b o010            # %rcx = length
  6639 o013                     # length check
  75:1[L:/@?k_bail - :>]

  ::/@?k_loop
  8a o124o01302                 # top of loop: populate %dl
  38 o124o01002                 # compare characters
  75:1[L:/@?k_bail - :>]        # bail if not equal
  e2:1[L:/@?k_loop - :>]        # loop if more characters (%cx != 0)

  4889 o157f8                   # %rbp -> -8(%rdi)
  58                            # pop

  ::/@?k_bail                   # fall through either way
  c3                            # invoke return or next continuation

  Here's @:k. I chose to write the closure thunk manually just to get things
  done; otherwise it would have been allocated using /:k and consed into @:k
  using the real cons function. (However, @:k is a valid list anyway.)

  Also, this closure is slightly smaller than the one that would have been
  written by /:k. (Maybe I should optimize /:k for cases like these...)

  ::/@:k-closure
  c7 o300:4[Lb:/@?k] 48ab c3

  ::/@:k
  - composition //:k, /%x, //:k, /@:k-closure, swons, swons
  c3

  Numeric symbol parsers.
  We want to generate number-pushing constant functions for any numeric symbol
  we observe. It isn't as simple as looking for strings of digits, since these
  are valid identifiers.

  What we really want to do is use some kind of prefix that is unique to numeric
  symbols in various bases. Canard does not assume decimal at all; in fact, it
  doesn't even support literal decimal numbers. Here are the prefixes:

  | x[0-9a-f]+                  <- hexadecimal number
    o[0-7]+                     <- octal number

  Numbers don't have intrinsic size beyond the size of a stack cell, which for
  this implementation is 64 bits. Also, no floating-point numbers are supported
  yet.

  Because these functions are symbol resolvers, they use the usual calling
  convention. However, instead of returning a binding that they were preloaded
  with (which is what functions generated by @:k do), they allocate a new
  constant function for each literal number observed. No attempt is made to
  cache previously used number functions even though doing this would save
  memory.

  The code-generation step is trivial because we have /:k. We just take the
  parsed number, push it onto the stack, call /:k, and return a reference to the
  resulting closure. The result is a function that pushes the number whenever it
  is invoked.

  Each digit is checked for membership within two ranges. The first is 0-9,
  which is ASCII 0x30 - 0x39. The second is a-f (lowercase!), which is ASCII
  0x61 - 0x66.

  ::/@<x                        # Resolve hexadecimal number
  488b o137f8                   # data-pop -> %rbx
  4831 o300 8b o310 8b o320     # %rdx = %rcx = %rax = 0
  668b o013                     # symbol length -> %cx
  ff   o311                     # --%cx (adjusting for the 'x' prefix)
  4883 o303 03                  # %rbx += 3 (length + 'x' prefix)

  80 o073 'x                    # is the prefix x?
  75:1[L:/@<x_bail - :>]        # if not, bail; we can't convert this symbol

  ::/@<x_digit_loop
  88 o003                       # current digit byte -> %al
  3c 'a                         # check this byte against lowercase A
  7d:1[L:/@<x_letter - :>]      # greater? if so, go to letter case
  2c '0                         # digit case: subtract '0 offset
  eb:1[L:/@<x_shift_add - :>]   # go to shift/add section
  ::/@<x_letter
  2c 57                         # letter case: subtract (0x61 - 10 = 0x57)

  ::/@<x_shift_add
  48c1 o342 04                  # %rdx <<= 4
  480b o302                     # %rdx |= %rax
  48ff o303                     # ++%rbx
  e2:1[L:/@<x_digit_loop - :>]  # loop while --%rcx

  4889 o127f8                   # %rdx -> stack top
  e8:4[L://:k]                  # create closure
  58                            # pop 'next' continuation

  ::/@<x_bail
  c3                            # end of @<x

  The function for octal is similar but much simpler, since we don't have to
  deal with the piecewise nature of digits vs letters.

  ::/@<o                        # Resolve octal number
  488b o137f8                   # data-pop -> %rbx
  4831 o300 8b o310 8b o320     # %rdx = %rcx = %rax = 0
  668b o013                     # symbol length -> %cx
  ff   o311                     # --%cx (adjusting for the 'o' prefix)
  4883 o303 03                  # %rbx += 3 (length + 'o' prefix)

  80 o073 'o                    # is the prefix o?
  75:1[L:/@<o_bail - :>]        # if not, bail; we can't convert this symbol

  ::/@<o_digit_loop
  88 o003                       # current digit byte -> %al
  2c '0                         # digit case: subtract '0 offset
  48c1 o342 03                  # %rdx <<= 3
  480b o302                     # %rdx |= %rax
  48ff o303                     # ++%rbx
  e2:1[L:/@<o_digit_loop - :>]  # loop while --%rcx

  4889 o127f8                   # %rdx -> stack top
  e8:4[L://:k]                  # create closure
  58                            # pop 'next' continuation

  ::/@<o_bail
  c3                            # end of @<o

  Quoted symbol parser.
  If we observe a symbol that begins with ', we push a closure that pushes a
  reference to that symbol. This greatly simplifies the process of defining new
  symbols. (The alternative would be to use the quotation property of lists to
  say something like :h [symbol].)

  Like /@<x above, this function allocates a new closure for every symbol it
  resolves.

  Note that this function destroys the symbols it converts. Specifically, it
  removes the leading ' and moves the length. Here's the specific
  transformation:

  | +--- original symbol pointer
    |
    06 00  ' hello                <- original
    06 05 00 hello                <- converted
       |
       +--- new symbol pointer

  ::/@<q                        # Resolve quoted symbol
  488b o107f8                   # data-pop -> %rax

  80 o17002 ''                  # is the prefix '?
  75:1[L:/@<q_bail - :>]        # if not, bail; we can't convert this symbol

  4831 o311                     # %rcx = 0
  668b o010 ff o311             # %cx = length - 1
  6689 o11001                   # write new length
  48ff o300                     # ++%rax
  4889 o107f8                   # %rax -> stack top
  e8:4[L://:k]                  # create closure
  58                            # pop 'next' continuation

  ::/@<q_bail
  c3

Reader.
Canard source is parsed by a mechanism similar to Lisp's reader. The primary
difference is that the Canard reader is much simpler and is not extensible by
mechanisms like reader macros. It recognizes the following constructs:

| 1. Lists, which are contained within square brackets.
  2. Symbols, which are comprised of any non-whitespace, non-bracket character.
  3. Quoted nil, written as [].

UTF-8 is handled transparently as a symbol character, since any UTF-8 byte is
non-whitespace and non-bracket.

  Continuations and partial parsing.
  The reader is not resumable -- that is, you can't hand it a chunk of input,
  say 'read this', and then give it the rest of the input later on. The reason
  is that doing this well means that you could reuse a state, which in turn
  means that Canard needs some form of built-in alias detection to minimize
  garbage.

  This, in turn, implies that garbage collection should be present in the
  bootstrap image, which is not where it belongs. So the reader's state is
  linearized by wrapping the reader function around the character-retrieval
  function, making the interaction non-replayable.

  Character retrieval.
  Like jonesforth, Canard uses a small buffer and the read() syscall to populate
  it. Unlike jonesforth, Canard allows you to reuse this logic on things besides
  stdin. Buffers are organized like this:

  | length | current | upper-bound | data ...

  Length, current, and upper-bound are all 4-byte unsigned integers. 'length'
  refers to the number of bytes of data, which does not include 'current' and
  'upper-bound'. So the total size of an input buffer is actually 12 + length
  bytes.

  ::/|:                         # allocate buffer
  488b o107f8                   # data-pop size into %rax
  488d o1300c                   # %rax + 12 -> %rbx
  482b o363                     # %rsi -= %rbx (total size)
  89   o036                     # %rbx -> (%rsi) (length field)
  4831 o300 4889 o10604         # zero out current and upper-bound
  4889 o167f8 c3                # data-push %rsi; return

  Buffer helper functions.
  There are two helper functions used here. One is |=, which returns the number
  of bytes we can read from a buffer. The other is |., which returns one byte
  from the buffer and advances it.

  ::/|=                         # amount of data readable from buffer
  488b o107f8                   # data-pop buffer pointer
  8b   o13008                   # upper bound
  2b   o13004                   # current size
  4889 o137f8 c3                # data-push; return

  This function advances the buffer, returning the next byte. Behavior is
  undefined if the buffer has no available data (you should check it first using
  |= above).

  ::/|.                         # advance buffer by one byte
  488b o117f8                   # data-pop buffer into %rcx
  8b   o13104                   # %ebx = current
  ff   o10104                   # ++current
  4831 o300                     # %rax = 0
  8a   o104o0010c               # %al = 12(%rax,%rbx,1) -- next byte
  4889 o107f8 c3                # return result

  Buffer read function.
  Reads data from a buffer one byte at a time, invoking a function on each byte.
  The function is not invoked if there is no data in the buffer. Here's the
  derivation:

  | |* f buf = ? [|* f buf (f *buf++)] [] (|= buf)
    [] |= %1      f buf   = [] (|= buf) f buf
    %1 %x         f buf   = f buf f
    |* %R . |. %1 f buf f = f buf (f *buf++)

  We can use the composition macro; this makes it possible to inspect the
  definition of |* after the fact. We preallocate closures for the auxiliary
  functions.

  ::/|*_k_false c7 o300:4[Lb:/|*_false] 48ab c3
  ::/|*_k_true  c7 o300:4[Lb:/|*_true]  48ab c3

  ::/|*_false c3
  ::/|*_true
  - composition /%x, /%1, /%1, /|., /., /%R, /|*
  c3

  ::/|*
  - composition /%1, /|=, /|*_k_false, /|*_k_true, /?
  c3

System functions.
Some definitions that will be required for the interpreter to work correctly
with the system it's running on. All of these end up using syscall functions,
bound in the symbol table as &0, &1, &2, &3, etc (depending on the arity).

  System calling convention.
  The top argument to any syscallX function is the number of the syscall that
  you want to execute. The other arguments are pulled from the data stack
  left-to-right; so, for example:

  | &1 x3c x0   <- 0x3c = exit(status = 0)

  The only reason syscall wrappers are particularly interesting is that they
  have to save/restore %rsi and %rdi on the return stack. Other registers, %r9,
  %r10, etc, are not saved.

  ::/&0
  56
  488b o107f8 4883 o357 08      # data-pop -> %rax
  57 0f05 5f5e 48ab c3          # syscall; pop %rdi, %rsi; data-push

  ::/&1
  56                            # push %rsi
  488b o107f8                   # data-pop -> %rax
  4c8b o117f0 4883 o357 10      # data-pop -> %rcx
  57 4887 o317                  # push %rdi; swap %rcx, %rdi
  0f05 5f5e 48ab c3             # syscall; pop %rdi, %rsi; data-push

  ::/&2
  56                            # push %rsi
  488b o107f8                   # data-pop -> %rax
  488b o117f0                   # data-pop -> %rcx
  488b o167e8 4883 o357 18      # data-pop -> %rsi
  57 4887 o317                  # push %rdi; swap %rcx, %rdi
  0f05 5f5e 48ab c3             # syscall; pop %rdi, %rsi; data-push

  ::/&3
  56                            # push %rsi
  488b o107f8                   # data-pop -> %rax
  488b o117f0                   # data-pop -> %rcx
  488b o167e8                   # data-pop -> %rsi
  488b o127e0 4883 o357 20      # data-pop -> %rdx
  57 4887 o317                  # push %rdi; swap %rcx, %rdi
  0f05 5f5e 48ab c3             # syscall; pop %rdi, %rsi; data-push

  Utility functions.
  These use the above and abstract away some of the details of system calling.
  System call numbers are from /usr/include/asm/unistd_64.h on Linux, and where
  applicable they're encoded like this:

  | 4831o300              <- xor %rax, %rax
    b0NN                  <- mov $0xNN, %al

  This ends up being two bytes smaller than the equivalent 48c7 o300 NN000000.
  The only case where b0NN is not present is for the read() syscall, which is
  number 0.

  Arguments to these system calls pass through directly, as do return values.

  ::/&read  4831o300      48ab e9:4[L:/&3 - :>]        # n, buf, fd -> n
  ::/&write 4831o300 b001 48ab e9:4[L:/&3 - :>]        # n, buf, fd -> n
  ::/&open  4831o300 b002 48ab e9:4[L:/&3 - :>]        # path, f, m -> fd
  ::/&close 4831o300 b003 48ab e9:4[L:/&1 - :>]        # fd -> status
  ::/&stat  4831o300 b004 48ab e9:4[L:/&2 - :>]        # path, buf -> n

  ::/&exit  4831o300 b03c 48ab e9:4[L:/&1 - :>]        # code -> _

::bootstrap_end

__
meta::sdoc('gdb::boot-debug', <<'__');
Canard bootstrap debugging script.
GDB definitions to make it easier to debug the main image.

break *0x40014d
run

set $stack_end = 0

define s
  ni

  if $stack_end == 0
    set $stack_end = $rsp
  end

  print_data_stack
  print_return_stack
  print_heap

  printf "%c[1;32m%%rax = %lx\n", 27, $rax
  printf "%c[1;32m%%rcx = %lx\n", 27, $rcx

  printf "%c[1;32minstruction queue%c[1;30m\n", 27, 27
  x/8i $pc
  printf "%c[0;0m", 27
end

Stack inspectors.
Print the top few items on any given stack. Generally, all stack items will be
pointers, so dereference those.

define print_data_stack
  printf "%c[1;32mdata stack%c[1;30m: %lx\n", 27, 27, $rdi
  set $x = $rdi
  set $lower = 0x400000 + *0x400060
  while $x > $lower
    set $x = $x - 8
    print_cell $x
  end
end

define print_return_stack
  printf "%c[1;32mreturn stack%c[1;30m: %lx\n", 27, 27, $rsp
  set $x = $rsp
  while $x < $stack_end
    print_cell $x
    set $x = $x + 8
  end
end

define print_heap
  printf "%c[1;32mheap%c[1;30m: %lx\n", 27, 27, $rsi
  set $count = 0
  x/i $rsi
  while $_ < 0x4fffff && $count < 10
    x/i
    set $count = $count + 1
  end
end

define print_cell
  x/g $arg0
  if $__ >= 0x400000 && $__ < 0x500000
    x/i $__
  end
end


__
meta::template('comment', '\'\';     # A mechanism for line or block comments.');
meta::template('def', <<'__');
# Define a new template. Analogous to the C preprocessor's #define directive.
# For example:
#
# - def foo x, y, z << end
#   hello $x, $y, and $z!
#   This is an ${x}message.
# - end
#
# You can then use that template immediately:
#
# - foo 3, 4, 5
#
# Interpolation is achieved by evaling a Perl heredoc; the usual caveats apply.
# A variable called $body is automatically bound to the body contents if there
# are any; for example:
#
# - def named x << end
#   name $x {
#   $body
#   }
# - end
#
# - named 'foo' << end
#   woohoo
# - end
#
# You can define a "plural" form like this:
#
# - def -p say_hi_to << end
#   Hi $_!
# - end
#
# - say_hi_to Foo, Bar, Baz
#
# Plural forms still have the $body variable (which doesn't change across
# arguments), but they can't take formal parameters.

my ($options, $name, @args) = separate_options(split /\s+/, $_[0]);
my @formals                 = map split(/,\s*/), @args;
my $body                    = $_[1];

my $formal_list             = join(', ', map "\$$_", @formals);
my $parameter_bindings      = "my ($formal_list) = split /,\\s*/, \$_[0]";
my $body_binding            = "my \$body = \$_[1]";
my $heredoc_delimiter       = state();

# This will work great unless you put large hexadecimal barewords on otherwise
# blank lines in your code. At that point there's a 2^-128 chance that it will
# bomb out horribly.
my $plural = $$options{'--plural'} || $$options{'-p'};

die "- def $name: cannot use formal parameters with the -p option"
if $plural && @formals;

$plural ? meta::externalize "template::$name", "- def -p $name",
            eval "sub {\n$body_binding;\n" .
                 "join \"\\n\", map <<$heredoc_delimiter, " .
                                    "split /,\\s*/, \$_[0];\n" .
                 "$body\n" .
                 "$heredoc_delimiter\n}"

        : meta::externalize "template::$name", "- def $name @formals",
            eval "sub {\n$parameter_bindings;\n$body_binding;\n" .
                 "<<$heredoc_delimiter\n$body\n$heredoc_delimiter\n}";

die $@ if $@;

# No output from this template.
'';

__
meta::template('eval', <<'__');
my $result = eval $_[0];
terminal::warning("Error during template evaluation: $@") if $@;
$result;
__
meta::template('failing_conditional', <<'__');
my ($commands)    = @_;
my $should_return = $commands =~ / if (.*)$/ && ! eval $1;
terminal::warning("eval of template condition failed: $@") if $@;
$should_return;
__
meta::template('include', <<'__');
my ($commands) = @_;
return '' if template::failing_conditional($commands);
join "\n", map retrieve($_), split /\s+/, $commands;
__
meta::template('pinclude', <<'__');
# Just like the regular include, but makes sure to insert paragraph boundaries
# (this is required for SDoc to function properly).

my ($commands) = @_;
return '' if template::failing_conditional($commands);
my $text = join "\n\n", map retrieve($_), split /\s+/, $commands;
"\n\n$text\n\n";
__
meta::vim_highlighter('canard', <<'__');
" Canard language highlighter | Spencer Tipping
" Licensed under the terms of the MIT source code license

if !exists("main_syntax")
  if version < 600
    syntax clear
  elseif exists("b:current_syntax")
    finish
  endif
  let main_syntax = "canard"
endif

syn case match
setlocal iskeyword=33-90,92,94-127

syn region  canard_bracketed_region     matchgroup=canard_comment           start=/\[/ end=/]/ contained transparent
syn region  canard_comment              matchgroup=canard_comment_delimiter start=/nb\s*\[/ end=/]/ contains=canard_bracketed_region
syn region  canard_quoted_symbol        start=/\<'/ end=/[ \n\t\r\[\]]\@=\|$/
syn match   canard_bracket              /:\?\[/
syn match   canard_bracket              /]/
syn match   canard_number               /\<[0-9a-f][0-9a-f]\>/

syn match   canard_stack_intrinsic      /\<%[01234][a-d]\{0,4\}\>/
syn match   canard_stack_intrinsic      /\<^[1234]\>/

syn keyword canard_def                  =
syn keyword canard_intrinsic            $< $\| $# $ $^ $+ $: $. $= ? :? /? :: :^ . @ !
syn keyword canard_arithmetic           + - * / % << >> >>> \| & ^ < > <= >= == != === !==

hi link canard_comment                  Comment
hi link canard_comment_delimiter        Special
hi link canard_quoted_symbol            Identifier
hi link canard_def                      Keyword
hi link canard_bracket                  Special
hi link canard_number                   Number
hi link canard_intrinsic                Type
hi link canard_arithmetic               Type
hi link canard_stack_intrinsic          Operator

__
internal::main();

__DATA__
