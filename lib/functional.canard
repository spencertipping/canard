nb[ Canard standard library: function manipulation | Spencer Tipping]
nb[ Licensed under the terms of the MIT source code license]

nb[ Composition.]
nb[ Functions can be composed by appending their list forms. . @o f g x is the same as f g x.]

= '@o [:+ @: ^1 [@:]]

nb[ Objectification.]
nb[ Functions can be objectified (converted to anonymous list form) by using @ on any symbols that are present. Lists pass through unmodified, since they are already functions.]

= '@: [? [] [@] :? %0]

nb[ Recursive map.]
nb[ Like the regular map function, but distributes over sub-lists recursively. This is primarily useful for editing functions in their list form.]

nb[ | :** [f] :: x y -> :* [:** [f]] :: x y]
nb[   :** [f] _      -> f _]

nb[ You can use it like this: :** [+ 1] [1 2 [3 4] 5], yielding [2 3 [4 5] 6].]

= ':** [? [:* :: :: [] ':**] [.] :? %1]

nb[ Generated by SDoc ]
