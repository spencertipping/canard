log map [+ 1] filter [=== 0 % swap 3] [1 2 3 4 5 6 7 8 9 10]

def 'map [cond [cons map stash 1 [head swap i] dup stash 1 [tail dup]] [nb] is_cons nip]
      nb [map [f] (cons x y) -> cons map [f] x f y
          stash 1 [tail dup]    [f] (cons x y)       = [f] y (cons x y)
          dup                   [f] y (cons x y)     = [f] [f] y (cons x y)
          stash 1 [head swap i] [f] [f] y (cons x y) = [f] x (f y)
          cons map              [f] x (f y)          = cons map [f] x f y

          map [f] [] -> []]

def 'filter [cond [cond [cons swap] [nb] stash 1 [stash 1 [filter] swap] swap stash 1 [i] dup stash 1 [dup swap uncons]] [nb] is_cons nip]
         nb [filter [f] (cons x y) -> (cond [cons swap] [nb] (f y)) y filter [f] x
             dup stash 1 [dup swap uncons]   [f] (cons x y)       = [f] [f] y y x
             swap stash 1 [i]                [f] [f] y y x        = (f y) [f] y x
             stash 1 [stash 1 [filter] swap] (f y) [f] y x        = (f y) y filter [f] x
             cond [cons swap] [nb]           (f y) y filter [f] x = cond [cons swap] [nb] (f y) y filter [f] x

             filter [f] [] -> []]

def 'tail [stash 1 [nb] uncons]
def 'head [nb uncons]

def 'nb   [permute 1 []]
def 'swap [permute 2 [1 0]]
def 'nip  [permute 0 [1]]
def 'dup  [permute 0 [0]]
