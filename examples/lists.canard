log map [+ 1] filter [not % swap 3] [1 2 3 4 5 6 7 8 9 10]

def 'map [cond [cons map stash 1 [head swap i] dup stash 1 [tail dup]] [nb] is_cons nip]
      nb [map [f] (cons x y) -> cons map [f] x f y
          stash 1 [tail dup]    [f] (cons x y)       = [f] y (cons x y)
          dup                   [f] y (cons x y)     = [f] [f] y (cons x y)
          stash 1 [head swap i] [f] [f] y (cons x y) = [f] x (f y)
          cons map              [f] x (f y)          = cons map [f] x f y

          map [f] [] -> []]

def 'filter [cond [cond [cons swap] [nb] i stash 3 [filter] permute 3 [2 1 1 2 0] uncons swap] [nb] is_cons nip]
         nb [filter [f] (cons x y) -> cond [cons swap] [nb] f y y filter [f] x
             uncons swap             [f] (cons x y)       = x y [f]
             permute 3 [2 1 1 2 0]   x y [f]              = [f] y y [f] x
             stash 3 [filter]        [f] y y [f] x        = [f] y y filter [f] x
             cond [cons swap] [nb] i [f] y y filter [f] x = cond [cons swap] [nb] f y y filter [f] x

             filter [f] [] -> []]

def 'tail [stash 1 [nb] uncons]
def 'head [nb uncons]

def 'pull [permute 0 cons nil]
def 'nb   [permute 1 nil]
def 'swap [permute 2 [1 0]]
def 'nip  [pull 1]
def 'dup  [pull 0]
